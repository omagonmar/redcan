#!/usr/bin/env python
#
##
##	BackAndPrepare.py:   		Stacking of individual datasets
##
##	Inputs: 		List of files generated by the identification
##	Outputs:		rmi_'Input'
##
##	Version 1.0: 		22/02/2011
##

#
# Import libraries
#



import sys
from pyraf import *
import shutil
import pyfits
import numpy
from pyfits import getdata, getheader
iraf.images(_doprint=0)
iraf.immatch(_doprint=0)
#iraf.nmisc()
iraf.gemini(_doprint=0)
dirmidir = sys.argv[1:2]
dirmidir = dirmidir[0]

iraf.reset(midir = dirmidir)
iraf.task(midir = dirmidir + "midir.cl")
iraf.midir()


#
##
#### Removing bad chops-nods and preparing data
##
#
infile = sys.argv[2:3]
infile = infile[0]
back_check = sys.argv[3:4]
back_check = back_check[0]

file = open(infile,'r')
lines = file.readlines()


if back_check != 'yes':


	for line in lines:
		line = line.replace('\n','')
		line = line.replace(' ','')
		aux = line.split(',')
		fileName = str(aux[0])
		print "##################tpreparing...."
		iraf.unlearn('tprepare')
		iraf.tprepare(inimages='fltb_' + fileName,outpref='t',outimages='',verbose='yes',stackop="stack",combine="average",fl_check="yes")

		print "##################tpreparing.... finished."

		os.rename('tfltb_' + fileName, 'vtfltb_' + fileName)
		# ###################################################
		# ## Modification of files to register (28-10-2013):
		iraf.miregister(inimages='vtfltb_' + fileName, outimages='',outpref="d", combine="average",verbose='yes')
		#iraf.mistack(inimages='vtfltb_' + fileName, outimages='',outpref="d", combine="average",frametype="dif", verbose='yes')
		# ## End of modification (28-10-2013)
		# ###################################################
		iraf.mistack(inimages='vtfltb_' + fileName, outimages='',outpref="c", combine="average",frametype="src", verbose='yes')
		iraf.mistack(inimages='vtfltb_' + fileName, outimages='',outpref="a", combine="average",frametype="ref", verbose='yes')
		iraf.miclean(inimages='dvtfltb_' + fileName,outimages='',outpref='mi', fl_stai='no',thresho='3.', verbose='yes', fl_columns='no', fl_rows='no')
		iraf.miclean(inimages='cvtfltb_' + fileName,outimages='',outpref='mi', fl_stai='no',thresho='3.', verbose='yes', fl_columns='no', fl_rows='no')
		iraf.miclean(inimages='avtfltb_' + fileName,outimages='',outpref='mi', fl_stai='no',thresho='3.', verbose='yes', fl_columns='no', fl_rows='no')


if back_check == 'yes':
    os.system("ds9&")

file = open(infile,'r')
lines = file.readlines()

for line in lines:
	line = line.replace('\n','')
	line = line.replace(' ','')
	aux = line.split(',')
	fileName = str(aux[0])
	print "##################tpreparing...."
	iraf.tprepare(inimages='fltb_' + fileName,outpref='t',outimages='',verbose='yes',stackop="stack",combine="average",fl_check="yes")
	print "##################tpreparing.... finished."
if back_check == 'yes':
	print "Checking bad chops interactively..."
	for line in lines:
		line = line.replace('\n','')
		line = line.replace(' ','')
		aux = line.split(',')
		fileName = str(aux[0])

        iraf.miview(inimages='tfltb_' + fileName, outimages='',outprefix='v', rawpath='',fl_verbose='yes', type='dif',delay=0.1,fl_inter = 'yes',fl_disp_fill = 'yes',zscale = 'yes' )
        if os.path.isfile('vtfltb_' + fileName):
            print "Some chop/nod excluded"
        else:
            shutil.copyfile('tfltb_' + fileName, 'vtfltb_' + fileName)
