#!/usr/bin/python
#
##
##	Stacking.py:   		Stacking of individual datasets
##
##	Inputs: 		List of files generated by the identification
##	Outputs:		rmi_'Input'
##
##	Version 1.0: 		22/02/2011
##

#
# Import libraries
#

import sys
from pyraf import *
import pyfits
import numpy
from pyfits import getdata, getheader
import SubStacking

iraf.images()
iraf.immatch()
#iraf.nmisc()
##
#### Inputs:
##

try:
	os.remove('rmi_*')
except os.error:
	pass

infile = sys.argv[1:2]
infile = infile[0]
file = open(infile,'r')
RejecValue = 0.2

lines = file.readlines()
for line in lines:
	line = line.replace('\n','')
	aux = line.split('\t')
	fileName = str(aux[0])
#	fileName = 'fl_'+str(aux[0])
#	fileNamee = str(aux[0])
#	myFile=pyfits.open(fileName)
#	finalhed = numpy.arange(2).reshape(2)
	hdr  = getheader(fileName)
	myFile=pyfits.open(fileName)
	myFile.info()
	NNODS = int(aux[1]) 
	NNODSETS = int(aux[2])	
	NSAVSETS = int(aux[3])
	print "@@@@@@@@@@@@@@@     Running  " + fileName + "( NODSTOTAL = " + str(NNODS*NNODSETS) + ' and NSAVSETS = ' + str(NSAVSETS) + ' )'
	# +++++ Checking bad savesets for each NOD
	print "@@@ Checking savesets:"
	print "@ Note that savesets below " + str(1.-RejecValue) + " or above " + str(1.+RejecValue)+ " times the median of the NOD  are removed"
	# +++++ Running for all the NODS saved in the observation	
	for i in range(1,NNODSETS*NNODS +1) :
		NOD = myFile[i].header["NOD"]
		listaA = listaB = listaC = ""
		# +++++ Running for all the SAVESETS saved for each NOD
		for j in range(1,NSAVSETS +1):
			try:
				os.remove('rmi_'+str(i)+'_s'+str(j)+fileName)
			except os.error:
				pass
			if j == 1:			
				listaA += fileName+'['+str(i)+'][*,*,1,'+str(j)+']'
				listaB += fileName+'['+str(i)+'][*,*,2,'+str(j)+']'
				listaC += 'rmi_'+str(i)+'_s'+str(j)+fileName
			else:
				listaA += ','+fileName+'['+str(i)+'][*,*,1,'+str(j)+']'
				listaB += ','+fileName+'['+str(i)+'][*,*,2,'+str(j)+']'
				listaC += ','+'rmi_'+str(i)+'_s'+str(j)+fileName
		iraf.imarith(listaA, "-", listaB,listaC)
		StddevStat = iraf.imstat(listaC,fields='stddev',format=0,Stdout=1,nclip=3)		
		for j in range(0,NSAVSETS): 
			StddevStat[j] = float(StddevStat[j]) 
		MedianStddevStat = numpy.median(StddevStat)
		jrejected=[]
		jaccepted=[]
		for j in range(0,NSAVSETS): 
			if StddevStat[j] > (1.+RejecValue)*MedianStddevStat or  StddevStat[j] < (1.- RejecValue)*MedianStddevStat :	
				jrejected.append(str(j))
			else:	
				jaccepted.append(str(j))
		for j in jaccepted:
			j = int(j) +1
			os.remove('rmi_'+str(i)+'_s'+str(j)+fileName)
		for j in jrejected:
			j = int(j) +1
			os.rename('rmi_'+str(i)+'_s'+str(j)+fileName, 'PRODUCTS/rmsavs_i'+str(i)+'_j'+str(j)+"_"+fileName )
			print "For NOD No." + str(i) + "  deleted saveset: " + str(j) + '  ( Saved as:     PRODUCTS/rmsavs_i'+str(i)+'_j'+str(j)+'_'+fileName+' )'

		#############################################################	
		print "Combining without removing..."	
		#############################################################	
		SubStacking.Stack1(fileName,NOD,listaA,listaB,i)
	bfname = 's1_'
	SubStacking.Stack2(fileName,NNODSETS,NNODS,i,hdr,bfname)
		
	for i in range(1,NNODSETS*NNODS +1) :
		NOD = myFile[i].header["NOD"]
		print "Combining after removing..."		
		listaA = listaB = ""
		for j in jaccepted:
			j = int(j) +1
			if j == 1:			
				listaA += fileName+'['+str(i)+'][*,*,1,'+str(j)+']'
				listaB += fileName+'['+str(i)+'][*,*,2,'+str(j)+']'
			else:
				listaA += ','+fileName+'['+str(i)+'][*,*,1,'+str(j)+']'
				listaB += ','+fileName+'['+str(i)+'][*,*,2,'+str(j)+']'
		
		#############################################################	
		print "Combining after removing..."		
		#############################################################	
		SubStacking.Stack1(fileName,NOD,listaA,listaB,i)
	bfname = 's2_'
	SubStacking.Stack2(fileName,NNODSETS,NNODS,i,hdr,bfname)

	os.rename('s1_'+fileName, 'OUTPUTS/s1_'+fileName )
	os.rename('s2_'+fileName, 'OUTPUTS/s2_'+fileName )
	print "Images saved at the directory OUTPUTS as s1_"+ fileName + " and s2_"+ fileName
file.close()
