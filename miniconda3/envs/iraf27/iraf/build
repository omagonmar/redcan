#!/bin/csh
#
# See BUILD_NOTES for details
#
# This is a csh script because it uses stuff that comes with IRAF
# - as of June 2016, it could be converted to sh, since irafuser.csh has been.

# try to force debugging
#   to build IRAF statically, add -static -static-libgcc to XC_LFLAGS
setenv XC_LFLAGS "-g"

switch ( $1 )
case 64:
        setenv bitsflag ""
        breaksw
default:
        setenv bitsflag "--32"
        breaksw
endsw

# Configure the environment for building IRAF (this is repeated by mksysgen
# to pick up the VOS libraries, once available):
eval `unix/hlib/setup --csh --level core_build $bitsflag`

# During the build, we keep IRAF commands that should be on the PATH in
# bin_directory/, which gets created by ./install below. This later gets
# replaced by bin/, in the parent directory of the final installation.
set path = ( $iraf/bin_directory `echo $path | sed 's?/usr/local/bin??' ` )

# Record build environment to help with troubleshooting:
env | sort
pwd
which ranlib
echo

# Record determination of IRAFARCH for later use by unix/hlib/setup:
if (! -e ur) then
    mkdir ur
endif
echo $IRAFARCH > ur/irafarch

# Do a temporary in-place "install", mainly to create links in the PATH to
# IRAF binaries needed during compilation (the "." specifies in-place mode):
./install $bitsflag .

# Link to some headers needed for compilation, which NOAO IRAF historically
# installs in an OS directory as root (& others found to be needed):
rm -rf include ; mkdir include

ln -s ../unix/hlib/libc/iraf.h			include/  # ur_normalized copy
ln -s ../unix/bin/f2c.h				include/  # relocatable link
cp $iraf/unix/hlib/libc/vosproto.h 		include/
cp $iraf/unix/boot/xyacc/yaccpar.x 		include/

touch $iraf/extern/.zzsetenv.def

( cd unix/f2c/src ; make -f makefile.u ; cp f2c $iraf/unix/bin.$IRAFARCH/f2c.e ) >& log.010.f2c
if ( $status != 0 ) then
	echo f2c compile failed - see log.010.f2c
	exit 1
endif

( cd unix/f2c/libf2c ; make -f makefile.u CFLAGS="$CFLAGS" ; cp f2c.h libf2c.a $iraf/unix/bin.$IRAFARCH/ ) >& log.020.libf2c
if ( $status != 0 ) then
	echo libf2c compile failed - see log.020.libf2c
	exit 1
endif

# Link to the right bin directories & headers for the build platform:
make $IRAFARCH 

# This is all that "make sysgen" does:
util/mksysgen >& log.030.mksysgen

# Check the main build logs for unrecognized errors or warnings (since IRAF
# compilation doesn't return a reliable exit status):
tr -d '[\015]' < log.030.mksysgen | egrep -v -f mkpkg_patterns
set st=$status

# Remove an erroneous circular symlink that the build leaves lying around
# (to prevent conda failing when updating link paths):
rm -f $iraf/vo/bin.generic/bin.$IRAFARCH

# Generate the help & apropos databases:
util/make_help iraf >& log.110.help || st=1
util/make_help noao >>& log.110.help || st=1
util/make_help color >>& log.110.help || st=1
util/make_help vol >>& log.110.help || st=1

exit $st
