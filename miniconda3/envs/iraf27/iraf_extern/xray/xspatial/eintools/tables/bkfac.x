# $Header: /home/pros/xray/xspatial/eintools/tables/RCS/bkfac.x,v 11.0 1997/11/06 16:30:56 prosb Exp $
# $Log: bkfac.x,v $
# Revision 11.0  1997/11/06 16:30:56  prosb
# General Release 2.5
#
# Revision 9.0  1995/11/16 18:48:38  prosb
# General Release 2.4
#
#Revision 1.2  1994/08/04  14:47:23  dvs
#Changed units of RCRVL1 & RCRVL2 from pix to deg
#
#Revision 1.1  94/03/15  09:14:57  prosb
#Initial revision
#
#
#--------------------------------------------------------------------------
# Module:       bkfac.x
# Project:      PROS -- EINSTEIN TOOLS
# External:     bkf_setup, bkf_rdinfo
# Copyright:    Property of Smithsonian Astrophysical Observatory
#               1994.  You may do anything you like with this
#               file except remove this copyright.
# Modified:     {0} David Van Stone -- 3/94 -- initial version 
#               {n} <who> -- <when> -- <does what>
#--------------------------------------------------------------------------
#
# Table manipulation routines for bkfac table
#
#--------------------------------------------------------------------------

include "bkfac.h"
include "../source/et_err.h"
include "../source/band.h"

#--------------------------------------------------------------------------
# Procedure:    bkf_setup
#
# Purpose:      To set up the bkfac table for creation or reading
#
# Input variables:
#               use_original_data	using original data?
#		band			which band are we expecting?
#
# Output variables:
#               p_gt_info	pointer to generic table info
#
# Description:  There are two types of background factors tables.
#		
#		1. The one created for the Einstein IPC unscreened CDROM.
#
#		This is considered the "original data".  It stores 
#		background factors for both the hard and soft bands.
#
#		2. The bkfac tables generated by EINTOOLS (bkfac_make).
#
#		This table is made with one specific band in mind.
#
#		These two tables have different column names for the
#		bright Earth factor and the PI counts factor -- this is
#		why we need to know if we are creating an info structure
#		whether we are using the original data, and if so, which
#		band (hard or soft) we are using.
#
#		This routine will set up the generic table info pointer
#		so we can automatically read in the data from the table
#		or write to the table easily.
#
#		Memory is set aside for the GT info structure.
#		
#		See gt_info.x for more on generic table info structure,
#		and bkfac.h for the actual data structure used for bkfac.
#
#--------------------------------------------------------------------------

procedure bkf_setup(use_original_data,band,p_gt_info)
bool	use_original_data	# i: using original data?
int	band			# i: which band?
pointer p_gt_info		# o: pointer go GT info

### LOCAL VARS ###

int	col_type[N_COL_BKFAC]	# array of column types
int	i_col			# index into columns

### BEGINNING OF PROCEDURE ###

begin
        #----------------------------------------------
        # All the column types are double!
        #----------------------------------------------
	do i_col=1,N_COL_BKFAC
	{
	   col_type[i_col]=TY_DOUBLE
	}

        #----------------------------------------------
        # Initialize the GT info pointer
        #----------------------------------------------
	call gt_mk_info(N_COL_BKFAC,col_type,p_gt_info)

        #----------------------------------------------
        # Fill in PI_CTS and BEFAC column names, 
	# depending on which type of table we want.
        #----------------------------------------------
	if (use_original_data)
	{
          switch (band)
          {
             case HARD_BAND:
		call gt_colname_def(p_gt_info,BK_BEFAC_HARD_NAME,BK_BEFAC_COL)
		call gt_colname_def(p_gt_info,
					BK_PI_CTS_HARD_NAME,BK_PI_CTS_COL)
             case SOFT_BAND:
		call gt_colname_def(p_gt_info,BK_BEFAC_SOFT_NAME,BK_BEFAC_COL)
		call gt_colname_def(p_gt_info,
					BK_PI_CTS_SOFT_NAME,BK_PI_CTS_COL)
             default:
                call error(1,
                     "Original data must use hard or soft band")
	  }
        }
	else
	{
	   call gt_colname_def(p_gt_info,BK_BEFAC_NAME,BK_BEFAC_COL)
	   call gt_colname_def(p_gt_info,BK_PI_CTS_NAME,BK_PI_CTS_COL)
	}

        #----------------------------------------------
        # Fill in rest of column names
        #----------------------------------------------
	call gt_colname_def(p_gt_info,BK_DSFAC_NAME,   	BK_DSFAC_COL)
	call gt_colname_def(p_gt_info,BK_LIVETIME_NAME,	BK_LIVETIME_COL)
	call gt_colname_def(p_gt_info,BK_RCRVL1_NAME,	BK_RCRVL1_COL)
	call gt_colname_def(p_gt_info,BK_RCRVL2_NAME,	BK_RCRVL2_COL)
	call gt_colname_def(p_gt_info,BK_RCROT2_NAME,	BK_RCROT2_COL)

        #----------------------------------------------
        # Set units
        #----------------------------------------------
	call gt_units_def(p_gt_info,"sec",	BK_LIVETIME_COL)
	call gt_units_def(p_gt_info,"deg",	BK_RCROT2_COL)
	call gt_units_def(p_gt_info,"deg",	BK_RCRVL1_COL)
	call gt_units_def(p_gt_info,"deg",	BK_RCRVL2_COL)
	call gt_units_def(p_gt_info,"counts",	BK_PI_CTS_COL)

        #----------------------------------------------
        # Set format types
        #----------------------------------------------
        call gt_fmt_def(p_gt_info,"%15.5g",      BK_BEFAC_COL)
        call gt_fmt_def(p_gt_info,"%15.5g",      BK_DSFAC_COL)
        call gt_fmt_def(p_gt_info,"%15.5f",      BK_LIVETIME_COL)
        call gt_fmt_def(p_gt_info,"%15.5f",      BK_RCRVL1_COL)
        call gt_fmt_def(p_gt_info,"%15.5f",      BK_RCRVL2_COL)
        call gt_fmt_def(p_gt_info,"%15.5f",      BK_RCROT2_COL)
        call gt_fmt_def(p_gt_info,"%15.2f",      BK_PI_CTS_COL)
end

#--------------------------------------------------------------------------
# Procedure:    bkf_rdinfo
#
# Purpose:      Reads some information from a BKFAC table
#
# Input variables:
#               use_original_data	using original data?
#		band			which band are we expecting?
#		tp			pointer to BKFAC table
#
# Output variables:
#               bects			bright Earth counts
#               dscts			deep survey counts
#		dstime			deep survey livetime
#
# Description:  This routine retrieves the bright Earth and deep survey
#		counts and the deep survey livetime from the BKFAC
#		table, in the appropriate manner depending on which
#		type of BKFAC table.
#
#		For instance, the "original data" tables store the BE and DS
#		counts in a header keyword depending on the band,
#		whereas the eintools-generated bkfac tables only have
#		one header keyword for the BE and DS counts.
#--------------------------------------------------------------------------

# reads bects, etc.
procedure bkf_rdinfo(use_original_data,band,tp,bects,dscts,dstime)
bool	use_original_data	# i: using original data?
int	band			# i: which band?
pointer	tp			# i: pointer to table
double	bects			# o: bright Earth counts	
double	dscts			# o: deep survey counts
double	dstime			# o: deep survey time

### EXTERNAL FUNCTION DECLARATIONS ###

double	tbhgtd()  # returns the value of a header parameter [tables]

### BEGINNING OF PROCEDURE ###

begin
        #----------------------------------------------
        # Read in deep survey time
        #----------------------------------------------
	dstime=tbhgtd(tp,BK_DSTIME)

        #----------------------------------------------
        # Read in BE & DS counts, depending on the
	# type of table.
        #----------------------------------------------
	if (use_original_data)
	{
          switch (band)
          {
             case HARD_BAND:
		bects=tbhgtd(tp,BK_BEHARD)
		dscts=tbhgtd(tp,BK_DSHARD)
             case SOFT_BAND:
		bects=tbhgtd(tp,BK_BESOFT)
		dscts=tbhgtd(tp,BK_DSSOFT)
             default:
                call error(1,
                     "Original data must use hard or soft band")
	  }
	}
	else
	{
	    bects=tbhgtd(tp,BK_BECTS)
	    dscts=tbhgtd(tp,BK_DSCTS)
        }
end
