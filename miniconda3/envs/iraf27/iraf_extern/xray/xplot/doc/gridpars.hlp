#$Header: /home/pros/xray/xplot/doc/RCS/gridpars.hlp,v 11.0 1997/11/06 16:38:16 prosb Exp $
#$Log: gridpars.hlp,v $
#Revision 11.0  1997/11/06 16:38:16  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 19:09:11  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  17:02:37  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:49:01  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:41:34  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  22:35:34  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  15:10:35  prosb
#General Release 2.0:  April 1992
#
#Revision 1.4  92/04/24  11:42:50  janet
#updated for apr 92 release.
#
#Revision 1.3  92/04/22  14:53:51  janet
#*** empty log message ***
#

.help gridpars Apr92 xray.xplot
.ih
NAME
gridpars -- Imcontour/Tvimcontour parameters for WCS labeling & drawing.

.ih
USAGE

.ih
DESCRIPTION

This file describes the parameters available to change the labels &
graphics used in displaying the WCS.  The ST wcslab library is used by 
Imcontour/Tvnewimcontour to draw the coordinate axes and labels as 
defined in the image's world coordinate system (WCS).  There are two 
supported systems, the TAN projection of Right Ascension/Declination, 
and any LINEAR system.

Note that this is a prototype library.  It recognizes some of the WCS
information contained in images but not all of them.  Not all images,
even if derived from FITS or created using IRAF or STSDAS contain 
coordinate transformation parameters.  If no WCS is defined, the default
is to use a system based on the pixel size of the image.  If an unrecognized 
WCS is seen, wcslab will assume that it is linear.  The only non-linear 
system recognized is the TAN projection for Right Ascension/Declination.
.ih
PARAMETERS
.le
.ls (axis1_minor = 5) [integer]
The number of minor intervals that will appear between major 
grid lines/tick marks for axis 1 (right ascension).
.le
.ls (axis2_minor = 5) [integer]
The number of minor intervals that will appear between major grid
lines/tick marks for axis 2 (declination).
.le
.ls (title_size = 2.0) [real]
The size of characters used to draw the title.
.le
.ls (title_side = "top" [string]
The  side  of the plot on which to place the title.  The options
are "left", "right", "bottom", and "top".

.le
.ls (axis1_title = "") [string]
String to use as the title for the Axis 1 (right ascension) axis.  If
empty, the
default, no axis title will be written.
.le
.ls (axis2_title = "") [string]
String to use as the title for the Axis 2 (declination axis.  If empty, the
default, no axis title will be written.
.le
.ls (axis_title_size = 1.5) [real]
The size that the axis1_title and axis2_title strings will be
written.
.le
.ls (remember = no) [bool]
Modify parameter file when done?  If yes, parameters that may have
been calculated by the task are written back to the parameter file.
If no, the default, the parameter file is left untouched by the task.
This is useful if some slight modification is desired to produce a
slightly different graph.
.le
.ls (axis1_side = "indef") [string]
Which side or sides to place the axis 1 labels.  If specified as
"indef", the default, wcslab will decide which side to best place the
axis 1 labels.  Possible values are "indef", "right", "left", "top", or
"bottom", or it can be a list of any of the above values if labels are
to appear on more than one side.
.le
.ls (axis2_side = "indef" ) [string]
Which side or sides to place the axis 2 labels.  If specified as
"indef", the default, wcslab will decide which side to best place the
axis 2 labels.  Possible values are "indef", "right", "left", "top", or
"bottom", or it can be a list of any of the above values if labels are
to appear on more than one side.
.le
.ls (full_label = no) [bool]
If full_label is no, the default, then only certain labels
will be written in full format.  This specifically refers to Right
Ascension and Declination.  If full_label is yes, then
the full format of labels will always be produced.
.le
.ls (rotate = yes) [bool]
If rotate is yes, the default, then labels will be written
at an angle to match that of the major grid lines that are being
labeled.  If rotate is no, then labels are always written
"normally", that is, always horizontally.
.le
.ls (justify = "indef") [string]
String indicating towards which direction will axis 2 (declination)
labels appear from the point they are labeling on polar-type graphs.
If "indef", the default, the task will calculate this.  Possible
values are "indef", "right", "left", "top", "bottom".
.le
.ls (label_size = 1. ) [real]
This indicates what size characters are used to write major grid line
labels.
.le
.ls (axis1_title_side = "indef") [string]
Which side to place the title specified in the parameter axis1_title.
If "indef", the default", wcslab will make a guess as to where the
title should go.  Possible values are "indef", "right", "left", "top",
"bottom".
.le
.ls (axis2_title_side = "indef") [string]
Which side to place the title specified in the parameter axis2_title.
If "indef", the default, wcslab will make a guess as to where the
title should go.  Possible values are "indef", "right", "left", "top",
"bottom".
.le
.ls (major_tick = .03) [real]
Size of major tick marks relative to the size of the viewport.  The
default is that major tick marks are .03 times the size of the
viewport.
.le
.ls (minor_tick = .01) [real]
Size of minor tick marks relative to the size of the viewport.  The
default is that minor tick marks are .01 times the size of the
viewport.
.le
.le (tick_in = yes) [boolean]
Do tick marks point into instead of away from the graph ?
.le
.ls (major_line = "solid") [string]
String indicating what type of line should be used to draw the major
grind lines.  Possible values are "solid", "dotted", "dashed", and
"dotdash".
.le
.ls (minor_line = "dotted") [string]
String indicating what type of line should be used to draw the minor
grind lines.  Possible values are "solid", "dotted", "dashed", and
"dotdash".
.le
.ls (axis1_int = "") [string]
String indicating at what interval major grid lines should be drawn
along axis 1 (at the moment, axis 1 only represents right
ascension).  If empty, the default, the task will calculate this.
.le
.ls (axis1_beg = "") [string]
String indicating the lowest value of axis 1 (right ascension) that
will appear in the graph.  If empty, the default, the task will
calculate this.
.le
.ls (axis1_end = "") [string]
String indicating the highest value of axis 1 (right ascension)
that will appear in the graph.  If empty, the default, the task will
calculate this.
.le
.ls (axis2_int = "") [string]
String indicating the interval that major grid lines will be drawn for
axis 2 (declination).  If empty, the default, the task will
calculate this.
.le
.ls (axis2_beg = "") [string]
String indicating the lowest value of axis 2 (declination) that will
appear on the graph.  If empty, the default, the task will calculate
this. 
.le
.ls (axis2_end = "") [string]
String indicating the highest value of axis 2 (declination) that
will appear on the graph.  If empty, the default, the task will
calculate this.
.le
.ls (axis2_dir = "") [string]
String indicating at what axis 1 (right ascension) that axis 2
(declination) labels will be written for polar-type graphs.  If empty,
the default, the task will calculate this.
.le
.ls (graph_type = "") [string]
String indicating what type of graph will be drawn.  If empty, the
default, the task will determine this.  Possible values are "normal",
"polar", or "near_polar".
.le
.ls (version) [string]
The date that the running version of software was installed in the
current package.
.le
.ih
EXAMPLES
.ih
AXIS SPECIFICATION
In the parameters and throughout this document, reference will be made
to 'Axis 1' and 'Axis 2'.  In general, this refers to which axis in
the MWCS information is being referred to.  Specifically, 'Axis 1'
will refer to the first axis specified iin and MWCS specification.  In
image headers, keywords such as CTYPE1, CRVAL1, CD1_1, etc. will be
axis 1.  Similarly for axis 2.

However, there are situations where this is not always the case.  In
particular, for the TAN projection, the axes specifications refer to
either right ascension or declination.  For wcslab, right ascension
will always be specified by Axis 1 and declination will always be
specified by Axis 2, regardless of which axis in the MWCS
specification is defined for right ascension or declination.
.ih
GRID DRAWING
There are two types of grid lines/tick marks classified as "major" and
"minor".  The major grid lines/tick marks are essentially the lines
that are labeled.  The minor grid lines/tick marks are what appear
between the major marks.  Whether lines are drawn or tick marks is
determined by the boolean parameters major_grid and minor_grid.  If
yes, then lines are drawn; if no, tick marks are drawn.  How the lines
appear is controlled by the parameters major_line and minor_line.

Spacing of minor marks is controlled by the parameters axis1_minor and
axis2_minor.  This is the number of minor marks that will appear between
the major marks along the axis 1 (right ascension) and axis 2
(declination) axis.

Spacing of major marks is a bit more complicated.  The goal of the
task is to present major marks only along "significant values" in the
coordinate system.  For example, if the graph spans several hours of
right ascension,  the interval between major marks will be an
hour and the major marks will appear on whole hours within the graph.
If what the task chooses is unacceptable, the interval and range can
be modified by the parameters axis1_int, axis1_beg, axis1_end for the
axis 1 (right ascension) and axis2_int, axis2_beg, and axis2_end for
axis 2 (declination).
.ih
GRAPH APPEARANCE
This task distinguishes between three types of graphs.  One is
"normal" where the sky system approximates a cartesian system.  Here
lines of constant declination or right ascension usually cross at least
two different sides of the graphs.  Another type of graph is the
"polar" graph.  Here the north or south celestial pole actually is on
the graph.  Lines of constant declination are no longer approximate
lines, but are circles which more than likely don't intersect any
viewport edges.  For this type of graph, hour angles are labeled all
the way around the window.  Declinations are labeled within the graph
next to each circle.  An attempt is made to label as many circles as
possible.  However, if the task's choice is not agreeable, there are
two parameters, axis2_dir and justify, that control how this labeling
is done.  Axis2_dir specifies along which hour angle (in hours) the
labels should be written.  Justify specifies on which side of the
circle the label should appear.

The final type of graph is a cross between the "normal" graph and the
"polar" graph and is termed "near_polar".  Here the pole is not on the
graph, but is close enough to thoroughly confuse the issue.  This is
handled like a polar graph.  There is a parameter, graph_type, which,
if define, will force the task to treat the graph as the type
specified.  This is most useful in forcing a "normal" graph when the
task would use a polar or near_polar paradigm.

.ih
GRAPH LABELING
Due to the various types of graphs that can appear (see above), and
the arbitrary rotation that any WCS can have, the task of labeling
the major grid lines in some coherent and "pretty" manner is quite an
undertaking.

The basic paradigm used is the well-known cartesian system.  Labels
will appear on the left and bottom side of the graph with a side
devoted solely to one of the WCS coordinate axis.  For example, Right
Ascension will only be labeled along the bottom and Declination only
along the left (or vice versa). 

If the defaults chosen by wcslab are unacceptable, there are two
parameters, axis1_side and axis2_side, that can be used to specify which
side (or sides) the labels for axis 1 and axis 2 will appear.
Either a single side or a list of sides can be specified for either
axis.  If a list is specified, labels will appear on each side listed,
even if the same side appears in both of the parameters.  In this way,
labels can be made to appear on the same side of the graph.

.ih
LABEL APPEARANCE
The user has three parameters available to control how labels appear on
the graph.  By default, labels will be shortened to the smallest unit
needed to indicate the value of the labeled line.  For example, if a
graph spans about 30 seconds of DEC, the interval between labels will
be approximately 5 or 10 seconds.  The first label will contain the
full specification, i.e. -22o32m20s.  But the rest of the labels will
only be the seconds, i.e. 30s, 40s, 50s.  However, at the change in
minutes, the full format would be used again, -22o33m00s, but then
again afterwards only seconds will be displayed, i.e. 10s, 20s, etc.
If this shortening of labels is undesirable, it
can be turned off by setting the parameter full_label to yes.  This
forces every label to use the full specification.

Also, because of coordinate rotations, lines don't intersect the edges
of the graph perpendicularly.  To help clarify which line belongs to
which label, labels will be written at an angle equal to that of the
line which is being labeled.  Again, if this is not desired, setting
the parameter rotate to no, labels will always appear "normal", i.e.
the text will not be rotated in any way.

Finally, the parameter label_size is used to adjust the size of the
characters used for the labeling.

.ih 
OUTPUT FORMATS
In the task parameters and the coordinate list files, coordinates are
output in a form suitable for the type of system the coordinates
represent.  For the only supported system at the moment, all right
ascensions are output in HH:MM:SS (hours:minutes:seconds) format and
all declinations are output in DD:MM:SS (degrees:minutes:seconds)
format.  If parameters are changed, such as axis1_int, they should be
input in the same format.  For the coordinate list files, the first
line of the file begins with the comment character, '#', and displays
the format used in the file.

If the WCS is linear, then output will not be formatted in any special
way; i.e. no assumptions are made about units, etc.
.ih
SEE ALSO
imcontour, tvimcontour
.endhelp
