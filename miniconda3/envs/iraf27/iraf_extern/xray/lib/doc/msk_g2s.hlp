#$Header: /home/pros/xray/lib/doc/RCS/msk_g2s.hlp,v 11.0 1997/11/06 16:23:03 prosb Exp $
#$Log: msk_g2s.hlp,v $
#Revision 11.0  1997/11/06 16:23:03  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:31:05  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:35:58  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:19:47  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:01:16  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:21:00  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:10:10  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  00:47:51  prosb
#General Release 1.1
#
#Revision 2.0  91/03/07  00:35:39  pros
#General Release 1.0
#
.help msk_g2s Jan89 PROS_Library
NAME
.in 4
msk_g2s<silrdx> - fill a 2D buffer through a mask
.sp
.in -4
USAGE
.in 4
call msk_g2s<silrdx>(mp, buf, xdim, ydim, ncols, nrows)
.sp
.in -4
PARAMETERS
.in 4
.nf
Input Arguments:
	mp		pointer		mio handle
	xdim		int		x dim of image
	ydim		int		y dim of image
	nrows		int		number of rows in buf
	ncols		int		number of cols in buf

Output Arguments:
	buf		<silrdx>	array to hold data
.fi
.sp
.in -4
DESCRIPTION
.in 4
The subroutine family msk_g2s fills a 2 dimensional buffer with data using
MIO mio_glseg calls.  The mask is used as a filter but is otherwise ignored.
That is, no account is taken of the mask value returned by the mio call.

The array must be large enough to hold ncols*nrows data elements.
The subroutine compresses (adds) the data so that the xdim * ydim image
fits into the nrows * ncols buffer.  If ncols does not divide xdim
exactly, the remaining image pixels are thrown away.  Similarly, if
nrows does not divide ydim exactly, the remaining image lines are thrown
away.

Note that this call requires an mio handle as input.  This handle is
returned by an mio call such as mio_openo.  If one is using the msk
library function msk_open to combine a region mask and an exposure mask,
it is necessary to call mio_openo after msk_open to get this mio handle
(see example below).
.sp
.in -4
EXAMPLES
.in 4
ex. The following example shows how msk_g2s is used in conjunction with
other msk routines such as msk_open and msk_disp.  This code, adapted from
imdisp, displays an image, filtering through a region mask and an exposure
mask.
.in 8
.nf
include <imhdr.h>
include <pmset.h>

include "../../lib/ext.h"

# display image data as real values
procedure imdispr()

char	imname[SZ_FNAME]	# image name
char	regname[SZ_LINE]	# region specifier 
char	expname[SZ_FNAME]	# exposure mask
int	xdim, ydim		# dimensionality of image
int	nrows, ncols		# rows and cols to display
real	thresh			# exposure threshold
pointer	buf			# buffer pointer
pointer	im			# image handle
pointer	pm			# pixel list handle
pointer	mp			# mask handle
pointer	sp			# stack pointer
pointer	title			# pointer to region summary

int	clgeti()		# get int param
real	clgetr()		# get real param
bool	strne()			# string compare
pointer	immap()			# open an image
pointer	msk_open()		# open a region and/or exp. mask
pointer	mio_openo()		# open a pixel mask for MIO

begin
  # title must be set to zero
  title = 0

  # get image name, region descriptor, and output mask name
  call clgstr("image", imname, SZ_FNAME)
  call clgstr("region", regname, SZ_FNAME)
  call clgstr("exp", expname, SZ_FNAME)
  call rootname(imname, expname, EXT_EXPOSURE, SZ_FNAME)
  if( strne(expname, "NONE") ){
	thresh = clgetr("expthresh")
	if( thresh < 0.0 )
	    call error(1, "exposure threshold must be >=0")
  }
  else
	thresh = -1.0
  # get the number of rows and cols the user wants displayed
  ncols = clgeti("ncols")
  nrows = clgeti("nrows")

  # open the image
  im = immap(imname, READ_ONLY, 0)
  # open the region and/or exposure
  pm = msk_open(regname, expname, thresh, im, title)
  # open the final mask for mio I/O
  mp = mio_openo(pm, im)

  # get dimensionality and make sure we have a 2D buffer
  if( IM_NDIM(im) <= 2 ){
	xdim = IM_LEN(im, 1)
	ydim = IM_LEN(im, 2)
  }
  else
	call error(1, "image dimensions must be <= 2")  

  # display the regions
  call msk_disp("", imname, Memc[title])

  # allocate space for the data
  call calloc(buf, ncols * nrows, TY_REAL)
  # accumulate the data
  call msk_g2sr(mp, Memr[buf], xdim, ydim, ncols, nrows)
  # display the data
  call dispbufr(Memr[buf], ncols, nrows)

  # print final cr
  call printf("\n")

  # close MIO file
  call mio_close(mp)
  # close pixel mask
  call pm_close(pm)
  # close image
  call imunmap(im)

  # free up space
  call mfree(buf, TY_REAL)
end
.fi
.sp
.in -12
BUGS
.in 4
The pointer to the title summary must be set to zero in the calling routine.
.in -4
.sp
SEE ALSO
.in4
msk_open (which combines a region mask and an exposure mask into a
single mask), msk_counts (which determines the counts and area within regions), 
msk_disp (which displays regions)


