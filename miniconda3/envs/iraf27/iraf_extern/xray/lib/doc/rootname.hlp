#$Header: /home/pros/xray/lib/doc/RCS/rootname.hlp,v 11.0 1997/11/06 16:23:24 prosb Exp $
#$Log: rootname.hlp,v $
#Revision 11.0  1997/11/06 16:23:24  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:31:32  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:36:38  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:20:33  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:02:02  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:21:37  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:11:23  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  00:48:03  prosb
#General Release 1.1
#
#Revision 2.0  91/03/07  00:36:09  pros
#General Release 1.0
#
.help rootname Jan89 PROS_Library
NAME
.in 4
rootname - create or complete an output file name
.sp
.in -4
USAGE
.in 4
call rootname(root, name, ext, len)
.sp
.in -4
PARAMETERS
.in 4
.nf
Input Arguments:
	root		str		root file name to use if necessary
	ext		str		extension to append if necessary
	len		int		length of output file name

Output Arguments:
	name		str		output file name (and part of input)
.fi
.sp
.in -4
DESCRIPTION
.in 4
The rootname subroutine creates an output file name by combining three
possible inputs: a name, a root name, and an extension.  The rules for
creating an output file name are as follows:

1) If the name argument is the null string, strip the extension from the
root and use the root as the root of the output file name.  Add the ext argument
as an extension to this root. However, if the root is the null string,
return the null string.  Note that "[...]" extensions are also stripped from
the root, in case it is an image file.

2) If the name argument is not the null string, see if it is an abbreviation
of the word "NONE" (i.e., "n", "N", "no", "NO", etc.).  If so, return the
string "NONE" as the output name.

3) If the name argument is not null and not "NONE", return it as the output
file name.  In this case, the extension is determined as follows:

3a) If name contains a complete extension, use that extension.  Do not use
the ext argument.

3b) If name contains the first part of a compound PROS extension, complete
that extension. Do not use the ext argument.  Only compound extensions defined
in ext.h are recognized.

3c) If name does not contain an extension (or a partial one), append the ext
argument as the extension.

These rules simplify the way file names are specified, and
especially the way output files names are specified.  Usually one starts
with an input file name (e.g., an IRAF image).  Rootname can then be called for
all other files with this image as the root and with pre-defined extensions
(usually defined in ext.h) as the third argument.
In this case, if the user inputs a null string for one
of these file specifications, the file name will default to the image name plus
the pre-specified extension.  If the user inputs a name with no extension,
the resulting file is that name plus the default extension. 
If the user inputs a full file name
(with an extension), the resulting file name will be that name.  One can also
input "n" to indicate that no file should be created.  Thus rootname provides
a simple and uniform interface to file name specification.

Rootname is usually used with input files
to automatically add default extensions, so that the user can just input the
root of an input file, or even the null string (if another input file is to be
used as a root). Rootname is usually used in conjunction with clobbername and
finalname to process output file names.
.fi
.sp
.in -4
EXAMPLES
.in 4
ex. The following example shows how rootname, clobbername, and final name
work together, and how rootname can be used with both input and outout files.
.in 8
.nf
include <ext.h>
char	imname[SZ_FNAME]	# input image
char	iname[SZ_FNAME]		# input file
char	oname[SZ_FNAME]		# output file name
char	tname[SZ_FNAME]		# temp output file name
int	fd			# output file handle
bool	do_output		# write output file?
bool	clobber			# clobber output file?
bool	streq()			# string compare

# get the image name
call clgstr("image", imnane, SZ_FNAME)
# make sure the user input an image file name
call rootname("NONE", imname, "", SZ_FNAME)
if( streq("NONE", imname) )
	call error(1, "requires image file as input")

# get the other input file name
call clgstr("input", iname, SZ_FNAME)
# it can be defaulted to the image root
# IN_EXT should be defined in ext.h
call rootname(imname, iname, IN_EXT, SZ_FNAME)
# but there must be a file name
if( streq("NONE", iname) )
	call error(1, "requires foo-type file as input")

# get the output file name
call clgstr("output", oname, SZ_FNAME)
# it can be defaulted to the image root
# OUT_EXT should be defined in ext.h
call rootname(imname, oname, OUT_EXT, SZ_FNAME)
# there need not even be one
if( streq("NONE", iname) )
	do_output = NO
else{
	do_output = YES
	# if we are to create an output, get the clobber flag
	clobber = clgetb("clobber") 
	# make sure we can clobber (abort if "no" and file exists)
	# change output file name to a temp file, if necessary
	# don't rename this until the end to protect the old file
	call clobbername(oname, tname, clobber, SZ_FNAME)
} 
# create the output file (temp file)
fd = open(tname, NEW_FILE, BINARY_FILE)
...
# finally, delete the old output and rename temp to output
call finalname(tname, oname)
.fi
.sp
.in -12
BUGS
.sp
SEE ALSO
.in 4
clobbername, finalname, extensions(spatial)
