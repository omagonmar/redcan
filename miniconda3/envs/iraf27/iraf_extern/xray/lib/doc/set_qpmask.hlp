#$Header: /home/pros/xray/lib/doc/RCS/set_qpmask.hlp,v 11.0 1997/11/06 16:23:25 prosb Exp $
#$Log: set_qpmask.hlp,v $
#Revision 11.0  1997/11/06 16:23:25  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:31:34  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:36:41  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:20:35  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:02:04  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:21:40  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:11:27  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  00:48:03  prosb
#General Release 1.1
#
#Revision 2.0  91/03/07  00:36:10  pros
#General Release 1.0
#
.help set_qpmask Apr89 PROS_Library
NAME
.in 4
set_qpmask - combine region and exposure into a mask and set up qpoe filtering
.sp
.in -4
USAGE
.in 4
call set_qpmask(qp, io, region, exposure, expthresh, pl, title)
.sp
.in -4
PARAMETERS
.in 4
.nf
Input Arguments:
	qp		pointer		qp handle
	io		pointer		qpio event handle
	region		char array	region descriptor
	exposure	char array	exposure file name
	expthresh	real		exposure threshold

Output Arguments:
	pl		pointer		pl handle
	title		pointer		pointer to plio header string
.fi
.sp
.in -4
DESCRIPTION
.in 4
The function set_qpmask opens a region mask and/or an exposure mask,
and combines the two into a final mask.  It then sets up a qpoe file
to filter events through this mask.

The first input argument is the qp handle, returned by qp_open.
The second input argument is the qpio event handle, returned by qpio_open.
The third input argument
is the region descriptor, which can be the null string.  The fourth
input argument is the exposure mask file name, which can be "NONE"
if no exposure correction is to be done.  The fifth input argument is the
exposure threshold (0 <= thresh <= 100).

The first return argument is the pl handle of this combined mask.
This pl handle can be used like any other pl handle.  The user must
call pl_close on this handle at the end of the task. The second output
argument is a pointer to the plio header string.

The function first creates a pixel mask from the region descriptor
using the standard rg_plcreate call. If the exposure file name is "NONE",
the function simply returns the pl handle from this call.  Otherwise,
the exposure mask file is combined with the region mask into a final mask.
This is done by storing only those pixels that are both in the region mask
and above the specified threshold of the exposure mask.  The resulting
mask has the same region id's for each region as the original region
mask, but only parts of regions above the exposure threshold are saved.
This final mask is then set to be the mask for a qpoe file using the command:
.nf

	call qpio_seti(io, QPIO_PL, pl)

.fi
The pl handle of this final mask is returned by the routine.
.sp
.in -4
EXAMPLES
.in 4
ex. The following example shows how set_qpmask is used.  Taken from qpdisp,
it displays events, header, and tgr information in a qpoe file.
.in 8
.nf
include <qpset.h>
include <qpioset.h>

include "../../lib/qpoe.h"
include "../../lib/ext.h"
include "../../lib/plhead.h"

define SZ_EXPR 1024
define LEN_EVBUF 1024

procedure qpdisp()

char	poefile[SZ_FNAME]	# name of data file + event list
char	poeroot[SZ_FNAME]	# root data file name
char	region[SZ_LINE]		# region descriptor
char	expname[SZ_FNAME]	# exposure file name
char	table[SZ_FNAME]		# table name
char	temp[SZ_FNAME]		# temp table name
char	evlist[SZ_EXPR]		# event list specification

int	i			# loop counter
int	mval			# mask value returned by qpio_getevent
int	nev			# number of events returned by qpio_getevent
int	total      		# total photons
int	ntgr			# number of tgr records
int	evsize			# qpoe event size: large, med, small

real	thresh			# exposure threshold

pointer	qp			# qpoe handle
pointer io			# event list handle
pointer	pl			# pixel list handle
pointer	qphead			# qpoe header pointer
pointer	qptgr			# qpoe tgr pointer
pointer	evl[LEN_EVBUF]		# event list buffer
pointer	ev			# current event pointer
pointer	title			# region title from rg_pmcreate

bool	doheader		# display header?
bool	doevents		# display events?
bool	dotgr			# display tgr recs?

bool	streq()			# string compare
bool	strne()			# string compare
bool	clgetb()		# get boolean
int	qpio_getevents()	# get qpoe events
real	clgetr()		# get real cl param
pointer	qp_open()		# open a qpoe file
pointer	qpio_open()		# open a qpio event list

begin
	# get parameters
	call clgstr("qpoe", poefile, SZ_FNAME)
	call clgstr("region",region, SZ_FNAME)
	call clgstr("exp", expname, SZ_FNAME)
	call rootname(poefile, expname, EXT_EXPOSURE, SZ_FNAME)
	if( strne(expname, "NONE") ){
	    thresh = clgetr("expthresh")
	    if( thresh < 0.0 )
	        call error(1, "exposure threshold must be >=0")
	}
	else
	    thresh = -1.0
	doevents = clgetb("events")
	doheader = clgetb("header")
	dotgr = clgetb("tgr")

	# separate poefile into a root file and an event list spec
	call qpparse(poefile, poeroot, SZ_PATHNAME, evlist, SZ_EXPR)

	# open the qpoe file
	qp = qp_open(poeroot, READ_ONLY, NULL)

	# get qpoe event size
	call get_evsize(qp, evsize)
	if( evsize ==0 )
	    call error(1, "unknown event structure for qpoe file")

	# read qpoe header
        call get_qphead(qp, qphead)

	# display header, if necessary
	if( doheader )
	    call disp_qphead(qphead)

	# display tgr, if necessary
	if( dotgr ){
	    call get_qptgr(qp, qptgr, ntgr)
	    call disp_qptgr(qptgr, ntgr, QP_INST(qphead))
	}

	# display events, if necessary
	if( doevents ){

	# open the event list
	io = qpio_open(qp, evlist, READ_ONLY)

	# reset the event mask
	call set_qpmask(qp, io, region, expname, thresh, pl, title)

	# display the header
	call msk_disp("qpdisp mask", poefile, Memc[title])

	# print out a nice header
	switch(evsize){
	case SMALL_QPOE:
	    call printf(SMALL_QPEVENT_HEADER)
	case MEDIUM_QPOE:
	    call printf(MEDIUM_QPEVENT_HEADER)
	case LARGE_QPOE:
	    call printf(LARGE_QPEVENT_HEADER)
	case REGION_QPOE:
	    call printf(REGION_QPEVENT_HEADER)
	}

	# get all photons through the region mask	
	total = 0
	while (qpio_getevents (io, evl, mval, LEN_EVBUF, nev) != EOF) {
	    # display this batch of photons
	    do i = 1, nev {
		ev = evl[i]
		# print out photon information
		call disp_qpevent(ev, evsize)
	    }
	    # inc the total
	    total = total + nev
	}
	# print out total number of photons
	call printf("\ntotal:\t%d\n")
	call pargl(total)

	# close the event list and pl
	call pl_close(pl)
	call qpio_close(io)

	}	# if( doevents ) ...

	# close the qpoe file
	call qp_close(qp)

	# and free all space
	call mfree(title, TY_CHAR)
	call mfree(qphead, TY_STRUCT)
	if( dotgr )
	    call mfree(qptgr, TY_STRUCT)
end
.fi
.sp
.in -12
BUGS
.in 4
The pointer to the title summary must be set to zero in the calling routine,
and must be freed at the end.
.in -4
.sp
SEE ALSO
.in4
set_qpmask, msk_pmopen

