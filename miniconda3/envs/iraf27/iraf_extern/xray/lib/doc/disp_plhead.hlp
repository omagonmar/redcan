#$Header: /home/pros/xray/lib/doc/RCS/disp_plhead.hlp,v 11.0 1997/11/06 16:22:35 prosb Exp $
#$Log: disp_plhead.hlp,v $
#Revision 11.0  1997/11/06 16:22:35  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:30:31  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:35:07  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:18:51  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:00:14  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:20:13  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:08:36  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  00:47:35  prosb
#General Release 1.1
#
#Revision 2.0  91/03/07  00:35:04  pros
#General Release 1.0
#
.help disp_plhead Apr89 PROS_Library
NAME
.in 4
disp_plhead - display a PLIO header string
.sp
.in -4
USAGE
.in 4
procedure disp_plhead(s)
.sp
.in -4
PARAMETERS
.in 4
.nf
Input Arguments:
	s		string		plio header string

Output Arguments:
	none
.fi
.sp
.in -4
DESCRIPTION
.in 4
The subroutine disp_plhead displays a string that has been stored, using
pl_savef or pm_savef, as the string header of a plio file.  The information
contained in the plio header is read using pl_loadf or pm_loadf, and then
displayed using disp_plhead.

The input argument is the string that contains the encoded information,
returned by pl_loadf or pm_loadf.
It is usually declared to be of size SZ_PLHEAD (defined in xray/lib/plhead.h).
.sp
.in -4
EXAMPLES
.in 4
ex. The following example shows how disp_plhead is used in conjunction
with enc_plhead.  Adapted from plcreate, this routine
creates, and optionally displays, a mask.
.in 8
.nf
include	<imhdr.h>
include <error.h>
include <plset.h>
include <pmset.h>

include "../../lib/ext.h"
include "../../lib/plhead.h"

# define max dimensions of the mask we create
define MAX_DIMS	2

procedure plcreate()

char	plname[SZ_FNAME]		# name of output PLIO file
char	imname[SZ_PATHNAME]		# name of input reference image file
char	region[SZ_FNAME]		# region descriptor
char	tempname[SZ_FNAME]		# temp mask name
char	s[SZ_PLHEAD]			# plio header string
bool	clobber				# clobber old mask

int	doimage				# flag we have a reference image
int	disp				# display mask
int	ncols				# columns to display
int	nrows				# rows to display
int	axislen[MAX_DIMS+1]		# axis lengths + 1 as a buffer
int	ndims				# number of dims specified by user
int	nchar				# return from ctoi
int	ip				# ctoi index
pointer	im				# reference image pointer
pointer	pl				# pixel list pointer
pointer	title				# region summary

int	clgeti()			# get int param
int	imaccess()			# image file existence
int	ctoi()				# char to int
bool	clgetb()			# get boolean
bool	streq()				# string compare
pointer	rg_plcreate()			# create pixel mask
pointer	rg_pmcreate()			# create pixel mask
pointer	immap()				# open an image

begin
	# init some variables
	title = 0

	# get the parameters
	call clgstr ("region", region, SZ_FNAME)
	call clgstr ("image", imname, SZ_FNAME)
	call clgstr ("mask", plname, SZ_FNAME)
	clobber = clgetb ("clobber")
	disp = clgeti ("display")
	if( disp >1 )
	{
	    ncols = clgeti("ncols")
	    nrows = clgeti("nrows")
	}

	# determine if we have a reference image or dimensions
	if( imaccess(imname, 0) == YES ){
	    doimage = YES
	    # allow mask name to default to image
	    call rootname(imname, plname, EXT_PL, SZ_PATHNAME)
	}
	else{
	    # pick out the dimensions from the string
	    ndims = 1
	    ip = 1
	    while( TRUE ){
		nchar = ctoi(imname, ip, axislen[ndims])
		if( nchar ==0 ) break
		if( ndims > MAX_DIMS )
		    call error(1, "too many pl dimensions specified")
		ndims = ndims + 1
	    }
	    doimage = NO
	}

	# must have a valid plname
	if( streq(plname, "") )
	    call error(1, "requires a mask file name")

	# must have a valid plname
	if( streq(plname, "NONE") )
	    call error(1, "requires a mask file name")

	# add the extension, if necessary
	call addextname(plname, EXT_PL, SZ_FNAME)

	# check for already-existing file
	call clobbername(plname, tempname, clobber, SZ_FNAME)

	# create the mask
	if( doimage == YES ){
	    # open the reference image
	    im = immap(imname, READ_ONLY, 0)
	    # create the PMIO file
	    pl =  rg_pmcreate(region, im, title)
	    # create the mask header
	    call enc_plhead(plname, "region", imname, IM_LEN(im,1), IM_LEN(im,2),
			0.0, title, s, SZ_PLHEAD)
	    # save mask in a file
	    call pm_savef(pl, tempname, s, 0)
	    # close the reference image
	    call imunmap(im)
	    # display as necessary
	    if( disp >0 )
	        call disp_plhead(s)
	    if( disp >1 )
	        call rg_pldisp(pl, ncols, nrows, 0, 0, 0, 0)
	    # close the pixel mask
	    call pm_close(pl)
	}
	else{
	    # create the PLIO file
	    pl =  rg_plcreate(region, axislen, title)
	    # create the mask header
	    call enc_plhead(plname, "region", "", axislen[1], axislen[2],
			0.0, title, s, SZ_PLHEAD)
	    # save mask in a file
	    call pl_savef(pl, tempname, s, 0)
	    # display as necessary
	    if( disp >0 )
	        call disp_plhead(s)
	    if( disp >1 )
	        call rg_pmdisp(pl, ncols)
	    # close the pixel mask
	    call pl_close(pl)
	}

	# rename mask file, if necessary
	call finalname(tempname, plname)

	# free the title
	call mfree(title, TY_CHAR)
end
.fi
.sp
.in -12
BUGS
.in 4
.in -4
.sp
SEE ALSO
.in4
enc_plhead, dec_plhead.
