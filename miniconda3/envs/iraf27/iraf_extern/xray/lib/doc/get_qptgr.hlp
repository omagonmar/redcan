#$Header: /home/pros/xray/lib/doc/RCS/get_qptgr.hlp,v 11.0 1997/11/06 16:22:53 prosb Exp $
#$Log: get_qptgr.hlp,v $
#Revision 11.0  1997/11/06 16:22:53  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:30:54  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:35:42  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:19:31  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:00:58  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:20:45  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:09:40  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  00:47:46  prosb
#General Release 1.1
#
#Revision 2.0  91/03/07  00:35:29  pros
#General Release 1.0
#
.help get_qptgr Jan89 PROS_Library
NAME
.in 4
get_qptgr - read tgr records from a qpoe file
.sp
.in -4
USAGE
.in 4
call get_qptgr(qp, tptr, nrecs)
.sp
.in -4
PARAMETERS
.in 4
.nf
Input Arguments:
	qp		pointer		qpoe handle

Output Arguments:
	tptr		pointer		pointer to tgr records
	nrecs		int		number of tgr records retrieved
.fi
.sp
.in -4
DESCRIPTION
.in 4
The subroutine get_qptgr reads tgr information from a qpoe file.
The input argument is a qpoe handle, returned by qp_open.
The first output argument is a pointer to an array of tgr structs.
The record structure for these structs is defined in xray/lib/qpoe.h.
The routine allocates space for the tgr records, and reads the tgr records
into memory.  The second output argument is the number of tgr
records retrieved. It is the user's responsibility to free the tgr space at
the completion of the task (see below).
.sp
.in -4
EXAMPLES
.in 4
ex. The following example shows how get_qptgr is used in conjunction with
disp_qptgr.  Note that get_qphead (or an equivalent means) is required to
determine the instrument type.
.in 8
.nf
include <qpset.h>
include <qpioset.h>

include "../../lib/qpoe.h"

procedure tgrdisp()

int	ntgr		# number of tgr records
pointer sp		# spp pointer for stack
pointer	qp		# qpoe handle
pointer	qptgr		# qpoe tgr pointer
pointer	qphead		# qpoe header
pointer	qp_open()	# open a qpoe file

begin
	# mark the stack
	call smark(sp)
	# allocate string space
	call salloc(poefile, SZ_FNAME, TY_CHAR)
	# get parameters
	call clgstr("qpoe", Memc[poefile], SZ_FNAME)
	# separate poefile into a root file and an event list spec
	call qpparse(Memc[poefile], Memc[poeroot], SZ_PATHNAME,
			Memc[evlist], SZ_EXPR)
	# open the qpoe file
	qp = qp_open(Memc[poeroot], READ_ONLY, NULL)
	# read the header to get inst type
	call get_qphead(qp, qphead)
	# get tgr records
	call get_qptgr(qp, qptgr, ntgr)
	# display tgr records
	call disp_qptgr(qptgr, ntgr, QP_INST(qphead))
	# close the qpoe file
	call qp_close(qp)
	# and free all space
	call mfree(qptgr, TY_STRUCT)
	call mfree(qphead, TY_STRUCT)
	call sfree(sp)
end
.fi
.sp
.in -12
BUGS
.in 4
It is questionable whether it is a good idea for the routine to allocate
tgr space, since the user must still free the space.
.in -4
.sp
SEE ALSO
.in4
qpoe.h (which defines the struct into which tgr info is read),
get_qphead, disp_qptgr.
