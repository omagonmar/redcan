#$Header: /home/pros/xray/lib/doc/RCS/get_imhead.hlp,v 11.0 1997/11/06 16:22:50 prosb Exp $
#$Log: get_imhead.hlp,v $
#Revision 11.0  1997/11/06 16:22:50  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:30:50  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:35:36  prosb
#General Release 2.3.1
#
#Revision 7.0  93/12/27  18:19:22  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:00:49  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:20:38  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:09:27  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  00:47:43  prosb
#General Release 1.1
#
#Revision 2.0  91/03/07  00:35:24  pros
#General Release 1.0
#
.help get_imhead Jan89 PROS_Library
NAME
.in 4
get_imhead - read X-ray parameters from an image header
.sp
.in -4
USAGE
.in 4
call get_imhead(im, imhead)
.sp
.in -4
PARAMETERS
.in 4
.nf
Input Arguments:
	im		pointer		image handle

Output Arguments:
	imhead		pointer		pointer to image header
.sp
.in -4
DESCRIPTION
.in 4
The function get_imhead reads X-ray header information from a image file, if
such information is available. The input argument is a image handle, returned
by immap. The output argument is a pointer to a struct whose record structure is
defined in xray/lib/qpoe.h.  The routine allocates space for this header struct,
reads the image header information into it.  The information can be changed,
and then written back to the image file using put_imhead.  The header
can be displayed using the disp_imhead routine.  The function returns YES
is an X-ray header is available, and NO if no header is available.
It is the user's responsibility to free the header space at the completion
of the task (see below).
.sp
.in -4
EXAMPLES
.in 4
ex. The following example shows how to get, put, and display the X-ray
header information in an image file.
.in 8
.nf
procedure edithead()

char	imname[SZ_FNAME]	# image name
int	display			# display level
pointer im			# image handle
pointer	imhead			# image header pointer
pointer	immap()			# open a image file
int	clgeti()		# get cl param
int	get_imhead()		# get image header

begin
	call clgstr("image", imname, SZ_FNAME)
	display = clgeti("display")
	# open the image file
	im = immap (imname, READ_ONLY, NULL)
	# read in the X-ray header information
	if( get_imhead(im, imhead) == YES ){
	    ... (manipulate the header) ...
	    # write out the header information
	    call put_imhead(im, imhead)
	    # display, if necessary
	    if( display >0 ){
		call disp_imhead(imhead)
	    }
	}
	# close the file
	call imunmap(im)
end
.fi
.sp
.in -12
BUGS
.in 4
The pointer to the title summary must be set to zero in the calling routine.

It is questionable whether it is a good idea for the routine to allocate
header space, since the user must still free the space.
.in -4
.sp
SEE ALSO
.in4
qpoe.h (which defines the struct into which qpoe header is read),
get_imhead, put_imhead.
