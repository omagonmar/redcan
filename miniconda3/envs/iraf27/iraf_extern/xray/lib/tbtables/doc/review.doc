From:	SCIVAX::BSIMON       "Bernie Simon" 30-OCT-1987 11:16
To:	HANISCH,HODGE
Subj:	Comments on tbtables library

After examining the spp table i/o interface (tbtables), I have come to the
following conclusions:

+ There is a great deal of duplication of code in the subroutines that read
  and write table data. The routines that read and write table rows and
  columns should be rewritten so that they call the routines that read and
  write table elements. The routines that read or write tables columns
  should check if the table is column-ordered and the requested type is
  the same as the column type. If so, the column can be accessed with a
  single seek and a read or write. If not, the table element routines can
  be called. The routines that read or write table rows should always call
  the element routines. The affected routines are tbrgt[bdirt].x, tbrudf.x
  tbrpt[bdirt].x, tbcgt[bdirt].x, and tbcpt[bdirt].x. Consideration should
  be given to using the generic preprocessor when rewriting these tasks.

+ The routine that reads the size information from the table, tbtrsi.x,
  should check TB_TYPE to see if it is a legal table. This can avoid a crash
  if the user tries to read an old format table with a task using the new
  interface.

+ The routines that modify a table's dimensions, tbxsiz.x and tbysiz.x,
  do so by creating a new table and then renaming it to the old name. The
  new table is created in the current directory. This can cause a crash
  if the user is in a directory to which he does not have write access and
  is writing to a table in a directory to which he does have write access.
  These routines should be modified so that the new file is located in the
  same directory as the old file. The directory name of the old file can
  be extracted from the file name with the routine fnldir.x.

+ The routines that convert the print format string, tbbftp.x and tbbptf.x,
  can be simplified by a programming trick. Copies of the new versions of
  these routines are appended to this memo.  [deleted]

+ Because the spp table i/o interface violates the Fortran 77 standard,
  it may not be portable to all machines. The Fortran 77 standard says that
  the actual arguments in a subroutine call must agree with the dummy
  arguments in order, number, and type. Any calling sequence where the type
  of an argument differs from the type of the corresponding dummy argument
  in the called routine violates the Fortran 77 standard. This occurs in
  several places in the interface, most notably in calls to read.x, write.x,
  and tbbeqd.x. The imio interface very carefully does not violate the standard
  in this way. As a practical matter, violating the standard in this way
  will not cause problems on most computers. Problems should only occur if
  the computer's Fortran  has different calling mechanisms for different data
  types or has different alignment requirements for different data types.
  Neither is usually the case for the types used in spp. The problem can
  fixed, but at the cost of a significant increase in the complexity in
  the code.
