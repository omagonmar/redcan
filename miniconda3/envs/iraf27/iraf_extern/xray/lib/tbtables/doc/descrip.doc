     This note describes some specific characteristics and limitations
of SDAS tables.

1.  Five data types are supported:

     single-precision real
     double-precision real
     integer (four bytes)
     Boolean (implemented as integer)
     text (character strings) in multiples of four characters up to
         160 characters

Type conversion is done implicitly if the data type of the column differs
from that of the buffer.  Boolean true and false correspond to one and zero
respectively.

2.  Header parameters:

     The same five data types are supported for header (user) parameters
as for table data, but text strings are limited to 70 characters.  Type
conversion is done for numeric and Boolean parameters, but text parameters
may only be gotten as text.  The I/O routines for user parameters get and
put single parameters, not arrays.  A user program may construct array
elements by appending numbers to a root portion of a keyword, and the array
elements may be gotten or put one at a time.

     The table must exist in order to get or put header parameters.

3.  Undefined elements are flagged by using special values.  Most of these
values are different from those used by the MIDAS table routines.  There is
at present no undefined value for a Boolean element (but this may change);
the default value is false (or no).  An empty character string is regarded
as undefined.  Trailing blanks are truncated by the Fortran-callable routines
(ut...) but not by the SPP-callable (tb...) routines.

4.  The format for printing table values supports the more common Fortran
formats with a few differences and some additional options:

     h:  H:M:S.d
     m:  H:M.d (or M:S.d)
    i-:  left justified (but SPP uses d instead of i)
    i0:  fill the field with zeros on the left; Fortran also allows filling
         a portion of the field (e.g. I4.2)
     o:  octal
     x:  hexadecimal
     b:  "yes" or "no" instead of "T" or "F"

5.  The user parameters and column descriptors are stored in the table
together with the data, so if more parameters are written or more columns
defined than there is space in the table, the table will be rewritten to
allocate more room.  If the table is large, this can be a problem either
due to the time involved or because of disk space limitations.  When a new
table is created it is possible to specify the amount of space to be
allocated for user parameters and for column descriptors.

     A table may be row-ordered (which is the default) or column-ordered.
If the table is row-ordered then rows may be written at the end of the table
without ever specifying the maximum number of rows.  Adding new columns after
creating the table, however, requires rewriting the table unless space was
allocated for new columns.

     There is no intrinsic limit on the number of columns or rows.

6.  MIDAS tables have a hidden column for flagging rows as selected or not.
The use of this column requires writing to the table in-place, so something
different will be done for SDAS tables.  The details have not been decided upon
but will probably involve giving the user a choice between writing to a select
column in the table itself or writing to a separate one-column table.
