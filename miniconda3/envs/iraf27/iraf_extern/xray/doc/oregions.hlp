.help regions Jul89 xray
.ih
NAME
regions -- description of spatial region filtering

.ih
USAGE
This document contains a description of the user interface for spatial
region filtering for IRAF/PROS analysis.

.ih
REGION MASKS
Spatial  filtering under  the  IRAF/PROS is accomplished   by means of
\fBregion masks\fR.  A region mask is an IRAF  PLIO mask in which each
mask value corresponds either to a single  geometric  shape, or to two
or more geometric shapes  combined according to  the rules  of boolean
algebra.   A region mask  can be created and saved  on disk using  the
\fBplcreate\fR task, or can  be created as  a temporary in-memory mask
by an individual task, for use only during execution of that task.

In virtually all  IRAF/PROS analysis tasks that work  on image data, a
parameter  called "image" (or   something  similar) is paired  with  a
parameter   called  "region"  (or  something  similar).    The  region
parameter is a string-valued parameter specifying a region mask.  This
can consist of either: an \fBASCII region descriptor\fR that describes
how geometric shapes will be combined to  make a temporary (in-memory)
region mask; or an existing region mask file.  Both types of input are
used identically to filter data using  standard  IRAF PLIO routines to
return only those photons that are  contained in non-zero parts of the
mask.  (Note that if an existing  region mask file  is input, the file
specification should  include the ".pl"  extension,  to avoid possible
confusion with region  include  files of the same  root name.)  To use
the  full field (no  region filtering), the null  string,  "", or  the
string "none" (or any abbreviation such as "n" or "no") can be input.

.ih
REGION EXPRESSIONS
An    ASCII region  descriptor  consists   of  one or  more  \fBregion
expressions\fR, hereafter called \fBregions\fR, separated by new-lines
or semi-colons. (Of course, new-lines can only be used when the region
descriptor is stored  in  a file -  see below.   Regions  are normally
separated by semi-colons when a region descriptor is  input as an IRAF
parameter.)  Each    region consists  of   one  or   more \fBgeometric
shapes\fR combined using standard boolean operation.  Several types of
shapes  are  supported,   including  circles, boxes,   rotated  boxes,
ellipses, annuli,      single    points,  pie slices,  and   arbitrary
straight-line polygons.

Each  region has a  unique  mask  value in the  PLIO  mask. PLIO masks
usually allow  <= 32767 mask  values, allowing a  very large number of
separately valued regions in a single mask.

When a region mask is  created (either in  memory in an analysis task,
or as a disk file using plcreate), the  PLIO  mask values begin with 1
and increase with each successive region. If a pixel is covered by two
different regions, it is given the mask  value of the "higher" region,
that is, successive regions overwrite  previous regions in  the  mask.
In  this way, an   individual pixel is  covered  by one  and  only one
region.  This means that one must sometimes be careful about the order
in which regions are defined.  If region  N  is fully contained within
region M,  then N  should  be defined   after M, or   else it will  be
"covered up" by the latter.
.tp 18

.ih
GEOMETRIC SHAPES
Several   geometric shapes are  used to   describe  regions. The valid
shapes are:
.nf

shape:		arguments:

ANNULUS		xcenter ycenter inner_radius outer_radius
BOX		xcenter ycenter xwidth yheight (optional angle)
CIRCLE		xcenter ycenter radius
ELLIPSE		xcenter ycenter xwidth yheight angle
FIELD		none
PIE		xcenter ycenter angle1 angle2
POINT		x1 y1 x2 y2 ... xn yn
POLYGON		x1 y1 x2 y2 ... xn yn
ROTBOX		xcenter ycenter xwidth yheight angle

.fi
All  arguments   are real values;  integer  values   are automatically
converted  to real where  necessary.   All angles  are in degrees  and
specify angles that run counter-clockwise from the positive y-axis.


Shapes can be specified using "command" syntax:
.nf

		<shape> arg1 arg2 ...

or using "routine" syntax:

		<shape>(arg1, arg2, ...)

.fi
or by any combination of the these. (Of course, parentheses must balance and
there cannot be more commas than necessary.) The shape keywords are case
insensitive.  Furthermore, all shapes can be specified by their unique
abbreviation.  For example, one can specify three circular regions as:
.nf

	"CIRCLE 512 512 50; CIR(128 128, 10); c(650,650,20)"

.fi
(Quotes are required when a region descriptor is placed on an IRAF command
line.  They are not required when a region descriptor is input in response
to an IRAF parameter query.)

The  \fIannulus\fR    shape  specifies  annuli, centered  at  xcenter,
ycenter, with inner and outer radii (r1, r2). For example,
.nf

		ANNULUS 25 25 5 10

.fi
specifies an annulus centered at 25.0 25.0 with an inner radius of 5.0 and
an outer radius of 10. Assuming (as will be done for all examples in this
document, unless otherwise noted) this shape is saved in a mask of size 40x40,
it can be displayed using the task \fBpllist\fR:
.tp 50
.nf

mask file:	foo.pl
region_A:	ANNULUS(25.00,25.00,5.00,10.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ....................111111111...........
  33: ...................11111111111..........
  32: .................111111111111111........
  31: .................111111111111111........
  30: ................11111111111111111.......
  29: ...............1111111.....1111111......
  28: ...............111111.......111111......
  27: ...............11111.........11111......
  26: ...............11111.........11111......
  25: ...............11111.........11111......
  24: ...............11111.........11111......
  23: ...............11111.........11111......
  22: ...............111111.......111111......
  21: ...............1111111.....1111111......
  20: ................11111111111111111.......
  19: .................111111111111111........
  18: .................111111111111111........
  17: ...................11111111111..........
  16: ....................111111111...........
  15: ........................................
  14: ........................................
  13: ........................................
  12: ........................................
  11: ........................................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
The \fIbox\fR shape specifies an orthogonally oriented box,
centered at xcenter, ycenter, of size xwidth, yheight. It requires four
arguments and accepts an optional fifth argument to specify a rotation angle.
When the rotation angle is specified (in degrees), the box is rotated by
an angle that runs counter-clockwise from the positive y-axis.

The \fIrotbox\fR shape specifies a rotated box, centered at
xcenter, ycenter, of size xwidth, yheight. The box is rotated by an angle
specified in degrees that runs counter-clockwise from the positive y-axis.
Rotbox requires five arguments.  Rotbox is identical to box when the latter
is called with 5 arguments.  It is provided for backwards compatibility
with ximage, which has a rotbox cursor as well as a box cursor.

The \fIcircle\fR shape specifies a circle, centered at xcenter,
ycenter, of radius r.  It requires three arguments.

The \fIellipse\fR shape specifies an ellipse, centered at
xcenter, ycenter, with x-axis width a and the y-axis length b defined such
that:
.nf

		x**2/a**2 + y**2/b**2 = 1

.fi
Note that a can be less than, equal to, or greater than b. The ellipse
is rotated the specified number of degrees.  The rotation is done according
to astronomical convention, counter-clockwise from the positive y-axis.
An ellipse defined by:
.nf

		ELLIPSE 20 20 5 10 45

will look like this:
.fi
.tp 50
.nf

mask file:	foo.pl
region_A:	ELLIPSE(20.00,20.00,5.00,10.00,45.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ........................................
  28: ........................................
  27: ............111111......................
  26: ............11111111....................
  25: ............111111111...................
  24: ............11111111111.................
  23: ............111111111111................
  22: ............111111111111................
  21: .............111111111111...............
  20: .............1111111111111..............
  19: ..............111111111111..............
  18: ...............111111111111.............
  17: ...............111111111111.............
  16: ................11111111111.............
  15: ..................111111111.............
  14: ...................11111111.............
  13: .....................111111.............
  12: ........................................
  11: ........................................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
The \fIfield\fR shape specifies the entire field as a
region.  It is not usually specified explicitly, but is used implicitly in the
case where no regions are specified, that is, in cases where either a null
string or some abbreviation of the string "none" is input.
\fIField\fR takes no arguments.

The \fIpie\fR shape specifies an angular wedge of the entire field,
centered at xcenter, ycenter.  The wedge runs between the two specified angles.
The angles are given in degrees, running counter-clockwise from the positive
y-axis. For example,
.nf

		PIE 20 20 90 180

.fi
defines a region from 90 degrees to 180 degrees, i.e., quadrant 3 of the
Cartesian plane. The display of such a region looks like this:
.tp 50
.nf

mask file:	foo.pl
region_A:	PIE(20.00,20.00,90.00,180.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ........................................
  28: ........................................
  27: ........................................
  26: ........................................
  25: ........................................
  24: ........................................
  23: ........................................
  22: ........................................
  21: ........................................
  20: 11111111111111111111....................
  19: 11111111111111111111....................
  18: 11111111111111111111....................
  17: 11111111111111111111....................
  16: 11111111111111111111....................
  15: 11111111111111111111....................
  14: 11111111111111111111....................
  13: 11111111111111111111....................
  12: 11111111111111111111....................
  11: 11111111111111111111....................
  10: 11111111111111111111....................
   9: 11111111111111111111....................
   8: 11111111111111111111....................
   7: 11111111111111111111....................
   6: 11111111111111111111....................
   5: 11111111111111111111....................
   4: 11111111111111111111....................
   3: 11111111111111111111....................
   2: 11111111111111111111....................
   1: 11111111111111111111....................

.fi
The pie slice specified is always a counter-clockwise sweep between
the angles, starting at the first angle and ending at the second.  Thus:
.nf

		PIE 10 15 30 60

.fi
describes a 30 degree sweep from 11 o'clock to 10 o'clock, while:
.nf

		PIE 10 15 60 30

.fi
describes a 330 degree counter-clockwise sweep from 10 o'clock to 11 o'clock
passing through 12 o'clock (0 degrees). Note in both of these examples that
the center of the slice can be anywhere on the plane.  The second mask looks
like this:
.tp 50
.nf

mask file:	foo.pl
region_A:	PIE(10.00,15.00,60.00,30.00)

  40: 1111111111111111111111111111111111111111
  39: 1111111111111111111111111111111111111111
  38: 1111111111111111111111111111111111111111
  37: 1111111111111111111111111111111111111111
  36: 1111111111111111111111111111111111111111
  35: 1111111111111111111111111111111111111111
  34: 1111111111111111111111111111111111111111
  33: 1111111111111111111111111111111111111111
  32: 1111111111111111111111111111111111111111
  31: 1111111111111111111111111111111111111111
  30: .111111111111111111111111111111111111111
  29: .111111111111111111111111111111111111111
  28: ..11111111111111111111111111111111111111
  27: ...1111111111111111111111111111111111111
  26: ...1111111111111111111111111111111111111
  25: ....111111111111111111111111111111111111
  24: ....111111111111111111111111111111111111
  23: .....11111111111111111111111111111111111
  22: .....11111111111111111111111111111111111
  21: ......1111111111111111111111111111111111
  20: 1......111111111111111111111111111111111
  19: 111....111111111111111111111111111111111
  18: 1111....11111111111111111111111111111111
  17: 111111..11111111111111111111111111111111
  16: 11111111.1111111111111111111111111111111
  15: 1111111111111111111111111111111111111111
  14: 1111111111111111111111111111111111111111
  13: 1111111111111111111111111111111111111111
  12: 1111111111111111111111111111111111111111
  11: 1111111111111111111111111111111111111111
  10: 1111111111111111111111111111111111111111
   9: 1111111111111111111111111111111111111111
   8: 1111111111111111111111111111111111111111
   7: 1111111111111111111111111111111111111111
   6: 1111111111111111111111111111111111111111
   5: 1111111111111111111111111111111111111111
   4: 1111111111111111111111111111111111111111
   3: 1111111111111111111111111111111111111111
   2: 1111111111111111111111111111111111111111
   1: 1111111111111111111111111111111111111111

.fi
The pie slice is usually combined with other shapes, such as circles
and annuli, using boolean operations (see below).

The \fIpoint\fR shape allows single pixels to be included or
excluded.  Although the (x,y) values are real numbers, they are truncated
to integer and the corresponding pixel is included or excluded, as specified.

Several points can be put in one region declaration and are given the
same region mask values.  For example,
.nf

		POINT (5,6) (10,11) (20,20) (35,30)

.fi
will give the same region mask value to all four points, as shown below:
.tp 50
.nf

mask file:	foo.pl
region_A:	POINT(5.00,6.00,10.00,11.00,20.00,20.00,35.00,40.00)

  40: ..................................1.....
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ........................................
  28: ........................................
  27: ........................................
  26: ........................................
  25: ........................................
  24: ........................................
  23: ........................................
  22: ........................................
  21: ........................................
  20: ...................1....................
  19: ........................................
  18: ........................................
  17: ........................................
  16: ........................................
  15: ........................................
  14: ........................................
  13: ........................................
  12: ........................................
  11: .........1..............................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ....1...................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
Note that parenthesis can be put around the points for clarity.  Balanced
parentheses can be used wherever convenient.

The \fIpolygon\fR shape specifies a polygon with vertices
(x1, y1) ... (xn, yn). The polygon is closed automatically: one should
not specify the last vertex to be the same as the first.  Any number of
vertices are allowed.  For example, the following polygon defines a
right triangle as shown below:
.nf

		POLY (10,10) (10,30) (30,30)
.fi
.tp 50
.nf

mask file:	foo.pl
region_A:	POLYGON(10.00,10.00,10.00,30.00,30.00,30.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ..........11111111111111111111..........
  29: ..........1111111111111111111...........
  28: ..........111111111111111111............
  27: ..........11111111111111111.............
  26: ..........1111111111111111..............
  25: ..........111111111111111...............
  24: ..........11111111111111................
  23: ..........1111111111111.................
  22: ..........111111111111..................
  21: ..........11111111111...................
  20: ..........1111111111....................
  19: ..........111111111.....................
  18: ..........11111111......................
  17: ..........1111111.......................
  16: ..........111111........................
  15: ..........11111.........................
  14: ..........1111..........................
  13: ..........111...........................
  12: ..........11............................
  11: ..........1.............................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
Note that polygons can get twisted upon themselves if edge lines
cross.  Thus:
.nf

		POLY (10,10) (20,20) (20,10) (10,20)

.fi
will produce an area which is two triangles, like butterfly wings, as shown
below:
.tp 50
.nf

mask file:	foo.pl
region_A:	POLYGON(10.00,10.00,20.00,20.00,20.00,10.00,10.00,
		20.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ........................................
  28: ........................................
  27: ........................................
  26: ........................................
  25: ........................................
  24: ........................................
  23: ........................................
  22: ........................................
  21: ........................................
  20: ........................................
  19: ..........1........1....................
  18: ..........11......11....................
  17: ..........111....111....................
  16: ..........1111..1111....................
  15: ..........1111111111....................
  14: ..........1111..1111....................
  13: ..........111....111....................
  12: ..........11......11....................
  11: ..........1........1....................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi

Several regions can be combined in the same mask. Each will have a
different mask value.  For example, consider the following set of regions:
.nf

		ANNULUS 25 25 5 10
		ELLIPSE 20 20 5 10 315
		BOX 15 15 5 10

.fi
The resulting mask will look as follows:
.tp 50
.nf

mask file:	foo.pl
region_A:	ANNULUS(25.00,25.00,5.00,10.00)
region_B:	ELLIPSE(20.00,20.00,5.00,10.00,315.00)
region_C:	BOX(15.00,15.00,5.00,10.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ....................111111111...........
  33: ...................11111111111..........
  32: .................111111111111111........
  31: .................111111111111111........
  30: ................11111111111111111.......
  29: ...............1111111.....1111111......
  28: ...............111111.......111111......
  27: ...............11111.222222..11111......
  26: ...............111122222222..11111......
  25: ...............111222222222..11111......
  24: ...............122222222222..11111......
  23: ...............222222222222..11111......
  22: ...............222222222222.111111......
  21: ..............222222222222.1111111......
  20: ............333332222222221111111.......
  19: ............33333222222221111111........
  18: ............33333222222211111111........
  17: ............333332222222111111..........
  16: ............33333222222111111...........
  15: ............333332222...................
  14: ............33333222....................
  13: ............333332......................
  12: ............33333.......................
  11: ............33333.......................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................
.fi

.ih
REGION ACCELERATORS
Two types of \fBaccelerators\fR are provided as natural extensions to
the way shapes are described, in order to simplify region specification.
These are: the \fIn=<int>\fR syntax, valid for annulus and pie; and
the ability to describe several related regions in one expression, valid for
annulus and pie.  In both cases, one expression is used to define
several different regions, that is, to define shapes with different mask
values in the region mask.

Several annuli at the same center can be specified in one region
expression by specifying more than two radii.  If \fIN\fR radii are
specified, then \fIN\fR-1 annuli result, with the outer radius of each
preceding radii being the same size as the inner radius of the succeeding
annulus. Each annulus is considered a separate region, and is given a
separate mask value. For example,
.nf

		ANNULUS 20 20 0 2 5 10 15 20

.fi
specifies five different annuli centered at 20 20, and is equivalent to:
.nf

		ANNULUS 20.0 20.0  0  2
		ANNULUS	20.0 20.0  2  5
		ANNULUS 20.0 20.0  5 10
		ANNULUS 20.0 20.0 10 15
		ANNULUS 20.0 20.0 15 20

.fi
The mask is shown below:
.tp 50
.nf

mask file:	foo.pl
region_A:	ANNULUS(20.00,20.00,0.00,2.00,5.00,10.00,15.00,20.00)

  40: ........................................
  39: .............5555555555555..............
  38: ...........55555555555555555............
  37: .........555555555555555555555..........
  36: ........55555555555555555555555.........
  35: ......555555555555555555555555555.......
  34: .....55555555544444444444555555555......
  33: ....5555555544444444444444455555555.....
  32: ....5555555444444444444444445555555.....
  31: ...555555444444444444444444444555555....
  30: ..55555544444444444444444444444555555...
  29: ..55555544444443333333334444444555555...
  28: .5555554444444333333333334444444555555..
  27: .5555544444433333333333333344444455555..
  26: 555555444444333333333333333444444555555.
  25: 555554444443333333333333333344444455555.
  24: 555554444433333332222233333334444455555.
  23: 555554444433333322222223333334444455555.
  22: 555554444433333222222222333334444455555.
  21: 555554444433333222111222333334444455555.
  20: 555554444433333222111222333334444455555.
  19: 555554444433333222111222333334444455555.
  18: 555554444433333222222222333334444455555.
  17: 555554444433333322222223333334444455555.
  16: 555554444433333332222233333334444455555.
  15: 555554444443333333333333333344444455555.
  14: 555555444444333333333333333444444555555.
  13: .5555544444433333333333333344444455555..
  12: .5555554444444333333333334444444555555..
  11: ..55555544444443333333334444444555555...
  10: ..55555544444444444444444444444555555...
   9: ...555555444444444444444444444555555....
   8: ....5555555444444444444444445555555.....
   7: ....5555555544444444444444455555555.....
   6: .....55555555544444444444555555555......
   5: ......555555555555555555555555555.......
   4: ........55555555555555555555555.........
   3: .........555555555555555555555..........
   2: ...........55555555555555555............
   1: .............5555555555555..............

.fi
The annulus type also  accepts the \fIn=<int>\fR syntax  in specifying
radii.     If  \fIn=<int>\fR  is  specified,   the   previous  annulus
(determined  by the previous   two   radii  \fIrn\fR and \fIrm\fR)  is
divided into \fIint\fR radii such that the lower bound of the first is
\fIrn\fR   and the   upper bound of   the  last    is  \fIrm\fR.  This
\fIn=<int>\fR syntax can occur at any place in an ANNULUS description.
For example,
.nf

		ANNULUS 20 20 0 2 5 20 n=3

.fi
is equivalent to the last two examples given above. Note that the \fIn=<int>\fR
syntax allows any single alphabetic character before the "=", i.e, i=3, z=3,
etc. are all equivalent.

Specifying several angles in one pie slice expression is equivalent to
specifying several separate slices with the same  center.  As with the
annulus, if \fIN\fR  angles  are  specified,  then  \fIN\fR-1   slices
result, with the outer angle of each preceding slice being the same as
the inner angle  of the succeeding  slice. Each slice is  considered a
separate region, and is given a separate mask value. For example,
.nf

	PIE 12 12 315 45 115 270

.fi
specifies three regions as shown below:
.tp 50
.nf

mask file:	foo.pl
region_A:	PIE(12.00,12.00,315.00,45.00,115.00,220.00)

  40: 1111111111111111111111111111111111111111
  39: 111111111111111111111111111111111111111.
  38: 11111111111111111111111111111111111111..
  37: 1111111111111111111111111111111111111...
  36: 111111111111111111111111111111111111....
  35: 11111111111111111111111111111111111.....
  34: 1111111111111111111111111111111111......
  33: 111111111111111111111111111111111.......
  32: 11111111111111111111111111111111........
  31: 1111111111111111111111111111111.........
  30: 111111111111111111111111111111..........
  29: 11111111111111111111111111111...........
  28: 1111111111111111111111111111............
  27: 111111111111111111111111111.............
  26: 11111111111111111111111111..............
  25: 1111111111111111111111111...............
  24: 111111111111111111111111................
  23: 21111111111111111111111.................
  22: 2211111111111111111111..................
  21: 222111111111111111111...................
  20: 22221111111111111111....................
  19: 2222211111111111111.....................
  18: 222222111111111111......................
  17: 22222221111111111.......................
  16: 2222222211111111........................
  15: 222222222111111.........................
  14: 22222222221111..........................
  13: 2222222222211...........................
  12: 222222222222............................
  11: 222222222333............................
  10: 2222222333333...........................
   9: 22222333333333..........................
   8: 222333333333333.........................
   7: 2333333333333333........................
   6: 33333333333333333.......................
   5: 33333333333333333.......................
   4: 333333333333333333......................
   3: 3333333333333333333.....................
   2: 33333333333333333333....................
   1: 333333333333333333333...................

.fi
The  pie type  also  accepts the  \fIn=<int>\fR  syntax in  specifying
angles.  If \fIn=<int>\fR is specified, the previous slice (determined
by the  previous two angles \fIan\fR   and  \fIam\fR) is divided  into
\fIint\fR angles  such that the  lower  bound of the first is \fIan\fR
and  the upper bound of  the   last  is \fIam\fR.  This  \fIn=<int>\fR
syntax can occur at any place in a pie description. For example,
.nf

	PIE 12 12 275 310 50 a=5 85 90

is equivalent to

	PIE 12 12 275 310 330 350 10 30 50 85 90

.fi
In this example, eight separate regions are defined as shown:
.tp 50
.nf

mask file:	foo.pl
region_A:	PIE(12.00,12.00,275.00,310.00,50.00,a=5.00,85.00,
		135.00)

  40: 5555555444444444333333333333222222222222
  39: 5555555444444444333333333332222222222222
  38: 5555555444444444333333333332222222222222
  37: 5555555444444444333333333322222222222222
  36: 5555555444444444333333333222222222222222
  35: 5555555444444444333333333222222222222221
  34: 5555555544444443333333332222222222222211
  33: 5555555544444443333333332222222222222111
  32: 5555555544444443333333322222222222211111
  31: 6555555544444443333333222222222222111111
  30: 6555555544444443333333222222222221111111
  29: 6655555554444433333332222222222211111111
  28: 6655555554444433333332222222222111111111
  27: 6665555554444433333322222222211111111111
  26: 6665555554444433333322222222111111111111
  25: 6666555554444433333222222221111111111111
  24: 6666655554444433332222222211111111111111
  23: 6666655555444333332222222111111111111111
  22: 6666665555444333322222211111111111111111
  21: 7666665555444333322222111111111111111111
  20: 7766666555444333222221111111111111111111
  19: 7776666555444333222211111111111111111111
  18: 7777666655444332222111111111111111111111
  17: 7777776665543322211111111111111111111111
  16: 7777777665543322111111111111111111111111
  15: 7777777766543221111111111111111111111111
  14: 7777777776543211111111111111111111......
  13: 77777777776421111111111.................
  12: 888888888888............................
  11: 88888888888.............................
  10: 8888888888..............................
   9: 888888888...............................
   8: 88888888................................
   7: 8888888.................................
   6: 888888..................................
   5: 88888...................................
   4: 8888....................................
   3: 888.....................................
   2: 88......................................
   1: 8.......................................

.fi
Finally,  note that specifying multiple  pixels in the  point shape is
\fInot\fR an accelerator, because the points are  given  the same mask
value.

.ih
BOOLEAN OPERATIONS
When defining a region,  several shapes can be  combined using boolean
operations.  The boolean operators are (in order of precedence):
.nf

	Symbol		Operator		Associativity

	!  		not			right to left
	&  		and			left to right
	^  		exclusive or		left to right
	|  		inclusive or		left to right

.fi
For example,  to  create a mask  consisting  of a large  circle with a
smaller  box   removed,  one  can  use   the   \fIand\fR and \fInot\fR
operators:
.nf

	CIRCLE(11,11,15) & !BOX(11,11,3,6)

.fi
and the resulting mask is:
.tp 50
.nf

mask file:	foo.pl
region_A:	CIRCLE(11.00,11.00,15.00) &
		!BOX(11.00,11.00,3.00,6.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ........................................
  28: ........................................
  27: ........................................
  26: ........................................
  25: .....11111111111........................
  24: ...111111111111111......................
  23: ..11111111111111111.....................
  22: 111111111111111111111...................
  21: 1111111111111111111111..................
  20: 1111111111111111111111..................
  19: 11111111111111111111111.................
  18: 111111111111111111111111................
  17: 111111111111111111111111................
  16: 1111111111111111111111111...............
  15: 1111111111111111111111111...............
  14: 111111111...1111111111111...............
  13: 111111111...1111111111111...............
  12: 111111111...1111111111111...............
  11: 111111111...1111111111111...............
  10: 111111111...1111111111111...............
   9: 111111111...1111111111111...............
   8: 1111111111111111111111111...............
   7: 1111111111111111111111111...............
   6: 1111111111111111111111111...............
   5: 111111111111111111111111................
   4: 111111111111111111111111................
   3: 11111111111111111111111.................
   2: 1111111111111111111111..................
   1: 1111111111111111111111..................

.fi
A three-quarter circle (leaving out Cartesian quadrant 1) can be defined as:
.nf

	CIRCLE(20,20,10) & !PIE(20,20,270,360)

.fi
and looks as follows:
.tp 50
.nf

mask file:	foo.pl
region_A:	CIRCLE(20.00,20.00,10.00) &
		!PIE(20.00,20.00,270.00,0.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ...............11111....................
  28: ..............111111....................
  27: ............11111111....................
  26: ............11111111....................
  25: ...........111111111....................
  24: ..........1111111111....................
  23: ..........1111111111....................
  22: ..........1111111111....................
  21: ..........1111111111....................
  20: ..........1111111111111111111...........
  19: ..........1111111111111111111...........
  18: ..........1111111111111111111...........
  17: ..........1111111111111111111...........
  16: ..........1111111111111111111...........
  15: ...........11111111111111111............
  14: ............111111111111111.............
  13: ............111111111111111.............
  12: ..............11111111111...............
  11: ...............111111111................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
Two non-intersecting ellipses can be made into the same region:
.nf

	ELL(20,20,10,20,90) | ELL(1,1,20,10,0)

.fi
and looks as follows:
.tp 50
.nf

mask file:	foo.pl
region_A:	ELLIPSE(20.00,20.00,10.00,20.00,90.00) |
		ELLIPSE(1.00,1.00,20.00,10.00,0.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ...................1....................
  29: ...........11111111111111111............
  28: ........111111111111111111111111........
  27: .....11111111111111111111111111111......
  26: ....1111111111111111111111111111111.....
  25: ..11111111111111111111111111111111111...
  24: .1111111111111111111111111111111111111..
  23: 111111111111111111111111111111111111111.
  22: 111111111111111111111111111111111111111.
  21: 111111111111111111111111111111111111111.
  20: 111111111111111111111111111111111111111.
  19: 111111111111111111111111111111111111111.
  18: 111111111111111111111111111111111111111.
  17: 111111111111111111111111111111111111111.
  16: .1111111111111111111111111111111111111..
  15: ..11111111111111111111111111111111111...
  14: ...11111111111111111111111111111111.....
  13: .....11111111111111111111111111111......
  12: .......111111111111111111111111.........
  11: 1..........11111111111111111............
  10: 111111111..........1....................
   9: 1111111111111...........................
   8: 111111111111111.........................
   7: 11111111111111111.......................
   6: 111111111111111111......................
   5: 1111111111111111111.....................
   4: 11111111111111111111....................
   3: 11111111111111111111....................
   2: 11111111111111111111....................
   1: 11111111111111111111....................

.fi
Of course, several   boolean operations  can be  combined in a  single
region expression, so that arbitrarily  complex regions  can easily be
created.

Accelerators and boolean  operations can be combined  to  create  more
interesting region masks. Consider the  example shown below,  in which
an 4 annuli, centered at 20, 20, are combined  with 3 pie slices, also
centered at 20, 20.  The result is a mask with 12 regions.
.tp 50
.nf

mask_name:	foo.pl
mask_type:	region
ref_file:	none
xdim:		40
ydim:		40
scale:		none

regions:	ANNULUS(20.00,20.00,0.00,15.00,n=4.00) &
		PIE(20.00,20.00,0.00,360.00,n=3.00)

  34:  . . . . . . . . . 4 4 4 4 4 41212121212 . . . . . . . . . .
  33:  . . . . . . . 4 4 4 4 4 4 4 412121212121212 . . . . . . . .
  32:  . . . . . . 4 4 4 4 4 4 4 4 41212121212121212 . . . . . . .
  31:  . . . . 4 4 4 4 4 4 4 4 3 3 311111212121212121212 . . . . .
  30:  . . . 4 4 4 4 4 4 3 3 3 3 3 31111111111121212121212 . . . .
  29:  . . . 4 4 4 4 4 3 3 3 3 3 3 31111111111111212121212 . . . .
  28:  . . 4 4 4 4 4 3 3 3 3 3 3 3 3111111111111111212121212 . . .
  27:  . 4 4 4 4 4 3 3 3 3 3 3 2 2 210101111111111111212121212 . .
  26:  . 4 4 4 4 3 3 3 3 3 2 2 2 2 210101010111111111112121212 . .
  25:  4 4 4 4 3 3 3 3 3 2 2 2 2 2 21010101010111111111112121212 .
  24:  4 4 4 4 3 3 3 3 2 2 2 2 2 2 21010101010101111111112121212 .
  23:  4 4 4 4 3 3 3 3 2 2 2 2 1 1 1 9 9101010101111111112121212 .
  22:  4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 9 9 91010101011111111121212 .
  21:  4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 9 9 91010101011111111121212 .
  20:  4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 9 9 91010101011111111121212 .
  19:  4 4 4 3 3 3 3 2 2 2 2 1 1 5 5 5 9 91010101011111111121212 .
  18:  4 4 4 3 3 3 3 2 2 2 2 5 5 5 5 5 5 51010101011111111121212 .
  17:  4 4 4 4 3 3 3 3 2 6 6 6 5 5 5 5 5 6 6 6101111111112121212 .
  16:  4 4 4 4 3 3 3 3 6 6 6 6 6 6 6 6 6 6 6 6 61111111112121212 .
  15:  4 4 4 4 3 3 7 7 7 6 6 6 6 6 6 6 6 6 6 6 7 7 7111112121212 .
  14:  . 4 4 4 8 7 7 7 7 7 6 6 6 6 6 6 6 6 6 7 7 7 7 7 8121212 . .
  13:  . 4 8 8 8 8 7 7 7 7 7 7 6 6 6 6 6 7 7 7 7 7 7 8 8 8 812 . .
  12:  . . 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 . . .
  11:  . . . 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 . . . .
  10:  . . . 8 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 . . . .
   9:  . . . . 8 8 8 8 8 8 8 8 7 7 7 7 7 8 8 8 8 8 8 8 8 . . . . .
   8:  . . . . . . 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 . . . . . . .
   7:  . . . . . . . 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 . . . . . . . .
   6:  . . . . . . . . . 8 8 8 8 8 8 8 8 8 8 8 . . . . . . . . . .
from  6 ----------------------------------------------------- to  35
       0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3
       6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
.fi

.ih
EXCLUDE REGIONS
Regions can be  defined as \fBexclude  regions\fR  by  placing the "-"
character before   any of the   shapes  in  a region  expression.  For
example,
.nf

	-c(612,512,50) | ell(512,512,100,200,0)

.fi
defines an exclude region as does,
.nf

	ell(512,512,100,200,0)| -c(612,512,50)

.fi
An exclude region clears all pixels in the region mask covered by
this region.  Exclude regions are processed \fIafter\fR all include regions
are processed, so that excluded regions are guaranteed to be excluded from the
final mask, regardless of the order in which regions are specified.  This
behavior is in contrast to the use of the "& !" combination of operators in
a region expression.  (This combination of operators is used to clear regions
by \fIAND\fRing with the \fINOT\fR of a region.) Using "& !" operators clears
pixels in a given region, but the cleared pixels can be set by
subsequent region expressions.  For example,
.nf

	circle(20,20,12) & !circle(20,20,8)
	circle(20,20,5)

.fi
creates the following shape:
.tp 50
.nf

mask file:	foo.pl
region_A:	CIRCLE(20.00,20.00,12.00) &
		!CIRCLE(20.00,20.00,8.00)
region_B:	CIRCLE(20.00,20.00,5.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ...............111111111................
  30: .............1111111111111..............
  29: ............111111111111111.............
  28: ...........11111111111111111............
  27: ..........111111.......111111...........
  26: .........11111...........11111..........
  25: .........1111.............1111..........
  24: ........11111....22222....11111.........
  23: ........1111....2222222....1111.........
  22: ........1111...222222222...1111.........
  21: ........1111...222222222...1111.........
  20: ........1111...222222222...1111.........
  19: ........1111...222222222...1111.........
  18: ........1111...222222222...1111.........
  17: ........1111....2222222....1111.........
  16: ........11111....22222....11111.........
  15: .........1111.............1111..........
  14: .........11111...........11111..........
  13: ..........111111.......111111...........
  12: ...........11111111111111111............
  11: ............111111111111111.............
  10: .............1111111111111..............
   9: ...............111111111................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
In this mask, the circle of radius 8 is cleared and then a smaller circle is
set inside of it by the next region expression.
.nf

On the other hand, the region described by:

	-circle(20,20,8)
	circle(20,20,12)
	circle(20,20,5)

creates the following mask:
.fi
.tp 50
.nf

mask file:	foo.pl
exclude_A:	-CIRCLE(20.00,20.00,8.00)
region_A:	CIRCLE(20.00,20.00,12.00)
region_B:	CIRCLE(20.00,20.00,5.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ...............111111111................
  30: .............1111111111111..............
  29: ............111111111111111.............
  28: ...........11111111111111111............
  27: ..........111111.......111111...........
  26: .........11111...........11111..........
  25: .........1111.............1111..........
  24: ........11111.............11111.........
  23: ........1111...............1111.........
  22: ........1111...............1111.........
  21: ........1111...............1111.........
  20: ........1111...............1111.........
  19: ........1111...............1111.........
  18: ........1111...............1111.........
  17: ........1111...............1111.........
  16: ........11111.............11111.........
  15: .........1111.............1111..........
  14: .........11111...........11111..........
  13: ..........111111.......111111...........
  12: ...........11111111111111111............
  11: ............111111111111111.............
  10: .............1111111111111..............
   9: ...............111111111................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
In this mask, the circle of radius 8 is excluded from the mask, regardless
of any other region.

.ih
INCLUDE FILES
Region expressions can be stored in files, called \fBinclude\fR files.
Region files usually have a ".reg" extension in their names.  When a region
file name is given as an argument, it is not necessary to include the ".reg"
extension.  The exception to this rule occurs if a region file has the same
name as a valid geometric shape. Its specification must then include the ".reg"
extension to distinguish it from a shape.

Region descriptors can be a mix of regions and region files. Consider
the following region files:
.nf

#
#	ell.reg - a test region file containing an ellipse
#	note that ell is a valid region name (ELLIPSE)
#
ELLIPSE 512 512 100, 200, 0

and

#
#	excir.reg - a region file containing an excluded circle
#
-CIR 612, 512, 50

The following are equivalent:

	ELL.REG; EXCIR

	-CIR(612,512,50); ELL.REG

	EXCIR; ellipse 512 512 100 200 0

Furthermore, several commands can be put into one region file:

#
# test1.reg
#
ELLIPSE 512 512 100, 200, 0
-CIR 612, 512, 50

or a region file can contain other region files:

#
# test2.reg
#
ELLIPSE 512 512 100, 200, 0
EXCIR				# this is another region file

.fi
Note that, in the above examples, the comment character, "#", causes the
following text to be ignored up to the new-line character.

When an include file is specified on the \fIsame line\fR as other
regions, separated by semi-colons, the include file is processed \fIafter\fR
all regions in the line.  For example, using the include file ell.reg above,
the region mask formed by:
.nf

	ell.reg; c 512 512 10

.fi
would result in one region, not two, since the ellipse would be processed
\fIafter\fR the circle and would cover it completely.  This can be overcome by
placing the entire description in a file, with the circle on a separate line
from the include file:
.nf

# foo.reg - a small circle within in an ellipse
ell.reg
c 512 512 10
.fi

.ih
PL MASK FILES
One can also input an already existing mask file as a region
filter.  Creating a mask using \fIplcreate\fR and using it repeatedly
as region input to a task will save the time it takes to create the mask
from the ASCII descriptor.  This practice is generally recommended.

When inputting an already-existing PL mask or an ASCII region
file, the ".pl" or ".reg" extensions can be omitted, although this practice
is not recommended.  If a filename without extension is input, and \fIboth\fR
a PL mask and an ASCII descriptor of the same root exist, the more recently
created of the two will be used.  For example, if one were to create a
PL mask using an ASCII descriptor, and then change the ASCII descriptor,
the latter would be used to make the in-memory mask, if only the root were
specified.

.ih
COORDINATE SYSTEMS -- LOGICAL, PHYSICAL, WORLD
In all of the above examples the units used in region
specifications have been pixels.  A value in pixels is referred, by default,
to the logical coordinate system.  (See the Rosat-PROS Users Guide for a
discussion of logical, physical, and world coordinate systems.)  You may
specify that subsequent values in pixels refer to the physical coordinate
system, with the command PHYSICAL.  And if you have been using physical
coordinates, you can tell the system that you are reverting to logical
pixels with the command LOGICAL.

If a reference image is given it is
also possible to define regions using a celestial coordinate system.
The units assiciated with a region dimension are indicated by the number's
format.

.nf
	10	-- ten pixels
	10'	-- ten minutes of arc
	10"	-- ten seconds of arc
	10d	-- ten degrees
	0.5r	-- point five radians
	10:0	-- ten hours
.fi

These units are interpreted relative to the sky coordinate system.
The default sky system is that of the reference image.  The sky system may
be changed by using one of these commands in a region specification:

.nf
	Equatorial <B|Jequinox>
	Ecliptic  <equinox>
	Galactic
	SuperGalactic
.fi

The  Equatorial command  indicates either the  FK4 or  FK5 coordinate
system.  The FK5 system is used if  a Julian equinox  is provided, FK4
is used if a Besselian equinox is provided.  The Equatorial keyword is
optional.

.nf
	Equatorial B1950	-- Standard FK4 1950
	Equ J2000		-- Standard FK5 2000
	J1990			-- FK5 at equinox 1990
	B2001			-- FK4 at equinox 2001

Examples:

	Circle 10:10:0 20:22:0 3'
.fi

On the default image system define a circle  at ten hours ten minutes,
twenty degrees twenty two minutes with radius three arc minutes.
.nf

	B1950
	-Box 175.54d 20.01156d 10' 10'
	J2000
	Pie 179.57d 22.4d 0 360 n=4 & Annulus 179.57d 22.4d 3' 24' n=5

.fi
At the FK4 1950  coordinates 175.54d  RA,  20.01156d  DEC exclude a 10
minute by 10 minute box.  Then at the FK5  2000 coordinates 179.57d RA
22.4d DEC draw a radial profile regions pattern with 4 quadrants and 5
annuli ranging from  3 minutes to 24  minutes  in diameter.   In  this
example the  images   default coordinate system  is  overridden by the
commands in the regions spec.

.ih
TIME REQUIREMENTS
The time required to make a mask is proportional to the number
of separate regions being created.  It can take a minute or more if
many regions are involved.  For such cases, it is recommended that
\fIplcreate\fR be used to make a binary PL mask from the ASCII region
descriptor, if the mask is going to be input into a task more than
once.

.ih
BUGS
There is a limit to the number of separate regions that can be
created in a single mask.  We are looking into how to raise that
limit.

.ih
SEE ALSO
See the IRAF PLIO documentation for more information about PLIO.

See the COORDS help for a description of how pixels partly in regions
are handled.
.endhelp
