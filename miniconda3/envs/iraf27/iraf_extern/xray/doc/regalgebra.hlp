.help regalgebra Oct92 xray
.ih
NAME
regalgebra -- description of region algebra

.ih
USAGE
This document describes the boolean arithmetic defined for 
ASCII REGION expressions.
.ih
BOOLEAN OPERATIONS
(Note:  While this document describes and illustrates the use of the 
boolean operations on masks, you may be able to shape a desired region
by excluding some areas from it, using the '-' operator.  If so, and 
if your region is complicated, it is better to use the '-' than the 
boolean alternative, "&!".  With "&!", you run some risk of hitting a 
system limit on the size of a buffer.  '-' placed at the beginning of 
a line of a region descriptor file unconditionally excludes from the 
mask all the pixels in the expression following.)

When defining a region,  several shapes can be  combined using boolean
operations.  The boolean operators are (in order of precedence):
.nf

	Symbol		Operator		Associativity

	!  		not			right to left
	&  		and			left to right
	^  		exclusive or		left to right
	|  		inclusive or		left to right

.fi
For example,  to  create a mask  consisting  of a large  circle with a
smaller  box   removed,  one  can  use   the   \fIand\fR and \fInot\fR
operators:
.nf

	CIRCLE(11,11,15) & !BOX(11,11,3,6)

.fi
and the resulting mask is:
.tp 50
.nf

mask file:	foo.pl
region_A:	CIRCLE(11.00,11.00,15.00) &
		!BOX(11.00,11.00,3.00,6.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ........................................
  28: ........................................
  27: ........................................
  26: ........................................
  25: .....11111111111........................
  24: ...111111111111111......................
  23: ..11111111111111111.....................
  22: 111111111111111111111...................
  21: 1111111111111111111111..................
  20: 1111111111111111111111..................
  19: 11111111111111111111111.................
  18: 111111111111111111111111................
  17: 111111111111111111111111................
  16: 1111111111111111111111111...............
  15: 1111111111111111111111111...............
  14: 111111111...1111111111111...............
  13: 111111111...1111111111111...............
  12: 111111111...1111111111111...............
  11: 111111111...1111111111111...............
  10: 111111111...1111111111111...............
   9: 111111111...1111111111111...............
   8: 1111111111111111111111111...............
   7: 1111111111111111111111111...............
   6: 1111111111111111111111111...............
   5: 111111111111111111111111................
   4: 111111111111111111111111................
   3: 11111111111111111111111.................
   2: 1111111111111111111111..................
   1: 1111111111111111111111..................

.fi
A three-quarter circle (leaving out Cartesian quadrant 1) can be defined as:
.nf

	CIRCLE(20,20,10) & !PIE(20,20,270,360)

.fi
and looks as follows:
.tp 50
.nf

mask file:	foo.pl
region_A:	CIRCLE(20.00,20.00,10.00) &
		!PIE(20.00,20.00,270.00,0.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ........................................
  29: ...............11111....................
  28: ..............111111....................
  27: ............11111111....................
  26: ............11111111....................
  25: ...........111111111....................
  24: ..........1111111111....................
  23: ..........1111111111....................
  22: ..........1111111111....................
  21: ..........1111111111....................
  20: ..........1111111111111111111...........
  19: ..........1111111111111111111...........
  18: ..........1111111111111111111...........
  17: ..........1111111111111111111...........
  16: ..........1111111111111111111...........
  15: ...........11111111111111111............
  14: ............111111111111111.............
  13: ............111111111111111.............
  12: ..............11111111111...............
  11: ...............111111111................
  10: ........................................
   9: ........................................
   8: ........................................
   7: ........................................
   6: ........................................
   5: ........................................
   4: ........................................
   3: ........................................
   2: ........................................
   1: ........................................

.fi
Two non-intersecting ellipses can be made into the same region:
.nf

	ELL(20,20,10,20,90) | ELL(1,1,20,10,0)

.fi
and looks as follows:
.tp 50
.nf

mask file:	foo.pl
region_A:	ELLIPSE(20.00,20.00,10.00,20.00,90.00) |
		ELLIPSE(1.00,1.00,20.00,10.00,0.00)

  40: ........................................
  39: ........................................
  38: ........................................
  37: ........................................
  36: ........................................
  35: ........................................
  34: ........................................
  33: ........................................
  32: ........................................
  31: ........................................
  30: ...................1....................
  29: ...........11111111111111111............
  28: ........111111111111111111111111........
  27: .....11111111111111111111111111111......
  26: ....1111111111111111111111111111111.....
  25: ..11111111111111111111111111111111111...
  24: .1111111111111111111111111111111111111..
  23: 111111111111111111111111111111111111111.
  22: 111111111111111111111111111111111111111.
  21: 111111111111111111111111111111111111111.
  20: 111111111111111111111111111111111111111.
  19: 111111111111111111111111111111111111111.
  18: 111111111111111111111111111111111111111.
  17: 111111111111111111111111111111111111111.
  16: .1111111111111111111111111111111111111..
  15: ..11111111111111111111111111111111111...
  14: ...11111111111111111111111111111111.....
  13: .....11111111111111111111111111111......
  12: .......111111111111111111111111.........
  11: 1..........11111111111111111............
  10: 111111111..........1....................
   9: 1111111111111...........................
   8: 111111111111111.........................
   7: 11111111111111111.......................
   6: 111111111111111111......................
   5: 1111111111111111111.....................
   4: 11111111111111111111....................
   3: 11111111111111111111....................
   2: 11111111111111111111....................
   1: 11111111111111111111....................

.fi
You can use several boolean operations in a single region expression, 
to create arbitrarily complex regions.  You can apply the operators in 
any order, using parentheses if necessary to override the natural 
precedences of the operators.

Accelerators and boolean  operations can be combined  to  create  more
interesting region masks. Consider the  example shown below,  in which
an 4 annuli, centered at 20, 20, are combined  with 3 pie slices, also
centered at 20, 20.  The result is a mask with 12 regions.
.tp 50
.nf

mask_name:	foo.pl
mask_type:	region
ref_file:	none
xdim:		40
ydim:		40
scale:		none

regions:	ANNULUS(20.00,20.00,0.00,15.00,n=4.00) &
		PIE(20.00,20.00,0.00,360.00,n=3.00)

  34:  . . . . . . . . . 4 4 4 4 4 41212121212 . . . . . . . . . .
  33:  . . . . . . . 4 4 4 4 4 4 4 412121212121212 . . . . . . . .
  32:  . . . . . . 4 4 4 4 4 4 4 4 41212121212121212 . . . . . . .
  31:  . . . . 4 4 4 4 4 4 4 4 3 3 311111212121212121212 . . . . .
  30:  . . . 4 4 4 4 4 4 3 3 3 3 3 31111111111121212121212 . . . .
  29:  . . . 4 4 4 4 4 3 3 3 3 3 3 31111111111111212121212 . . . .
  28:  . . 4 4 4 4 4 3 3 3 3 3 3 3 3111111111111111212121212 . . .
  27:  . 4 4 4 4 4 3 3 3 3 3 3 2 2 210101111111111111212121212 . .
  26:  . 4 4 4 4 3 3 3 3 3 2 2 2 2 210101010111111111112121212 . .
  25:  4 4 4 4 3 3 3 3 3 2 2 2 2 2 21010101010111111111112121212 .
  24:  4 4 4 4 3 3 3 3 2 2 2 2 2 2 21010101010101111111112121212 .
  23:  4 4 4 4 3 3 3 3 2 2 2 2 1 1 1 9 9101010101111111112121212 .
  22:  4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 9 9 91010101011111111121212 .
  21:  4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 9 9 91010101011111111121212 .
  20:  4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 9 9 91010101011111111121212 .
  19:  4 4 4 3 3 3 3 2 2 2 2 1 1 5 5 5 9 91010101011111111121212 .
  18:  4 4 4 3 3 3 3 2 2 2 2 5 5 5 5 5 5 51010101011111111121212 .
  17:  4 4 4 4 3 3 3 3 2 6 6 6 5 5 5 5 5 6 6 6101111111112121212 .
  16:  4 4 4 4 3 3 3 3 6 6 6 6 6 6 6 6 6 6 6 6 61111111112121212 .
  15:  4 4 4 4 3 3 7 7 7 6 6 6 6 6 6 6 6 6 6 6 7 7 7111112121212 .
  14:  . 4 4 4 8 7 7 7 7 7 6 6 6 6 6 6 6 6 6 7 7 7 7 7 8121212 . .
  13:  . 4 8 8 8 8 7 7 7 7 7 7 6 6 6 6 6 7 7 7 7 7 7 8 8 8 812 . .
  12:  . . 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 . . .
  11:  . . . 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 . . . .
  10:  . . . 8 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 . . . .
   9:  . . . . 8 8 8 8 8 8 8 8 7 7 7 7 7 8 8 8 8 8 8 8 8 . . . . .
   8:  . . . . . . 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 . . . . . . .
   7:  . . . . . . . 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 . . . . . . . .
   6:  . . . . . . . . . 8 8 8 8 8 8 8 8 8 8 8 . . . . . . . . . .
from  6 ----------------------------------------------------- to  35
       0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3
       6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
.fi


.ih
TIME REQUIREMENTS
The time required to make a mask is proportional to the number
of separate regions being created.  It can take a minute or more if
many regions are involved.  For such cases, it is recommended that
\fIplcreate\fR be used to make a binary PL mask from the ASCII region
descriptor, if the mask is going to be input into a task more than
once.

.ih
BUGS
There is a limit to the number of separate regions that can be
created in a single mask.  We are looking into how to raise that
limit.

.ih
SEE ALSO
.nf
See also HELP regions
	 HELP reggeometry
	 HELP regcoords
.fi
See the IRAF PLIO documentation for more information about PLIO.

See the COORDS help for a description of how pixels partly in regions
are handled.
.endhelp
