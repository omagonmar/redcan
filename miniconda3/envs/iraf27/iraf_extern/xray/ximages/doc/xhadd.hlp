#$Header: /home/pros/xray/ximages/doc/RCS/xhadd.hlp,v 11.0 1997/11/06 16:25:57 prosb Exp $
#$Log: xhadd.hlp,v $
#Revision 11.0  1997/11/06 16:25:57  prosb
#General Release 2.5
#
#Revision 9.0  1995/11/16 18:33:29  prosb
#General Release 2.4
#
#Revision 8.0  1994/06/27  14:43:39  prosb
#General Release 2.3.1
#
#Revision 7.1  94/06/08  11:28:08  prosb
#Brought help file up to date.
#
#Revision 7.0  93/12/27  18:23:32  prosb
#General Release 2.3
#
#Revision 6.0  93/05/24  16:05:18  prosb
#General Release 2.2
#
#Revision 5.0  92/10/29  21:24:12  prosb
#General Release 2.1
#
#Revision 4.0  92/04/27  14:16:37  prosb
#General Release 2.0:  April 1992
#
#Revision 3.0  91/08/02  01:16:09  prosb
#General Release 1.1
#
#Revision 2.1  91/07/12  12:20:08  prosb
#xray.ximages   7/12/91
#
#Revision 2.0  91/03/06  23:37:32  pros
#General Release 1.0
#
.help xhadd Jun94 xray.ximages
.ih
NAME
xhadd -- add an "x_hist" history record to a qpoe or image file
.ih
USAGE
xhadd image type task history 
.ih
DESCRIPTION
The task \fIxhadd\fR adds a record of "x_hist" history information to
a qpoe or image file.  The history record is also written to the standard IRAF
history parameter.

History information is stored in the header of qpoe and imh files in parameters
with the names "x_hist<nn>", where <nn> is a number from 1 to 99. (This naming
convention allows all history records to be unique to 8 characters, as is
required by current IRAF and FITS conventions.)  History records are added
automatically by xray tasks that create images or qpoe files, but can also be
added manually using the \fIxhadd\fR task in other cases (such as imcopy or
imcalc).
.ih
PARAMETERS
.ls image = ""	    prompt = image file name

The image or qpoe data file.  The task  tries to access the image as a
qpoe file, and failing that, as an image.  Therefore, the file extension
is only required if an image and a qpoe file exist with the same root.
.le
.ls type = ""	    prompt = special history type, if desired

The type (label) to be attached to the history record.  Any
string is valid, including the null string, but the following
are special, in that \fIxhdisp\fR can selectively display records of these
types: "vignetting", "exposure", "background", "bkgd", "user".  Also, if the
specified type is an abbreviation of one of the above, the type is
expanded automatically.  Thus, for example, "v" will create a vignetting
history record.
.le
.ls task = ""	    prompt = task performing the operation, if desired

The name of the task that caused the historic event.  Typically,
this will be a standard IRAF task such as imcopy or imcalc, which,
unlike xray tasks, do not update x_hist history records automatically.
If the null string is entered, the history record will contain the
string "no task".
.le
.ls history = ""    prompt = history string to add

The history string to be added. Typically, this string describes the
change taking place in the file and is of the form:
.nf

	task: input_file (params and aux. files) -> output_file

.fi
If the null string is entered, the history record will contain the
string "no history".
.le
.ls (display = 1) [int]

The display level.  If display is 0, no history is displayed.  If
display is 1, only history records of the type specified in the \fItype\fR
parameter are displayed.  If display is greater than or equal to 2, all
history records are displayed.
.le
.ih
EXAMPLES
1. Add a "user" history record to an image file - don't display history.
.nf

	cl> xhadd snr_smrot.qp "user" "" "This file was rotated..." 
	 display=0


.fi
.ih
FULL DESCRIPTION

A history record typically contains the name of the task that was
executed to create a change in the file, and a description of the
task's action:
.nf

	task: input_file (params and aux. files) -> output_file

.fi
For example, consider qpcopy, which copies one qpoe file to another
through filters.  This task adds history records such as:
.nf

	xhist02 = 'qpcopy: small.qp[pi=(0:5)] (circle 511 511 50)
			-> foo.qp'

.fi
where, in the given case, only photons within the specified circle and
of the specified pi range are being copied to the new file.

Note, however, that the \fItask\fR parameter need not contain an
actual task name, and the \fIhistory\fR parameter need not describe a
change to the file, since these two values are merely concatenated to
create a history record.  One can therefore write comments into
history records. For example:
.nf

	xhist03 = 'Warning: this file can be hazardous to your health'

.fi
If a null \fItask\fR string is input, the string "(no task)" is put
into the history record.  Similarly, if a null \fIhistory\fR string is
input, the string "(no history)" is put into the history record.

History records can be labelled.  The \fItype\fR argument specifies a
tag that is applied to a history record.  If the label is one of the
recognized "special" labels, a cross reference parameter is created,
if necessary, and updated with the number of that history record. The
currently recognized special labels are: "vignetting", "exposure",
"background", "bkgd", and "user", and the cross-reference parameters
corresponding to them are: "x_vign", "x_exp", "x_bkgd", "x_bkgd", and
"x_user".  If a label is not recognized as one of these special ones,
the history record is still labelled, but no corresponding
cross-reference parameter is created.

The special labelling is used in two ways.  First of all, \fIxhdisp\fR
will selectively display specially labelled history records, if
requested. For example, suppose the following history records are
defined:
.nf

	xhist01 = 'xpr2qp: small.xpr (small.hdr, small.tgr, no aspect
			file) -> small.qp'
	xhist02 = 'qpcopy: small.qp[pi=(0:5)] (circle 640 513 100) ->
			goo.qp'
	xhist03 = '*user* (no task): goo only contains photons from
			sdf source #2'

.fi
If the input \fItype\fR parameter to xhdisp is "history" or NULL, all
records will be displayed, whereas if the label string is "user" (or
any abbreviation), only history record #3 will be displayed.

Secondly, note that if a particular type of label has not been added
to any history record, that cross-reference parameter will not exist.
Thus applications tasks need only check for existence of a parameter
(using qp_accessf or imaccessf) to see if a special type of correction
(e.g. exposure correction or vignetting correction, etc.) has been
performed on the image.
.ih
TIME REQUIREMENTS
.ih
BUGS
.ih
SEE ALSO
.endhelp
