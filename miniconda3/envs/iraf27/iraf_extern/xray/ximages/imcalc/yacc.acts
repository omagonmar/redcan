
case 2:
# line 91 "imcalc.yy"
{
			return (OK)
		    }
case 3:
# line 94 "imcalc.yy"
{
			return (OK)
		    }
case 4:
# line 97 "imcalc.yy"
{
			return (OK)
		    }
case 5:
# line 100 "imcalc.yy"
{
			return (OK)
		    }
case 6:
# line 103 "imcalc.yy"
{
			return (EOF)
		    }
case 7:
# line 106 "imcalc.yy"
{
			return (EOF)
		    }
case 8:
# line 111 "imcalc.yy"
{
			call imc_cmd(O_VALC(yypvt))
		}
case 9:
# line 115 "imcalc.yy"
{
			call imc_print(O_REGISTER(yypvt), yyval)
		    }
case 10:
# line 120 "imcalc.yy"
{
			# Put a line to the output image.
			call imc_store (O_VALC(yypvt-2*YYOPLEN), O_REGISTER(yypvt), yyval)
		    }
case 13:
# line 130 "imcalc.yy"
{
			# Load the next line of an input image.
			call imc_load (O_VALC(yypvt), yyval)
		    }
case 14:
# line 134 "imcalc.yy"
{
			# floating constant.
			call imc_float (O_VALR(yypvt), yyval)
		    }
case 15:
# line 138 "imcalc.yy"
{
			# integer constant.
			call imc_int (O_VALI(yypvt), yyval)
		    }
case 16:
# line 142 "imcalc.yy"
{
			# Unary arithmetic minus.
			call imc_unop (OP_NEG, O_REGISTER(yypvt), yyval)
		    }
case 17:
# line 146 "imcalc.yy"
{
			# Boolean not.
			call imc_unop (OP_BNOT, O_REGISTER(yypvt), yyval)
		    }
case 18:
# line 150 "imcalc.yy"
{
			# Logical not.
			call imc_unop (OP_LNOT, O_REGISTER(yypvt), yyval)
		    }
case 19:
# line 154 "imcalc.yy"
{
			# Addition.
			call imc_binop (OP_ADD, O_REGISTER(yypvt-3*YYOPLEN),
						O_REGISTER(yypvt), yyval)
		    }
case 20:
# line 159 "imcalc.yy"
{
			# Subtraction.
			call imc_binop (OP_SUB, O_REGISTER(yypvt-3*YYOPLEN),
						O_REGISTER(yypvt), yyval)
		    }
case 21:
# line 164 "imcalc.yy"
{
			# Multiplication.
			call imc_binop (OP_MUL, O_REGISTER(yypvt-3*YYOPLEN),
						O_REGISTER(yypvt), yyval)
		    }
case 22:
# line 169 "imcalc.yy"
{
			# Division.
			call imc_binop (OP_DIV, O_REGISTER(yypvt-3*YYOPLEN),
						O_REGISTER(yypvt), yyval)
		    }
case 23:
# line 174 "imcalc.yy"
{
			# Exponentiation.
			call imc_binop (OP_POW, O_REGISTER(yypvt-3*YYOPLEN),
						O_REGISTER(yypvt), yyval)
		    }
case 24:
# line 179 "imcalc.yy"
{
			# Boolean and.
			call imc_boolop (OP_BAND, O_REGISTER(yypvt-3*YYOPLEN),
						  O_REGISTER(yypvt), yyval)
		    }
case 25:
# line 184 "imcalc.yy"
{
			# Boolean or.
			call imc_boolop (OP_BOR, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 26:
# line 189 "imcalc.yy"
{
			# Boolean or.
			call imc_boolop (OP_BXOR, O_REGISTER(yypvt-3*YYOPLEN),
						  O_REGISTER(yypvt), yyval)
		    }
case 27:
# line 194 "imcalc.yy"
{
			# Logical and.
			call imc_logicop (OP_LAND, O_REGISTER(yypvt-3*YYOPLEN),
						   O_REGISTER(yypvt), yyval)
		    }
case 28:
# line 199 "imcalc.yy"
{
			# Logical or.
			call imc_logicop (OP_LOR, O_REGISTER(yypvt-3*YYOPLEN),
						  O_REGISTER(yypvt), yyval)
		    }
case 29:
# line 204 "imcalc.yy"
{
			# Logical less than.
			call imc_logicop (OP_LT, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 30:
# line 209 "imcalc.yy"
{
			# Logical greater than.
			call imc_logicop (OP_GT, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 31:
# line 214 "imcalc.yy"
{
			# Logical less than or equal.
			call imc_logicop (OP_LE, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 32:
# line 219 "imcalc.yy"
{
			# Logical greater than or equal.
			call imc_logicop (OP_GE, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 33:
# line 224 "imcalc.yy"
{
			# Logical equal.
			call imc_logicop (OP_EQ, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 34:
# line 229 "imcalc.yy"
{
			# Logical not equal.
			call imc_logicop (OP_NE, O_REGISTER(yypvt-3*YYOPLEN),
						 O_REGISTER(yypvt), yyval)
		    }
case 35:
# line 234 "imcalc.yy"
{
			# Conditional expression.
			call imc_quest (O_REGISTER(yypvt-6*YYOPLEN),
					O_REGISTER(yypvt-3*YYOPLEN), O_REGISTER(yypvt), yyval)
		    }
case 36:
# line 239 "imcalc.yy"
{
			# Function call.
			call imc_call (O_VALC(yypvt-3*YYOPLEN), O_VALI(yypvt-YYOPLEN), yyval)
		    }
case 37:
# line 243 "imcalc.yy"
{
			YYMOVE (yypvt-YYOPLEN, yyval)
		    }
case 38:
# line 248 "imcalc.yy"
{
			# Empty.
			call imc_startarglist (NULL, yyval)
		    }
case 39:
# line 252 "imcalc.yy"
{
			# First arg; start a nonnull list.
			call imc_startarglist (O_REGISTER(yypvt), yyval)
		    }
case 40:
# line 256 "imcalc.yy"
{
			# Add an argument to an existing list.
			call imc_addarg (O_VALI(yypvt-2*YYOPLEN), O_REGISTER(yypvt), yyval)
		    }
case 41:
# line 262 "imcalc.yy"
{
			# Image or image section.
			YYMOVE (yypvt, yyval)
		    }