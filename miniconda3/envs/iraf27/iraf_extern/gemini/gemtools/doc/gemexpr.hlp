.help gemexpr October2013 gemini.gemtools
.ih
NAME
GEMEXPR -- Gemini image expression evaluator, handles MEF operands,
science, variance, and data quality frames.
.ih
USAGE
gemexpr sci_expr output [a b c ...]
.ih
PARAMETERS
.ls sci_expr
The expression to be evaluated on science frames.  This may be the
actual expression, or the string "@file" in which case the expression
is taken from the named file (note the file is not a "list" file, the
expression appears on a single line and multiple expression lines are
not supported).  The input operands (e.g., MEFs containing pixel data)
are referred to in the expression symbolically using the letters "a"
through "m" (GEMEXPR supports up to 13 operands).  FITS Header values
are referred to as \fIoperand.keyname\fR, where operand is a letter
"a"-"m" and "keyname" is the header value's name.  PHU header values
can be referenced as \fIoperand[0].keyname\fR, where operand again is
a letter "a"-"m" and "keyname" is the PHU header value's name.
.le
.ls output
The output MEF.  This file should not exist or an error will be generated.
The output file should not have kernel or image section modifiers.
.le
.ls a - m
The input operands referenced by the expression.  The operand value
may be a MEF filename, a header parameter reference, or a
constant. Data frames in each operand will be correlated by EXTNAME
and EXTVER (see "Frame Correlation" below).  FITS Image and Kernel
sections are not allowed, MEF filenames only.

FITS Header values are referred to as \fIoperand.keyname\fR, where
operand is a letter "a"-"m" and "keyname" is the header value's name.
PHU header values can be referenced as \fIoperand[0].keyname\fR, where
operand again is a letter "a"-"m" and "keyname" is the PHU header
value's name.  This syntax matches that in the \fIsci_expr\fR.
.le
.ls var_expr
The expression to evaluate for variance frames. This may be the actual
expression, or the string "@file" in which case the expression is
taken from the named file.  The symbols "a" through "m" refer to the
SCIENCE frames just as in the science expression.  To refer to
variance frames append "[VAR]" to the operand name (e.g. "a[VAR]"
names the variance data frame, "a[VAR].itime" would refer to the FITS
header value ITIME) for the given VAR frame.
.le
.ls dq_expr = "default"
The expression to evaluate for variance frames. This may be the actual
expression, or the string "@file" in which case the expression is
taken from the named file.  The symbols "a" through "m" refer to the
SCIENCE frames just as in the science expression.  To refer to
data quality frames append "[DQ]" to the operand name (e.g. "a[DQ]"
names the dq data frame, "a[DQ].itime" would refer to the FITS header
value ITIME) for the given DQ frame.  PLEASE NOTE: the "default"
expression is a simple OR-ing of the DQ data, this is not appropriate
for certain \fIsci_expr\fR expressions, e.g. ( "a>b? b:c", in which
case the correct \fIdq_expr\fR would be " a>b ? b[dq]:c[dq]" to 
take the "?" operator into account.
.le
.ls sci_ext = "SCI"
This is the EXTNAME value used to identify the science data frames.
Defaults to "SCI" which is the Gemini Package standard for science
extensions.
.le
.ls var_ext = "VAR"
This is the EXTNAME value used to identify the science data frames.
frames.  Defaults to "VAR" which is the Gemini Package standard for
variance extensions.
.le
.ls dq_ext = "DQ"
This is the EXTNAME value used to identify the science data frames.
Defaults to "DQ" which is the Gemini Package standard for data quality
extensions.
.le
.ls mdf_ext = "MDF"
This is the EXTNAME value used to identify the MDF extension in the
reference image.  Defaults to "MDF" which is the Gemini Package standard 
extension name for MDF binary tables.
.le
.ls fl_vardq = no
The flag controlling if variance and data quality frames are processed
with science frames.  If set to 'yes' this requires that variance and
data quality frames be present in each referenced operand.
.le
.ls dims = "default"
The dimensions of the output image.  If the special value "default" is
given the output image dimensions are computed based on the input operands
and the expression being evaluated.  Otherwise the value is a list of axis
lengths, e.g., "512,512".
.le
.ls intype = "default"
The minimum datatype for an input image operand.  If the special value
"default" is given the operand type will be the same as the pixel
type of the image.  Otherwise one of the values "short", "int",
"long", "real", or "double" should be given.  The program will promote
the type of the input operand to the type specified if the actual type
is less precise than the value of \fIintype\fR, otherwise the type of
the input operand is not changed.  For example, if \fIintype\fR is
"int" (the default), short integer input operands will be promoted to
integer but int, long, real or double operands will be unaffected.
Setting \fIintype\fR to real will force the expression to be evaluated
in floating point.
.le
.ls outtype = "default"
The pixel type of the output image.  If set to the special value
"default" the output image will be the same type as the expression
being evaluated.  If set to "ref" the output image will have the
same type as the reference input image (see \fIrefim\fR below),
regardless of the expression type.  If an explicit type is specified
such as "short", "ushort", "int", "real", an image of the indicated
type will be created.
.le
.ls refim = "default"
The reference image to be used as source for the PHU and MDF
extensions and to pass the WCS and other image header attributes to
the output image.  If set to \fIdefault\fR the program will use the
first most highly dimensioned image (note that this calculation is
done once per EXTVER).  To force a particular input image to be the
reference image the value should be set to the name of an input
operand ("a", "b", etc., not a MEF filename).
.le
.ls rangecheck = yes
If range checking is enabled then the program will check for illegal
operations such as divide by zero or the square root or logarithm of a
negative value, substituting a constant value (zero) if such an
operation is detected.  This may be necessary to avoid aborting the
entire operation because of a few bad pixels in an image.  A
conditional expression may be used to detect such pixels and perform
any special processing.
.le
.ls verbose = yes
Enable or disable informative messages.  If enabled, the program will
provide more information about its operation.
is evaluated.
.le
.ls exprdb = "none"
The file name of an optional expression database.  An expression
database may be used to define symbolic constants or a library of
custom function macros.  (see "The Expression Database" below)
.le
.ls lastout = ""
This parameter holds the most recently output extension, this will be
the most recently used output MEF, with "[APPEND]" kernel section.
This can then be referenced as a command operand.
.le
.ls logfile = ""
Name of logfile.
.le
.ls glogpars = "glogpars"
A pset file used by the Gemini IRAF logging facility to store personal 
preferences that take effect package-wide for the logging system.
.le
.ls status = 0
Exit status will be non-zero if the procedure halted with an
error. This parameter is always set by the task itself and should
not be modified by the user.
.le
.ih
DESCRIPTION
GEMEXPR evaluates an image expression and writes the result to
the output image.  Images operand are Multiple Extension Fits files
with one or more data extensions.  Data extensions are correlated by
EXTNAME and EXTVER and combined according to the input expressions
(\fIsci_expr\fR, \fIvar_expr\fR, \fIdq_expr\fR).  Images may be any 
dimension or size and any datatype except complex (complex images may 
be read but only the real part will be used).

If the input images are not all the same size the computation will be
performed over the largest area which is common to all images.  If the
images are not all the same dimension the lesser dimension operands
will be iteratively combined with the higher dimension ones.  For
example, when both a one and two dimensional image are used in the
same expression, the vector (one dimensional image) will be applied to
all lines of the two dimensional image.

Evaluation of the image expression is carried out one line at a time.
This is efficient and permits operations on arbitrarily large images
without using excessive memory, but does not allow 2D or higher
operations to be performed within the expression (e.g., transpose).
The entire expression is evaluated once for each line of the output
image.


\fBFrame Correlations\fR

In as many respects as possible operation of GEMEXPR coheres to the
operation of IMEXPR, using many of the same parameter names, etc, but
there is of course, an extra step.  The input image operands refer to
MEF files and GEMEXPR correlates the frames by EXTNAME and EXTVER.
Internally this step produces a "frame correlation table" for each
type of frame (science, variance, and data quality) in which the
columns relate to MEF operands and the rows relate to EXTVER.

Expressions are applied to the frames identified by this table on a
row by row basis.  e.g. symbol "a" in the \fIsci_expr\fR parameter
refers to operandA[SCI,1] for the first application of the expression,
then operandA[SCI,2] for the subsequent evaluations of the expression,
and so on.  Parameters that refer to header keywords, "a.EXPTIME" for
example, always refer to the proper image frame as expected.

Note on inferred EXTNAME and EXTVER: There are special cases in which
the correlation does not require EXTNAME.  Specifically, if none of
the frames in the MEF are named, then GEMEXPR will infer these are
"science frames" and use for EXTVER the absolute extension index of
the frame.  This is to allow quick-look operations which mix raw and
prepared data.  Also, if EXTVER is absent from a named frame, it is
inferred to be 1.

Note on missing frames: If one or all frames are missing (meaning the
MEF does not contain an appropriately named or numbered extension and
the name/number cannot be inferred), that row is skipped and will not
appear in the output.

\fBExtension Propagation\fR

MEF files can and do contain additional information not stored in the
image frames, and although GEMEXPR does not need these frames for its
calculation it does need to propagate these to the output MEF.  The
reference image, which by default is the first, most highly
dimensioned, image operand is therefore a special operand as it is the
source for these special extensions.  Currently they number two:

1. PHU - primary header unit, identified as MEF extension 0

2. MDF - a Mask Definition Table, if found, will be propagated.  It is
identified as the extension where EXTNAME == "MDF".  If multiple MDFs
appear in the output, which one is propagated is not defined.

\fBOperands\fR

Input operands are represented symbolically in the input expression
using the symbols "a" through "m", corresponding to GEMEXPR task
parameters.  Use of symbolic operands allows the same expression to be
used with different data sets, simplifies the expression syntax, and
allows a single input image to be used several places in the same
expression.

The operand value may be a MEF filename, a header parameter reference,
or a constant. Data frames in each operand will be correlated by
EXTNAME and EXTVER (see "Frame Correlation" below).  FITS Image and
Kernel sections are not allowed, MEF filenames only.

In the case of a MEF the value is a filename (.fits extension is not
required).  FITS Header values are formatted 
\fIoperand.keyname\fR, where "operand" is a letter "a"-"m" and "keyname"
is the header value's name.  PHU header values can be referenced as
\fIoperand[0].keyname\fR, where operand again is a letter "a"-"m" and
"keyname" is the PHU header value's name.  This syntax matches that in
the \fIsci_expr\fR.

Since the input operands are CL parameters they may be set on the command
line, or entered in response to parameter prompts when the task executes and
evaluates the input expression.  

Finally, there is a special built-in type of operand used to represent the
image pixel coordinates in an image expression.  These operands have the
special reserved names "I", "J", "K", etc., up to the dimensions of the
output image.  The names must be upper case to avoid confusion to with the
input operands "i", "j", "k" and so on.  

.nf
    I    X coordinate of pixel (column)
    J    Y coordinate of pixel (line)
    K    Z coordinate of pixel (band)
.fi

\fBOperators\fR

The expression syntax implemented by GEMEXPR provides the following
set of operators:

.nf
    ( expr )                grouping
    + - * /                 arithmetic
    **                      exponentiation
    //                      concatenate
    expr ? expr1 : expr2    conditional expression
    @ "name"                get operand

    &&                      logical and
    ||                      logical or
    !                       logical not
    <                       less than
    <=                      less than or equal
    >                       greater than
    >=                      greater than or equal
    ==                      equals
    !=                      not equals
    ?=                      substring equals

    &                       bitwise and
    |                       bitwise or
    ^                       bitwise exclusive or
    ~                       bitwise not (complement)
.fi

The conditional expression has the value "expr1" if "expr" is true,
and "expr2" otherwise.  Since the expression is evaluated at every pixel
this permits pixel-dependent operations such as checking for special pixel
values, or selection of elements from either of two vectors.  For example,
the command

    (a < 0) ? 555 : b / a

has the constant value 555 if "a" is less than zero, and "b / a" otherwise.
Conditional expressions are general expressions and may be nested or used
anywhere an expression is permitted.

The concatenation operator applies to all types of data, not just strings.
Concatenating two vectors results in a vector the combined length of the
two input vectors.

The substring equals operator "?=", used for string comparisons,  is like 
"==" but checks for the presence of a substring, rather than exact equality
of the two strings.


\fBFunctions\fR

Where it makes sense all intrinsic functions support all datatypes, with
some restrictions on "bool" and "char".  Arguments may be scalars or
vectors and scalar and vector arguments may be mixed in the same function
call.  Arguments are automatically type converted upon input as necessary.
Some functions support a variable number of arguments and the details of
the the operation to be performed may depend upon how many arguments are
given.

Functions which operate upon vectors are applied to the "lines" of an
image.  When applied to an image of dimension two or greater, these
functions are evaluated separately for every line of the multidimensional
image.

Standard Intrinsic Functions

.nf
     abs (a)            absolute value
     max (a, b, ...)    maximum value
     min (a, b, ...)    minimum value
     mod (a, b)         modulus
    sqrt (a)            square root
.fi

Mathematical or trigonometric functions

.nf
     acos (a)         arc cosine
     asin (a)         arc sine
     atan (a [,b])    arc tangent
    atan2 (a [,b])    arc tangent
      cos (a)         cosine
     cosh (a)         hyperbolic cosine
      exp (a)         exponential
      log (a)         natural logarithm
    log10 (a)         logarithm base 10
      sin (a)         sine
     sinh (a)         hyperbolic sine
      tan (a)         tangent
     tanh (a)         hyperbolic tangent
.fi

The trigonometric functions operate in units of radians.  The "deg" and
"rad" intrinsic functions (see below) can be used to convert to and from
degrees if desired.

Type conversion functions

.nf
      bool (a)    coerce to boolean
     short (a)    coerce to short
       int (a)    truncate to integer
      nint (a)    nearest integer
      long (a)    coerce to long (same as int)
      real (a)    coerce to real
    double (a)    coerce to double
       str (a)    coerce to string
.fi

The numeric type conversion functions will convert a string to a number if
called with a character argument.  The "str" function will convert any
number to a string.

Projection functions

.nf
       len (a)               length of a vector
       hiv (a)               high value of a vector
       lov (a)               low value of a vector
      mean (a [, ksigma])    mean of a vector
    median (a)               median of a vector
    stddev (a [, ksigma])    standard deviation
       sum (a)               sum of a vector
.fi

The projection functions take a vector as input and return a scalar value as
output.  The functions "mean" and "stddev", used to compute the mean
and standard deviation of a vector, allow an optional second argument which
if given causes a K-sigma rejection to be performed.

Miscellaneous functions

.nf
       deg (a)                      radians to degrees
       rad (a)                      degrees to radians
    median (a, b, c [, d [, e]])    vector median of 3-5 vectors
      repl (a, n)                   replicate
      sort (a)                      sort a vector
     shift (a, npix)                shift a vector
.fi

The "median" function shown here computes the vector median of several
input vectors, unlike the projection median which computes the median value
of a vector sample.  The function "sort" returns the sorted vector as output
(this can be useful for studying the statistics of a sample).
The function "shift" applies an integral pixel shift to a vector, wrapping 
around at the endpoints.  A positive shift shifts data features to the right 
(higher indices).

The "repl" (replicate) function replicates a data element, returning a
vector of length (n * len(a)) as output.  For example, this can be used to
create a dummy data array or image by replicating a constant value.


\fBThe Expression Database\fR

A GEMEXPR expression database provides a macro facility which can be
used to create custom libraries of functions for specific applications. A
simple example follows.

.nf
    # Sample GEMEXPR expression database file.

    # Constants.
    SQRTOF2=    1.4142135623730950488
    BASE_E=     2.7182818284590452353
    PI=         3.1415926535897932385
    GAMMA=      .57721566490153286061    # Euler's constant

    # Functions.
    div10(a)      ((a) / 10)
    divz(a,b)     ((abs(b) < .000001) ? 0 : a / b)

    div(a,b)      (div10(b) / a)
    sinx          (cos(I / 30.0))
    sinxy(a,b)    (cos (I / a) + cos (J / b))
.fi

The complete syntax of a macro entry is as follows:

    <symbol>['(' arg-list ')'][':'|'=']     replacement-text

The replacement text may appear on the same line as the macro name or may
start on the next line, and may extend over multiple input lines if
necessary.  If so, continuation lines must be indented.  The first line
with no whitespace at the beginning of the line terminates the macro.
Macro functions may be nested.  Macro functions are indistinguishable from
intrinsic functions in expressions.

.ih
TECHNICAL NOTES

The GEMEXPR task relies on a task function not available from the CL,
mimexpr, and you may notice the mimexprpars.par which exists to pass
parameters to this subtask.  Also the new SPP version of the
GEMARITH task relies on GEMEXPR as a subtask, so the file
'gemexprpars.par' is a pset file used to pass parameters to GEMEXPR
when invoked as a subtask.  Neither these .par files nor their related
parameter caches found in the user's "uparm" directory should be 
manipulated by the user, they exist entirely for automated control of 
subtasks.

.ih
EXAMPLES
.sp
1. Subtract the median value from each line of an image without variance or 
   date
quality handling.
.sp
.nf
    cl> gemexpr "a - median(a)" outimage medimage fl_vardq=no
.fi
.sp
2. Subtract a bias, divide by a flat propagating variance and dq.
.sp
.nf
    cl> gemexpr "(a - b)/c" outmef rawmef biasmef flatmef \
    >>> var_exp="(a[var]+(a/c)**2*c[var]+b[var]+(b/c)**2*c[var])/c**2"
.fi
.sp
3. Divide all frames in "inmef" by exposure time given in header:
.sp
.nf
    cl> gemexpr "a/b" outmef inmef a.EXPTIME fl_vardq+ \
    >>> var_expr="( a[var] + a**2*b[var]/b**2 ) / b**2"
.fi
.ih
BUGS AND LIMITATIONS
The input and output images cannot be the same.
No support for type complex yet, or operations like the fourier transform.
We want a "default" mode for var_ext which does not exist, you must specify 
\fIvar_expr\fR if \fIfl_vardq\fR is "yes".
.ih
SEE ALSO
gemarith, imexpr, imarith, imfunction, imcombine
.endhelp
