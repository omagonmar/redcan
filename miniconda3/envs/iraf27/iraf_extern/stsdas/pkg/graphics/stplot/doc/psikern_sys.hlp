.help psikern Jan95 stplot
.ih
NAME
psikern -- PostScript Kernel to IRAF GKI graphics.
.ih
DESCRIPTION
For a user-level description of psikern, type "help psikern".  This
help file provides detailed information on how psikern interfaces with
GKI, how to define a graphcap to use psikern, and the SPP interface to
the GIO escape function to access features of psikern that cannot be
accessed through GIO.

PSIKern is used to generate Level 1, "encapsulated" PostScript files
from the IRAF Graphics Input/Ouput (GIO) graphics system.  When GIO
draws graphics, it outputs the drawing commands in a language known as
Graphics Kernel Interface (GKI).  psikern translates the GKI
datastream into a PostScript program, suitable for output to a
PostScript device, or for inclusion in a word processing document.
This kernel implements all the functionality provided by the GKI
datastream, including color lines, color text, color solid fills,
arbitrary fill patterns, and the simple imaging model.  There are also
a number of "escape" sequences to add some basic functionality that
the normal GKI datastream does not support.  More explanations of
these below.

For a full discussion of GIO, see the help file "gio$doc/gio.hlp"

Like all IRAF graphics kernels, psikern may be called either
explicitly as a task, to plot a graphics metacode file, or implicitly
when the output of a graphics task is directed to a device which uses
the psikern kernel.  The only difference in how psikern operates when
called as a task and as a graphics device is that the parameters to
the psikern task are not available when run as a device.  However, the
functionality of the parameters can be accessed through the graphcap
parameters.

The rest of the discussion focuses on how color is handled, how to
define a graphcap, and the programming interface for the GIO escape
codes.
.ls COLOR
PostScript has the general capability of specifying any color desired.
This is especially true of Level 2 PostScript, in which different
colors systems are implemented in PostScript.  However, a particular
device, which supports PostScript, does not necessarily support a
general color rendering.  In fact, no colors or grayscale may be
available at all.  

GIO itself has a basic color model.  Color is represented simply
as an integer, starting at zero.  The only dependable convention is
that color 0 is the "background", while color 1 is the "foreground".
Beyond this, there are no true conventions, except for what the
'tvmark' task defines, and, more recently, what xgterm uses as the
default.  Also, a specific task may wish to use its own colormapping,
appropriate to the problem the task is solving.

To interface the GIO color model to PostScript, psikern uses the
"lookup table" (LUT) approach.  A table is defined which, for each GIO
color index, a red/green/blue (RGB) color specification is defined.  A
"name", or string identifier may be specified along with the index,
though GIO currently has no way of using named colors.

There are two LUT's defined: one for "graphics", i.e. almost
everything produced by IRAF.  The other is for "images", or, in GIO
terminology, "cells".  GIO has the ability, through the 'gpcell' call,
to render images.  psikern will render these images using the image
LUT.  There are two separate LUT's because line drawing and image
rendering are two different operations, using the LUT's in different
ways.  Most graphics applications will only be concerned with the
graphics LUT.

A lookup table may either be a text or binary STSDAS table.  If the table
is a text table, the columns are defined as follows.  Lines that begin
with a pound sign, "#", or totally blank lines, are considered
comments.  The first four columns must be present.  The last column,
specifying the color name is optional.
.ls First Column - GIO color index
The GIO color index whose color is being defined.
.le
.ls Second Column - red component.
A real number, between 0 (no intensity) to 1 (full intensity)
specifying the red component of the color for the current index.
.le
.ls Third Column - green component.
A real number, between 0 (no intensity) to 1 (full intensity)
specifying the green component of the color for the current index.
.le
.ls Fourth Column - blue component.
A real number, between 0 (no intensity) to 1 (full intensity)
specifying the blue component of the color for the current index.
.le
.ls Fifth Column - name (optional)
The rest of the row defines the name of the color.  This column is
optional.
.le

For binary tables, the format is much the same as for text tables,
except the columns are named.  Also, both the INDEX and NAME columns
are optional.  The column names and their definitions are as follows:
.ls RED
A real number, between 0 (no intensity) to 1 (full intensity)
specifying the red component of the color for the current index.
.le
.ls GREEN
A real number, between 0 (no intensity) to 1 (full intensity)
specifying the green component of the color for the current index.
.le
.ls BLUE
A real number, between 0 (no intensity) to 1 (full intensity)
specifying the blue component of the color for the current index.
.le
.ls INDEX (optional)
If this column is present, it contains the GIO color indicies for
which colors are defined.  If not present, the row number defines the
color index.
.le
.ls NAME (optional)
A name associated with the color.
.le

Another feature of psikern and its LUT's is that psikern can
interpolate colors.  psikern forces that all colors be defined.  In
other words, all colors 
between 0 and the maximum index defined in a LUT must be defined.  For
example, if the largest color index defined in a LUT is 255, all
colors from 0 to 255 must be defined.  If this is not the case,
psikern will use linear interpolation to define any intervening colors
that have not explicitly been defined in the LUT.  This has the advantage
of being able to specify compact LUT's for potentially large numbers
of colors.  See the examples below.
.le
.ls GRAPHCAP
Each GIO graphics device is defined by a "graphcap" entry.  See the GIO
documentation for a full explanation of the graphcap.  In short, a
graphcap entry is made up of two character "parameters".  The
parameters have a type which is indicated by how the parameter is
defined.  The parameters are separated by colons, ":".  The types of
parameters and the form the take are as follows, where "XX" is the
parameter name and "V"'s are the values:
.ls XX -- Boolean
A parameter with no associated value is a boolean parameter.  If the
parameter is listed in the graphcap, the value of that parameter is
'true'.  If the parameter is not present, the value is 'false'
.le
.ls XX#VVV -- Numeric (either integer or real)
If the parameter is followed by a pound sign, "#", the value of the
parameter is the number following the "#".
.le
.ls XX=VVV -- String
If the parameter is followed by an equal sign, "=", the value of the
parameter is the string, up to the next ":".
.le

Again, there are many more features in a graphcap file.  Please refer
to the GIO documentation for a full description.

graphcap parameters fall into two classes: generic and
device-specific.  Generic parameters are represented by lower case
characters.  These parameters can generally be found for all types of
devices and should be present (if the capability exists).

Device-specific parameters are represented by upper case characters.
They represent specific features of a particular device that does not
fall under the generic parameters.  Since they are device-specific, a
task must know what type of device is in use to make use of these
parameters.

Below is a list of all the relevent graphcap parameters for a psikern
device.  The generic parameters are presented first, followed by the
device-specific parameters.
.ls ar (real)
The aspect ratio of the GIO plotting area.  This is generally equal
to:
.nf
	ys / xs
.fi
where xs and ys are graphcap parameters.  In general, this parameter
should always be defined since many IRAF graphics tasks use this
parameter to correct for changes in aspect ratios.
.le
.ls ca (bool)
If present, this indicates that the device implements cell arrays
(images).  
In general, this parameter should be defined since the PostScript
language always supports this functionality.  Note though that not all
PostScript devices support this functionality, or it may be desirable
to disallow a specific device from providing this functionality.
If psikern does not find this capability, psikern will not render cell
arrays.
.le
.ls ch (real)
The height, in NDC units, of a text character.
.le
.ls cw (real)
The width, in NDC units, of a text character.
.le
.ls fa (bool)
If present, indicates that the device implements fill patterns.
In general, this parameter should be defined since the PostScript
language always supports this functionality.  Note though that not all
PostScript devices support this functionality, or it may be desirable
to disallow a specific device from providing this functionality.  If
psikern does not find this capability, psikern will not render filled
areas.
.le
.ls fs (int)
The number of fill styles implemented.  psikern provides by default
six fill styles.  In general, this should always be present.
.le
.ls kf (string)
The file name of the kernel executable.  The default value is
"stsdas$bin/x_psikern.e".
.le
.ls li (int)
The number of lines of text that can fit within the GIO plotting area.
By default, this should be 24.
.le
.ls pl (bool)
If present, indicates that the device implements polylines.
In general, this parameter should be defined since the PostScript
language always supports this functionality.  Note though that not all
PostScript devices support this functionality, or it may be desirable
to disallow a specific device from providing this functionality.
.le
.ls pm (bool)
If present, indicates that the device implements polymarkers.
In general, this parameter should be defined since the PostScript
language always supports this functionality.  Note though that not all
PostScript devices support this functionality, or it may be desirable
to disallow a specific device from providing this functionality.
.le
.ls se (bool)
If present, indicates that the device implements selective erase.  For
the current version of GIO, this means that the background color, 0,
will erase previously drawn graphics of other colors.  In general,
this should always be present.
.le
.ls tn (string)
The task name of the kernel in the executable.  In general, this
should always be "psikern"
.le
.ls tq (int)
The number of text quality levels.  PostScript provides only one
quality level, the highest.
.le
.ls xr (int)
The resolution, in device dots per inch, along the GIO X (horizontal) axis.
The X dimension is parallel to the horizontal, x, dimension of GIO.  For
landscape mode, this is along the longest physical dimension of the
device.  For portrait mode, this is along the shortest physical
dimension of the device.  In general, this should always be defined.
.le
.ls xs (real)
The width of the GIO plotting area, in meters, along the GIO X
(horizontal) axis.
The X dimension is parallel to the horizontal, x, dimension of GIO.  For
landscape mode, this is along the longest physical dimension of the
device.  For portrait mode, this is along the shortest physical
dimension of the device.  In general, this should always be defined.
.le
.ls yr (int)
The resolution, in device dots per inch, along the GIO Y (vertical) axis.
The Y dimension is perpendicular to the horizontal, x, dimension of GIO.  For
landscape mode, this is along the shortest physical dimension of the
device.  For portrait mode, this is along the longest physical
dimension of the device.  In general, this should always be defined.
.le
.ls ys (real)
The width of the GIO plotting area, in meters, along the GIO Y
(vertical) axis.
The resolution, in device dots per inch, along the GIO Y (vertical) axis.
The Y dimension is perpendicular to the horizontal, x, dimension of GIO.  For
landscape mode, this is along the shortest physical dimension of the
device.  For portrait mode, this is along the longest physical
dimension of the device.  In general, this should always be defined.
.le
.ls zr (int)
The resolution in z or color levels, of the device.  What this means
in GIO is not clear.  psikern doesn't use this value.  However, the
assumption is that this is a maximum level.  Arbitrarily, psikern
assumes 256 levels.
.le

The device-specific parameters are as follows:
.ls BO (bool)
If present, psikern will "buffer" the PostScript output.  PostScript
itself does not consider newlines important, but just as another
"whitespace" character.  psikern will fill an 80 character line with
as many characters as it can before issuing a newline character.  If
this parameter is not present, implying false, psikern will place
each PostScript command that it generates on a separate line.  This is
useful if the user wants to do extensive editing on the PostScript, or
understand what the PostScript is doing.
.le
.ls DB (bool)
If present, psikern will print out debugging information to STDERR.
This information contains details about what SPP functions are being
called while the kernel is running.   Useful only if the user is
actually debugging/modifying the psikern SPP code.
.le
.ls DD (string)
The "dispose" parameter.  This is what tells psikern what to do with a
PostScript file, once it is generated.  In general, there are three,
comma-separated, fields in the string.  The first is the name of the
device.  The second field is the rootname for any temporary files
created by psikern.  The third field is the operating system command
to execute to dispose/print/rename the PostScript file.  See the
examples below.
.le
.ls FB (string)
The PostScript font to use for GIO Bold font.  If not specified, the
"Times-Bold" PostScript font will be used.  This can be any font name
understood by the PostScript device which will be printing/using the
output.
.le
.ls FE (bool)
If present, an extra "showpage" will be issued at the end of the last
plot in the file.  In general, this is not necessary for most
PostScript devices.
.le
.ls FG (string)
The PostScript font to use for GIO Greek font.  If not specified, the
"Symbol" PostScript font will be used.  This can be any font name
understood by the PostScript device which will be printing/using the
output.
.le
.ls FI (string)
The PostScript font to use for GIO Italic font.  If not specified, the
"Times-Italic" PostScript font will be used.  This can be any font name
understood by the PostScript device which will be printing/using the
output.
.le
.ls FR (string)
The PostScript font to use for GIO Roman font.  If not specified, the
"Times-Roman" PostScript font will be used.  This can be any font name
understood by the PostScript device which will be printing/using the
output.
.le
.ls FS (bool)
If present, a "showpage" command will be issued before the first
plotting instruction is written to the PostScript output.  This is
generally not necessary for most PostScript devices.
.le
.ls IF (string)
The file containing the psikern PostScript prolog commands.  Must
always be specified.  The default value is
"stsdas$lib/psikern_prolog.ps".
.le
.ls LG (string)
The name of the file containing the lookup table (LUT) to use for
graphics colors.  If not present, psikern will use a default LUT
similar to that of the 'tvmark' task.
.le
.ls LI (string)
The name of the file containing the lookup table (LUT) to use for
images.  If not present, psikern will use a default grayscale mapping.
.le
.ls MF (int)
The number of frames/plots that can be placed in a single PostScript
file at a time.  If not present, psikern will place one frame per
file.

If MF is less than zero, an evil thing happens.  Some
background: In the IRAF graphics system, then end of a plot is defined
as the beginning of the next plot- either through the GKI_CLEAR
operand, or through the GFLUSH iraf command.  I.e. one doesn't really
know the end of the plot.  As a result, one can NEVER get a plot to
come out of a printer immediately after finishing drawing a plot,
without invoking gflush or starting a new plot.  This is fine and
proper.  However, user perception is a different thing.  Some people
insist on getting a plot out.  Hence the evil.  If MF is less than 0,
the graphics will be flushed to the printer when the current plot is
closed.  The problem users will then be faced with is the fact that
they can not append plots together, since the previous plot is now
"out the door".  DO NOT USE this feature except for special
circumstances. 
.le
.ls MO (bool)
If present, text will be written using mono-spaced characters.  If not
present, text will be written using variable-spaced characters.
.le
.ls NF (bool)
If present, store each frame in a seperate spool file.  This has the
same effect as setting the MF parameter to 1.  This parameter
overrides any settings of the MF parameter.
.le
.ls PB (int)
The index of the graphics color to use to paint the background of the
whole plot area.  This can be used to change the default background
color to something other than the color of the paper or other output
device.  If not present, no color is painted on the background.
.le
.ls PI (real)
The multiplicative increment to increase the linewidth each step.  The
linewidth is determined by the equation

.nf
	drawn width = PW + ((linewidth-1) * PI * PW)
.fi

where PW is another graphcap parameter (see below).
.le
.ls PT (bool)
If present, paint the plot onto the device in "portrait" mode.  If not
present, plots will appear in "landscape" mode.  Portrait mode is when
the horizontal axis of the plot is parallel to the shorter dimension
of the output device.  Landscape mode is when the horizontal axis of
the plot is parallel to the longer dimension of the output device.
.le
.ls PW (real)
The size of a drawn line in normalized device coordinates (NDC).  
NDC coordinates go from 0 (zero width) to 1 (full width of the output
device).
.le
.ls RM (bool)
If present, the temporary file containing the PostScript will be
deleted after the dispose command, defined in the DD parameter, has
been executed.  In general, this is not specified because the deletion
of any files is usually handled by the dispose command or the actual
printing operation.
.le
.ls TD (int)
The size, in NDC units, of a dash in a dashed or dashed-dotted line.
NDC coordinates go from 0 (zero width) to 1 (full width of the output
device).
.le
.ls TP (int)
The size, in NDC units, of a dot in a dotted or dashed-dotted line.
NDC coordinates go from 0 (zero width) to 1 (full width of the output
device).
.le
.ls TS (int)
The size, in NDC units, of a space in a dashed, dotted, or
dashed-dotted line. 
NDC coordinates go from 0 (zero width) to 1 (full width of the output
device).
.le
.ls XO (real)
Offset, in meters, from the corner/zeropoint of the physical display,
the lower left hand corner of the GIO plotting area starts.  The X
dimension is parallel to the horizontal, x, dimension of GIO.  For
landscape mode, this is along the longest physical dimension of the
device.  For portrait mode, this is along the shortest physical
dimension of the device.
.le
.ls YO (real)
Offset, in meters, from the corner/zeropoint of the physical display,
the lower left hand corner of the GIO plotting area starts.  The Y
dimension is perpendicular to the horizontal, x, dimension of GIO.  For
landscape mode, this is along the shortest physical dimension of the
device.  For portrait mode, this is along the longest physical
dimension of the device.
.le
.le
.ls EXTRA FUNCTIONALITY: GKI ESCAPE CODES
PSIKern supports a number of "escape" codes which round-out the
basic functionality of the GKI interface.  Programs access the escape
code by including the file "<psiescape.h>" and using the GIO routine
'gescape'.  Below is what the different escape codes are and how they
use the array passed by gescape.  Note that one can check on the type
of kernel being used by inquiring of the graphcap value 'tn' using
the 'ggets' GIO routine.  For PSIKern, this value will be "psikern".

.ls PS_CODE
Send raw PostScript code to the output.  The array
contains the string of PostScript that is to be downloaded into the
PostScript output.  Any PostScript-valid string is acceptable.  One
should note that a PostScript file is a program and the user, if
inserting PostScript code into the program using this escape, should
beware of any side effects the inserted code may have on the rest of
the output.
.le
.ls  PS_IMAGE_RED_LUT,  PS_IMAGE_GREEN_LUT,  PS_IMAGE_BLUE_LUT
Download a new lookup table (LUT) for, respectively,
the red, green, and blue components of the IMAGE lookup table.  The
imaging model is a very simple one based on strict interpretation of
the GIO gputcell() call.  A cell consistes of an array of values
between 0 and 255.  If no image LUT is defined, the cells are
rendered as grayscale images by the PostScript.  However, through
these three escapes, an arbitrary LUT may be defined.  Each component
of the LUT is an array PS_IMAGE_LUT_SIZE long (256).  Each value of
the array is from 0 (no color) to 255 (saturation).  If the output
PostScript devices supports color, the image will be rendered using
the colors defined by the three LUT's.  If it doesn't, then the three
LUT's are combined to define a grayscale LUT to render the image.

See also the PS_IMAGE_LUT escape code below.
.le
.ls PS_GR_RED_LUT, PS_GR_GREEN_LUT, PS_GR_BLUE_LUT
Download a new lookup table (LUT) for, respectively,
the red, green, and blue components of the graphics LUT.  In GIO,
graphics color is defined by an arbitrary integer.  That integer is
used to index into the three LUT's to determine the desired color.
The default configuration defines a 16 entry LUT containing the color
definitions defined by the tvmark task.  To change the
default, use these escape sequences.  The array of length
PS_GR_LUT_SIZE (16) contains values 0 (no color) to 255 (saturation).
All three LUT's must be defined.  Though the nominal length is 16, any
sized arrays can be used, as long as all three arrays are of the same
length.

See also the PS_GRAPHICS_LUT escape code below.
.le
.ls PS_IMAGE_LUT, PS_GRAPHICS_LUT
Define a new graphics/image LUT from the
specified file name.  The array contains a string with the file
name containing the LUT.  See the discussion under "COLOR" for an
explanation of the LUT table file.
.le
.ls PS_ROMAN_FONT, PS_GREEK_FONT, PS_ITALIC_FONT, PS_BOLD_FONT
Specify a new PostScript font for,
respectively, the GIO Roman, Greek, Italic, and Bold fonts.  The array
contains a string which has the name of the PostScript font to used
when the corresponding GIO font is selected.
.le
.ls PS_VARIABLE_SPACE
Flag indicating whether characters written out
by the GIO gtext call should be variable-spaced or mono-spaced.  The
instruction array should contain just one value, YES or NO to use,
respectively, variable spacing or not.  The default is to use variable
spacing.  However, the GIO paradigm is a mono-spaced paradigm and some
programs may use this feature in placing text.  Using this escape
sequence will guarantee that the characters are placed correctly.
.le
.ls PS_DASH, PS_DOT, PS_SPACE
Change the sizes of a dash, a dot, and the space between
them.   The instruction array contains a single value determining the
length, in GKI units, of the respective dash, dot, and space patterns.
By default, the sizes are 400, 40, and 200 respectively.  These sizes
can also be changed in the graphcap (see below).
.le
.ls PS_FILL_PATTERN
Add/change fill patterns used by the GIO gfill
command.  In GIO, the fill pattern is specified by an arbitrary
integer.  The first three patterns, 0, 1, 2, are always clear, solid,
and hollow fill patterns and cannot be changed.  However, patterns 3
and up are arbitrary.  PSIKern defines patterns 3-6 as: verticle line,
horizontal line, diagonal increasing to the right, diagonal increasing
to the left.  The PSIKern uses a proto-type filling algorithm,
specifically program 15 from the _PostScript Language: Tutorial and
CookBook_.  This program uses 8 values between 0 and 255 to define 8
rows of bit patterns that create the fill pattern.  Thus, the
instruction array will have as its first value, the number of the fill
pattern to be replaced/added.  The next 8 values define the fill
pattern.
.le
.le
.ih
EXAMPLES
The first set of examples deal with defining graphcap entries for a
psikern device.

1. Three default graphcap entries for a psikern device.  The common
graphcap entry is "psi_def", and the landscape and portrait modes are
defined as "psi_land" and "psi_port" respectively.  The output device
is assumed to be a standard 8.5x11 inch paper.  The file is not sent
to a printer, but the name is simply echoed to standard output when
the plot is flushed from the GIO buffer (note DD parameter in psi_def).

.nf
psi_port|psidbgp|PostScript Kernel default portrait:\
	:ar#1.3241525:ch#.02:cw#.02644:\
	:xr#2313:xs#0.1959:yr#3063:ys#0.2594:PT:
	:tc=psi_def:

psi_def|psi_land|Postscript Kernel Default 8.5x11in 300dpi Landscape:\
	:ar#0.7552:ca:ch#.02644:co#80:cw#.02:fa:fs#6:\
	:kf=develop$psikern/xx_psikern.e:\
	:li#24:lt#4:pl:pm:se:tf#4:tn=psikern:tq#1:tx:xr#3063:xs#0.2594:\
	:yr#2313:ys#0.1959:zr#256:\
	:BO:\
	:DD=psi_def,tmp$psk,!{ echo $F; }&:\
	:FB=Times-Bold:FG=Symbol:FI=Times-Italic:FR=Times-Roman:\
	:IF=develop$psikern_prolog.ps:\
	:LG=stsdas$lib/invxgterm:\
	:MF#100:PI#1.:PW#.00011:TD#.01221:TP#.001221:TS#.006104:\
	:XO#0.01:YO#0.01:
.fi

Once these entries are placed in the "dev$graphcap" file, a user can
use the devices by specifying the device name in a task's "device"
parameter.  For example, to get a PostScript file of the output from
the 'prow' task, a user would do the following:

.nf
	cl> prow dev$pix 256 device=psi_land
	cl> gflush
	/tmp/pskXXXX
.fi

The file "/tmp/pskXXXX" is the PostScript file of the output from
prow.

If the user will always be using a psikern device, they need only
change their "login.cl" file or add the following to their
"loginuser.cl" file, to change the default graphics output device:

.nf
	set stdplot=psi_land
.fi

Then, whenever a user uses the "snap" feature of the graphics cursor,
or uses the device "stdplot", their output will appear on the
specified device.	

2. Define two graphcap entries, making use of the default entries in
example 1, where the PostScript file is sent to a printer queue.  The
host operating system is some flavor of UNIX and the printer queue
name is "lw".  The two entries send the plot in either landscape or
portrait mode, depending on the entry.  Note that the host operating
system command will remove the temporary file.

.nf
psi_lw_land|PostScript Kernel send output to queue lw, LandScape:\
	:DD=psi_def,tmp$psk,!{ lpr -Plw $F; rm $F ;}&:\
	:tc=psi_land:
psi_lw_port|PostScript Kernel send output to queue lw, Portrait:\
	:DD=psi_def,tmp$psk,!{ lpr -Plw $F; rm $F ;}&:\
	:tc=psi_port:
.fi

3. Define two graphcap entries, making use of the entries defined in
example 2, where the drawn lines are thinner.

.nf
psi_lw_land_thin|PostScript Kernel, thin lines, LandScape, queue lw:\
	:PW#0.00008:PI#0.5:tc=psi_lw_land:
psi_lw_port_thin|PostScript Kernel, thin lines, Portrait, queue lw:\
	:PW#0.00008:PI#0.5:tc=psi_lw_port:
.fi

4. Define a graphcap entry, using entries in example 1, which has an
aspect ratio of unity, i.e. a square output device.  Just echo the
file name.  Such an entry is useful if one wants to include the
PostScript in another PostScript, TeX, or other word processing
document that can include PostScript.

.nf
psi_square|PostScript Kernel square viewport:\
        :PT:xs#0.1959:ys#0.1959:ar#1:cw#.02:ch#.02:\
        :XO#0.01:YO#0.0581:xr#2313:yr#2313:\
        :tc=psi_def:
.fi

The following examples demonstrate how to use the psikern as a
task.

5. Capture the output of the prow task in a metacode file and
produce a PostScript file.  This example does not demonstrate anything
that could not be done directly using a graphcape device.  This is
just meant to show how to redirect graphics to a file, and then render
that file using a specific graphics kernel.

.nf
    cl> prow dev$pix 101 >G prow.gki
    cl> psikern prow.gki device=psi_land
.fi

Note that this could have been done as follows:

.nf
	cl> prow dev$pix 101 device=psi_land
	cl> gflush
.fi

6. Produce a PostScript file from a GKI metacode file.  However,
instead of using the default name generated by psikern itself, place
the PostScript into a specific file, here "prow.ps".

.nf
	cl> prow dev$pix 101 >G prow.gki
	cl> psikern prow.gki device=psi_land output=prow.ps
.fi

7. Use a different set of fonts than that specified for any device
defined in the graphcap file.  For example, one may want to use the
Helvetica family of fonts instead of the Times family.  The font names
should appear exaclty as they would in a PostScript program.

.nf
	cl> prow dev$pix 101 >G prow.gki
	cl> psikern prow.gki device=psi_land\
	roman_font=Helvetica bold_font=Helvetica-Bold\
	italic_font=Helvetica-Oblique
.fi

8. Change the spacing of characters.  By default, psikern renders
characters using proportional spacing.  However, GIO and many tasks
assume the character spacing is constant, or monospace.  Render a
graphics output using monospaced characters.

.nf
	cl> prow dev$pix 101 >G prow.gki
	cl> psikern prow.gki device=psi_land proportional-
.fi

9. Changing colors of a graphics output from an IRAF task that does
not provide this functionality.  Most IRAF tasks do not allow or make
use of colors.  Instead of rendering output using the color
defined for color 1, use the color defined for color 2, and render
text using color 3.

.nf
	cl> prow dev$pix 101 >G prow.gki
	cl> psikern prow.gki device=psi_land\
	linecolor=2 textcolor=3
.fi

The following examples demonstrate how to define and modify the color
lookup tables.

10. Define and use the suggested color table, "invxgterm".  This
table is a text table and has the following contents.  Note that this
table is distributed with STSDAS in the file
"stsdas$lib/invxgterm".

.nf
	# Inverse xgterm colormap for psikern.
	# This is different from the standard xgterm color map
	# where the foreground/background are inverted.  
	# This is so the background is white, as is most
	# paper, and the foreground is black, as in most writing on paper.
	#
	# Each color component is specfied from units of 0. (no color) 
	# to 1. (full color)
	#
	# The columns are:
	# Index	red	green	blue    name (optional)
	#
	# Define the default background/foreground
	#
	0	1.	1.	1.	white
	1	0.	0.	0.	black
	#
	# The following colors are color2 through color9 of xgterm's default
	# coloring.
	#
	2	1.	0.	0.	red
	3	0.	1.	0.	green
	4	0.	0.	1.	blue
	5	0.	1.	1.	cyan
	6	1.	1.	0.	yellow
	7	1.	0.	1.	magenta
	8	0.63	0.13	0.94	purple
	9	0.18	0.31	0.31	darkslategray
	#
	# Just to round things out, finish defining the colors up
	# through color 15.  Use the tvmark colormap for the definition.
	#
	10	1.	0.65	0.	orange
	11	0.94	0.90	0.55	khaki
	12	0.85	0.44	0.84	orchid
	13	0.25	0.88	0.82	turquoise
	14	0.93	0.51	0.93	violet
	15	0.96	0.87	0.70	wheat
.fi

This table can be accessed either through the "LG" graphcap parameter
(see example 1 in the "psi_def" graphcap entry), or by specifying the
name of the file in the 'graphics_lut' parameter:

.nf
	cl> prow dev$pix 101 >G prow.gki
	cl> psikern prow.gki device=psi_land graphics_lut=invxterm
.fi

11.  Define a two-color graphics lookup table.  Many PostScript
devices are laser printers.  Though they render color as different
levels of gray, the output may not be pleasing.  One can force black
on white by using a two-color graphics lookup table.  The contents of
such a table would be as follows.  Note that STSDAS distributes this
table in the file "lib$mono"

.nf
	# Monochrome colormap for psikern output.
	#
	# Each color component is specfied from units of 0. (no color) 
	# to 1. (full color)
	#
	# Index	red	green	blue    name (optional)
	0	1.	1.	1.	white
	1	0.	0.	0.	black
.fi

12.  A user has written an IGI script which requires a 256 color
graphics LUT, which mimics a rainbow from red to magenta.  The
contents of the LUT would be as follows.  Note that STSDAS distributes
this table in the file "lib$rain256".  This table demonstrates the
use of the color interpolation that psikern provides.

.nf
	# 256 rainbow colormap for psikern
	#
	# Each color component is specfied from units of 0. (no color) 
	# to 1. (full color)
	#
	# The columns are:
	# Index	red	green	blue    name (optional)
	#
	# Define the default background/foreground
	#
	0	1.	1.	1.	white
	1	0.	0.	0.	black
	#
	# Colors 2-257 define the 256 color rainbow.  Since psikern will
	# interpolate for missing colors, we need only define 
	# "control" colors.
	#
	2	1.	0.	0.	red
	53	1.	1.	0.	yellow
	104	0.	1.	0.	green
	155	0.	1.	1.	cyan
	206	0.	0.	1.	blue
	257	1.	0.	1.	magenta
.fi

13.  A user has written an IGI script which renders an image.  However,
the user would like to use a 256 color image LUT, which mimics a rainbow from red to magenta.  The
contents of the LUT would be as follows.  The only difference between
the table below and the one in example 12 is that an image LUT need
not worry about background/foreground colors.  Hence the first two
entries can be a part of the whole color continuum.

.nf
	# 256 rainbow colormap for psikern for images
	#
	# Each color component is specfied from units of 0. (no color) 
	# to 1. (full color)
	#
	# The columns are:
	# Index	red	green	blue    name (optional)
	#
	# Colors 0-255 define the 256 color rainbow.  Since psikern will
	# interpolate for missing colors, we need only define 
	# "control" colors.
	#
	0	1.	0.	0.	red
	51	1.	1.	0.	yellow
	102	0.	1.	0.	green
	153	0.	1.	1.	cyan
	204	0.	0.	1.	blue
	255	1.	0.	1.	magenta
.fi

This table would be used as a new graphcap entry which defines the
"LI" parameter:

.nf
	psi_256colorimage|PostScript with 256 color image LUT:\
		:LI="image256rainbow":tc=psi_def:
.fi

Or, the table could be specified in the "image_lut" parameter of
psikern itself:

.nf
	cl> igi <image.igi >G igi.gki
	cl> psikern igi.gki device=apsikerndevice\
	image_lut="image256rainbow"
.fi

The following examples demonstrate SPP code to use the GIO escape
codes to modify the output from psikern.

14. Download an arbitrary string of PostScript to the kernel.  This
example just downloads some point and drawing commands.

.nf
        include <psiescape.h>
        ...
        short  sarray[SZ_LINE]
        string pscode "save 100 100 moveto 0 50 rlineto stroke restore"
        ...
        call achtcs (pscode, sarray, strlen(pscode))
        call gescape (gp, PS_CODE, sarray, strlen(pscode))
.fi

15. Download a new set of image lookup tables.

.nf
        include <psiescape.h>
        ...
        short   red_lut[PS_IMAGE_LUT_SIZE],
        short   green_lut[PS_IMAGE_LUT_SIZE]
        short   blue_lut[PS_IMAGE_LUT_SIZE]
        ...
        # Fill the LUT arrays.
        ...
        call gescape (gp, PS_IMAGE_RED_LUT,   red_lut,   PS_IMAGE_LUT_SIZE)
        call gescape (gp, PS_IMAGE_GREEN_LUT, green_lut, PS_IMAGE_LUT_SIZE)
        call gescape (gp, PS_IMAGE_BLUE_LUT,  blue_lut,  PS_IMAGE_LUT_SIZE)
.fi

16. Download a new set of graphics lookup tables.

.nf
        include <psiescape.h>
        ...
        short   red_lut[PS_GR_LUT_SIZE],
        short   green_lut[PS_GR_LUT_SIZE]
        short   blue_lut[PS_GR_LUT_SIZE]
        ...
        # Fill the LUT arrays.
        ...
        call gescape (gp, PS_GR_RED_LUT,   red_lut,   PS_GR_LUT_SIZE)
        call gescape (gp, PS_GR_GREEN_LUT, green_lut, PS_GR_LUT_SIZE)
        call gescape (gp, PS_GR_BLUE_LUT,  blue_lut,  PS_GR_LUT_SIZE)
.fi

17. Change the font name associated with the GIO Roman font.

.nf
        include <psiescape.h>
        ...
        short   sarray[SZ_LINE]
        ...
        call achtcs ("Courier", sarray, strlen("Courier"))
        call gescape (gp, PS_ROMAN_FONT, sarray, strlen("Courier"))
.fi

18. Change the text writing mode from Variable spaced to Mono-spaced
and back.

.nf
        include <psiescape.h>
        ...
        short   flag
        ...
        call gtext (gp, ...
        ...
        flag = NO
        call gescape (gp, PSI_VARIABLE_SPACE, flag, 1)
        ...
        call gtext (gp, ...
        ...
        flag = YES
        call gescape (gp, PSI_VARIABLE_SPACE, flag, 1)
        ...
        call gtext (gp, ...
.fi

19. Change the size of the dots, dashes, and spaces of the line
patterns.

.nf
        include <psiescape.h>
        ...
        short dash_size, dot_size, space_size
        ...
        dash_size  = 400
        dot_size   = 40
        space_size = 200
        call gescape (gp, PS_DASH,  dash_size,  1)
        call gescape (gp, PS_DOT,   dot_size,   1)
        call gescape (gp, PS_SPACE, space_size, 1)
.fi

20. Add a fill pattern, 6,  that is a horizontal line pattern (same as
pattern 4 in the default system).

.nf
        include <psiescape.h>
        ...
        short sarray[PS_FILL_SIZE]
        real x[5], y[5]         # Boundaries of the fill box.
        ...
        sarray[1] = 6           # Fill pattern 6.
        sarray[2] = 0ffx
        sarray[3] = 0
        sarray[4] = 0
        sarray[5] = 0
        sarray[6] = 0ffx
        sarray[7] = 0
        sarray[8] = 0
        sarray[9] = 0
        call gescape (gp, PS_FILL_PATTERN, sarray, PS_FILL_SIZE)
        # Now use it.
        call gfill (gp, x, y, 6)
.fi

21.  Change both the image and graphics lookup tables.

.nf
        include <psiescape.h>
        ...
        short  sarray[SZ_LINE]
	char   carray[SZ_LINE]
        ...
	call clgstr ("image_lut", carray, SZ_LINE
	l = strlen (carray)
        call achtcs (carray, sarray, l)
        call gescape (gp, PS_IMAGE_LUT, sarray, l)
	...
	call clgstr ("graphics_lut", carray, SZ_LINE
	l = strlen (carray)
        call achtcs (carray, sarray, l)
        call gescape (gp, PS_GRAPHICS_LUT, sarray, l)
.fi
.ih
BUGS
The kernel does not recognize changes in the txspacing.
.ih
SEE ALSO
stdgraph, stdplot, gio$doc/gio.hlp
.endhelp
