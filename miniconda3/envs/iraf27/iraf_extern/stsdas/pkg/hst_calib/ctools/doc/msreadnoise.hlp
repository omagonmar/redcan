.help msreadnoise Mar97 stsdas.hst_calib.ctools
.ih
NAME
msreadnoise -- NICMOS/STIS readout noise tool
.ih
USAGE
msreadnoise input1 input2 output
.ih
DESCRIPTION
This task generates the NOISE readout noise reference file for the
CALNICA NICMOS calibration pipeline software. It also generates a
similar file in STIS format with the READNSE keyword in the primary 
header.

The algorithm processes images which are the difference between 
short-exposure dark images (each difference is the difference between 
darks with the same exposure time), and determines the standard deviation 
on a pixel by pixel basis on the ensemble of the differences (i.e. the
standard deviation around the mean, which, for the differences, should be 
close to zero). This determination includes an optional sigma-clip cleaning 
step, as well as an optional histogram clipping procedure, to get rid of 
cosmic rays and other outliers. The standard deviation on the differences 
(if the darks are short enough that Poisson noise on the dark current is 
much less than the read noise), will be 
.nf

s.d = sqrt (2 * readnoise**2)

.fi
The use of differences, rather than the darks directly, allows the 
processing of pairs with different exposure times from one pair to the 
next. The lingering hypothesis is that the read-out noise dominates over the
Poisson noise of the dark current.

The optional histogram cleaning procedure consists in sorting the pixel 
values from all difference images at each x,y position, and clipping 
off a given fraction of them at both the high and low extremes.
If selected, this operation is carried out before the sigma-clip
algorithm is applied to the same pixel values.

The input images must be fed to the task in the form of two matching
lists of NICMOS os STIS files. IMSETs in each input file must follow the 
standard NICMOS/STIS FITS format, with either 5 (NICMOS) or 3 (STIS) 
HDUs per EXTVER number. Either ACCUM or MULTIACCUM 
files can be fed to the task, but only IMSETs which have the EXTVER 
keyword equal to the value of task parameter 'extver' will be read. 
The default 'extver' is 1, thus the default action is to read the last 
readout in a MULTIACCUM file. By selecting other values for 'extver' it 
is possible to select readouts that lie closer to the exposure starting 
time.

Only the science HDU (SCI) in each input IMSET is read by the task, the 
remaining HDUs being ignored. No image sections are supported, as well 
as no extension constructs in file names (as e.g. [SCI,1]).

The task builds the difference images that are fed to the processing 
algorithm by subtracting paired IMSETs from the two lists. Thus, IMSETs 
in any given pair must have the same exposure time. The task checks the 
SAMPTIME (NICMOS) or EXPTIME (STIS) keyword, taken from the SCI HDU header 
in each input IMSET pair, to see if the input lists are properly matched. 
It is the user's responsibility to supply properly matched lists to the 
task. To help in the process of building the lists, the task can be run 
with the 'process' parameter set to "no". In this case the task just reads 
the two lists and checks them, skipping the subsequent processing steps.

Input files are checked for the presence of the following header keywords: 
.nf

NICMOS: INSTRUME, CAMERA, FILTER, READOUT and NREAD
STIS:   INSTRUME, TARGNAME, OPMODE and CCDGAIN

.fi
Values of these keywords should be the same in all files in the input 
list. The FILTER keyword in NICMOS files must have the value "BLANK".
The TARGNAME keyword in STIS files must have either the value "BIAS" or
"DARK". The science array's axis sizes are also checked against the value 
expected for a NICMOS raw IMSET (256 sq.) or STIS IMSET (1024 sq.).
The task aborts if an invalid file is found.

The main output product is, in the NICMOS case, a single-IMSET NICMOS file
with only the SCI HDU populated with the read-out noise values generated by 
the algorithm. Pixels in the remaining HDUs are zeroed. In the STIS case a 
similar STIS file is generated, with the READNSE keyword added into the 
primary header. This keyword contains the read-out noise average value 
from all pixels in the SCI HDU. HISTORY keywords are added to the primary 
header in both NICMOS and STIS cases.

When generating the output read-out noise value at a given pixel position,
the algorithm needs to keep that pixel's value from all input difference
images in memory at the same time. To maximize efficiency, the task
processes a "block" of image lines at a time. The size of this block
is determined at run time based on the number of input IMSET pairs,
the X axis size of each image, and the amount of available memory. This
last quantity is supplied by  the 'memory' task parameter. The user can 
maximize throughput by setting this parameter to a value roughly similar,
or somewhat smaller, than the amount of physical (not total) memory on the 
system. If set to a too small value, only a small part of each image will
be stored in memory at each time, which generates a large amount of file 
open/close operations and maybe across-network data transfers. If set to a 
too large value, a large piece of each image will be kept in memory at any
given time, but virtual memory paging will be used too often. The goal thus 
is to minimize the amount of file open/close operations and across-network 
data transfers but without a large penalty from memory swapping.

The task is written in C and can be easily re-built to be run as a 
stand-alone program under the native operating system. In this mode it 
provides a command line interface for setting up parameter values.
.ih
PARAMETERS
.ls input1 = "" [file name list/template]
First list/template with input dark exposures.
.le
.ls input2 = "" [file name list/template]
Second (matched) list/template with input dark exposures.
.le
.ls output = "" [file]
Name of the output NOISE reference file. It must have a ".fits" or ".fit" 
extension.
.le
.ls (kclip = 4.0) [real, min = 0.0]
Threshold for the sigma-clipping algorithm.
.le
.ls (nclip = 0) [int, min = 0]
Number of sigma-clipping iterations. If set to zero sigma-clipping is 
turned off.
.le
.ls (cleanfrac = 0.0) [real, min = 0.0, max = 1.0]
Fraction of pixels that are clipped off by the histogram
cleaning algorithm. Half of these are taken from the upper histogram wing,
and half from the lower wing. This ensures that the average is not disturbed
in case there are *no* outliers. If set to zero, histogram
cleaning is disabled.
.le
.ls (extver = 1) [int, min = 1]
Value of EXTVER keyword to look for in input files.
.le
.ls (memory = 20) [int, min=1]
Available memory for holding data (in Mbytes). For optimal performance,
this should be set to a value comparable (50 - 80 percent) to the total 
amount of *physical* memory in the system.
.le
.ls (process = yes) [boolean]
Process input files ? If set to "no", the task only checks input file
consistency.
.le
.ls (verbose = yes) [boolean]
Print out messages as the task progresses ?
.le
.ih
EXAMPLES
1. Produce a NOISE NICMOS file based on two lists of dark exposures 
in the local directory. Use 2 sigma-clip iterations. Task is run in a
64 Mbyte machine. Redirect output messages to the file 'rn.log' and run 
in the background.

.nf
> readnoi d1_*_raw.fit d2_*_raw.fit noise.fit nclip=2 mem=50 >& rn.log &
.fi
.ih
REFERENCE
.ih
BUGS
.ih
REFERENCES
This task was written by I. Busko.
.ih
SEE ALSO
.endhelp
