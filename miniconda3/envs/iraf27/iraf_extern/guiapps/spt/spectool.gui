# SPECTOOL.GUI -- Spectral Analysis Tool

reset-server
appInitialize spectool Spectool {
    *objects:\
	toplevel	Layout		mainLayout\
	toplevel	TopLevelShell	cntrlShell\
	toplevel	TopLevelShell	viewShell\
	toplevel	TopLevelShell	gtShell\
	toplevel	TopLevelShell	gtLabelsShell\
	toplevel	TopLevelShell	gtAxesShell\
	toplevel	TopLevelShell	gtTicksShell\
	toplevel	TopLevelShell	helpShell\
	toplevel	TopLevelShell	regShell\
	toplevel	TopLevelShell	readShell\
	toplevel	TopLevelShell	saveShell\
	toplevel	TopLevelShell	rvShell\
	toplevel	TopLevelShell	ctrShell\
	toplevel	TopLevelShell	labelShell\
	toplevel	TopLevelShell	llabShell\
	toplevel	TopLevelShell	lidsShell\
	toplevel	TopLevelShell	llShell\
	toplevel	TopLevelShell	modShell\
	toplevel	TopLevelShell	eqwShell\
	toplevel	TopLevelShell	errShell\
	toplevel	TopLevelShell	arithShell\
	toplevel	TopLevelShell	logShell\
	toplevel	TopLevelShell	stackShell\
	toplevel	TopLevelShell	statShell\
	toplevel	TopLevelShell	deredShell\
	toplevel	TopLevelShell	printShell\
	toplevel	TopLevelShell	sclipShell\
	toplevel        TopLevelShell	icShell\
\
	toplevel	TransientShell	flistShell\
	toplevel	TransientShell	dialogShell\
	toplevel	Parameter	params\
\
	mainLayout	Parameter	ready\
	mainLayout	Frame		mainMBFrame\
	mainLayout	Frame		mainGTFrame\
	mainMBFrame	Layout		mainMenuBar\
	mainMenuBar	MenuButton	fileButton\
	mainMenuBar	MenuButton	viewButton\
	mainMenuBar	MenuButton	editButton\
	mainMenuBar	MenuButton	analyzeButton\
	mainMenuBar	Command		helpButton\
	mainGTFrame	Gterm		gterm1\
\
	cntrlShell	Layout		cntrlPanel\
	cntrlPanel	Frame		cntrlMBFrame\
	cntrlPanel	Layout		cntrlButtons\
	cntrlMBFrame	Layout		cntrlMenuBar\
	cntrlMenuBar	Command		cntrlHelp\
	cntrlMenuBar	Command		cntrlDismiss\
	cntrlButtons	Toggle		panToggle\
	cntrlButtons	Toggle		wcsToggle\
	cntrlButtons	Toggle		labelToggle\
	cntrlButtons	Toggle		lineToggle\
	cntrlButtons	Toggle		modToggle\
	cntrlButtons	Toggle		allToggle\
	cntrlButtons	Toggle		oplotToggle\
	cntrlButtons	Toggle		stackToggle\
	cntrlButtons	Toggle		xflipToggle\
	cntrlButtons	Toggle		yflipToggle\
	cntrlButtons	Toggle		zeroToggle\
	cntrlButtons	Toggle		specToggle\
	cntrlButtons	Toggle		contToggle\
	cntrlButtons	Toggle		rawToggle\
	cntrlButtons	Toggle		skyToggle\
	cntrlButtons	Toggle		sigToggle\
	cntrlButtons	Command		nextButton\
	cntrlButtons	Command		previousButton\
\
	viewShell	Layout		viewLayout\
	viewLayout	Frame		viewMBFrame\
	viewLayout	Frame		viewFormFrame\
	viewLayout	Frame		viewGTFrame\
	viewMBFrame	Layout		viewMenuBar\
	viewMenuBar	Command		viewFull\
	viewMenuBar	Command		viewHelp\
	viewMenuBar	Command		viewDismiss\
	viewFormFrame	Layout		viewForm\
	viewForm	Form		viewLeftForm\
	viewForm	AsciiText	viewLeftValue\
	viewForm	Form		viewRightForm\
	viewForm	AsciiText	viewRightValue\
	viewForm	Form		viewTopForm\
	viewForm	AsciiText	viewTopValue\
	viewForm	Form		viewBottomForm\
	viewForm	AsciiText	viewBottomValue\
	viewForm	Form		viewHClipForm\
	viewForm	AsciiText	viewHClipValue\
	viewForm	Form		viewLClipForm\
	viewForm	AsciiText	viewLClipValue\
	viewForm	Form		viewBufForm\
	viewForm	AsciiText	viewBufValue\
	viewLeftForm	Label		viewLeftLabel\
	viewRightForm	Label		viewRightLabel\
	viewTopForm	Label		viewTopLabel\
	viewBottomForm	Label		viewBottomLabel\
	viewHClipForm	Label		viewHClipLabel\
	viewLClipForm	Label		viewLClipLabel\
	viewBufForm	Label		viewBufLabel\
	viewGTFrame	Gterm		gterm2\
\
	dialogShell	Layout		dialogLayout\
	dialogLayout	Frame		dialogMBFrame\
	dialogLayout	Frame		dialogFrame\
	dialogMBFrame	Layout		dialogMB\
	dialogMB	Command		dialogExec\
	dialogMB	Command		dialogHelp\
	dialogMB	Command		dialogDismiss\
	dialogFrame	Layout		dialog\
	dialog		Label		dialogLabel\
	dialog		AsciiText	dialogValue\
\
	helpShell	Parameter	help\
	helpShell	Parameter	showhelp\
	helpShell	Layout		helpLayout \
	helpLayout	Layout		helpMenuLayout \
	helpLayout	Frame		helpTextFrame\
	helpMenuLayout	Command		helpBack \
	helpMenuLayout	Command		helpForward \
	helpMenuLayout	Command		helpHome \
	helpMenuLayout	Command		helpTutorial \
	helpMenuLayout	Command		helpDismiss \
	helpTextFrame	HTML            helpText \
	helpLayout      Label           hfLabel\
	helpLayout      Frame           hfindFrame\
	hfindFrame      AsciiText       hfEntry\
	helpLayout      Command         hfFind\
	helpLayout      Command         hfClear\
	helpLayout      TextToggle      hfDir\
	helpLayout      TextToggle      hfCase\
\
	regShell	Layout		regLayout\
	regLayout	Frame		regMBFrame\
	regLayout	Layout		regForm\
	regLayout	Layout		regVLayout\
	regMBFrame	Layout		regMBLayout\
	regMBLayout	Layout		regMenuBar\
	regMenuBar	Command		regClear\
	regMenuBar	Command		regHelp\
	regMenuBar	Command		regDismiss\
	regForm		Form		regForm1\
	regForm		Form		regForm5\
	regForm		Form		regForm6\
	regForm1	Label		regLabel\
	regForm1	AsciiText	regValue\
	regForm5	Label		regTypeLabel\
	regForm5	MenuButton	regType\
	regForm6	Label		regColorLabel\
	regForm6	MenuButton	regColor\
	regVLayout	Viewport	regView\
	regVLayout	TextBox		regListHelp\
	regView		List		regList\
\
	flistShell	Layout		flistLayout\
	flistLayout	Frame		flistMBFrame\
	flistLayout	Layout		flistForm\
	flistLayout	Viewport	flistView\
\
	flistMBFrame	Layout		flistMBLayout\
	flistMBLayout	Layout		flistMenuBar\
	flistMenuBar	Command		flistApply\
	flistMenuBar	Command		flistHelp\
	flistMenuBar	Command		flistCancel\
\
	flistForm	Label		flistLabel\
	flistForm	AsciiText	flistFile\
	flistForm	Label		flistDirLabel\
	flistForm	AsciiText	flistDir\
	flistForm	Label		flistTempLabel\
	flistForm	AsciiText	flistTemplate\
	flistView	List		flistList\
\
	readShell	Layout		readLayout\
	readLayout	Frame		readMBFrame\
	readLayout	Layout		readImLayout\
	readLayout	Layout		readForm\
\
	readMBFrame	Layout		readMBLayout\
	readMBLayout	Layout		readMenuBar\
	readMenuBar	Command		readHelp\
	readMenuBar	Command		readDismiss\
\
	readImLayout	Layout		readImForm\
	readImLayout	Frame		readVFrame\
\
	readImForm	Label		readDirLabel\
	readImForm	AsciiText	readDir\
	readImForm	Label		readImLabel\
	readImForm	AsciiText	readImages\
	readVFrame	Paned		readViews\
	readViews	Viewport	readImView\
	readViews	Viewport	readView\
	readImView	List		readImList\
	readView	List		readList\
\
	readForm	Form		readForm1\
	readForm	Form		readForm2\
	readForm	Form		readForm3\
	readForm	Form		readForm4\
	readForm1	Label		readImageLabel\
	readForm1	AsciiText	readImage\
	readForm2	Label		readApLabel\
	readForm2	AsciiText	readAp\
	readForm3	Label		readAxisLabel\
	readForm3	AsciiText	readAxis\
	readForm4	Label		readNsumLabel\
	readForm4	AsciiText	readNsum\
\
	gtShell		Parameter	gtvalues\
	gtShell		Parameter	gtwcs\
	gtShell		Layout		gtLayout\
	gtLayout	Frame		gtMBFrame\
	gtLayout	Layout		gtForm\
\
	gtMBFrame	Layout		gtMenuBar\
	gtMenuBar	Command		gtApply\
	gtMenuBar	Command		gtHelp\
	gtMenuBar	Command		gtDismiss\
\
	gtForm		Form		gt_Type\
	gtForm		Form		gt_EType\
	gtForm		Form		gt_Color\
	gtForm		Form		gt_Symsize\
\
	gt_Type		Label		gtLType\
	gt_Type		MenuButton	gtBType\
	gt_EType	Label		gtLEType\
	gt_EType	MenuButton	gtEType\
	gt_Color	Label		gtLColor\
	gt_Color	MenuButton	gtBColor\
	gt_Symsize	Label		gtLSymsize\
	gt_Symsize	AsciiText	gtXSymsize\
	gt_Symsize	AsciiText	gtYSymsize\
\
	gtLabelsShell	Layout		gtLabelsLayout\
	gtLabelsLayout	Frame		gtLabelsMBFrame\
	gtLabelsLayout	Layout		gt_Labels\
\
	gtLabelsMBFrame	Layout		gtLabelsMenuBar\
	gtLabelsMenuBar	Command		gtLabelsApply\
	gtLabelsMenuBar	Command		gtLabelsHelp\
	gtLabelsMenuBar	Command		gtLabelsDismiss\
\
	gt_Labels	Form		gt_Sysid\
	gt_Labels	Form		gt_Title\
	gt_Labels	Form		gt_Subtitle\
	gt_Labels	Form		gt_Titlecolor\
	gt_Labels	Form		gt_Label\
	gt_Labels	Form		gt_Units\
	gt_Labels	Form		gt_Axislabcolor\
\
	gt_Sysid	Label		gtLSysid\
	gt_Sysid	Command		gtBSysid\
	gt_Title	Label		gtLTitle\
	gt_Title	AsciiText	gtBTitle\
	gt_Subtitle	Label		gtLSubtitle\
	gt_Subtitle	AsciiText	gtBSubtitle\
	gt_Titlecolor	Label		gtLTitlecolor\
	gt_Titlecolor	MenuButton	gtBTitlecolor\
	gt_Label	Label		gtLLabel\
	gt_Label	AsciiText	gtXLabel\
	gt_Label	AsciiText	gtYLabel\
	gt_Units	Label		gtLUnits\
	gt_Units	AsciiText	gtXUnits\
	gt_Units	AsciiText	gtYUnits\
	gt_Axislabcolor	Label		gtLAxislabcolor\
	gt_Axislabcolor	MenuButton	gtXAxislabcolor\
	gt_Axislabcolor	MenuButton	gtYAxislabcolor\
\
	gtAxesShell	Layout		gtAxesLayout\
	gtAxesLayout	Frame		gtAxesMBFrame\
	gtAxesLayout	Layout		gt_Axes\
\
	gtAxesMBFrame	Layout		gtAxesMenuBar\
	gtAxesMenuBar	Command		gtAxesApply\
	gtAxesMenuBar	Command		gtAxesHelp\
	gtAxesMenuBar	Command		gtAxesDismiss\
\
	gt_Axes		Form		gt_View1\
	gt_Axes		Form		gt_View2\
	gt_Axes		Form		gt_Drawaxes\
	gt_Axes		Form		gt_Axiswidth\
	gt_Axes		Form		gt_Axistype\
	gt_Axes		Form		gt_Axiscolor\
	gt_Axes		Form		gt_Drawgrid\
	gt_Axes		Form		gt_Gridcolor\
	gt_Axes		Form		gt_Framecolor\
\
	gt_View1	Label		gtLView1\
	gt_View1	AsciiText	gtXView1\
	gt_View1	AsciiText	gtYView1\
	gt_View2	Label		gtLView2\
	gt_View2	AsciiText	gtXView2\
	gt_View2	AsciiText	gtYView2\
	gt_Drawaxes	Label		gtLDrawaxes\
	gt_Drawaxes	MenuButton	gtXDrawaxes\
	gt_Drawaxes	MenuButton	gtYDrawaxes\
	gt_Axiswidth	Label		gtLAxiswidth\
	gt_Axiswidth	AsciiText	gtXAxiswidth\
	gt_Axiswidth	AsciiText	gtYAxiswidth\
	gt_Axistype	Label		gtLAxistype\
	gt_Axistype	MenuButton	gtXAxistype\
	gt_Axistype	MenuButton	gtYAxistype\
	gt_Axiscolor	Label		gtLAxiscolor\
	gt_Axiscolor	MenuButton	gtXAxiscolor\
	gt_Axiscolor	MenuButton	gtYAxiscolor\
	gt_Drawgrid	Label		gtLDrawgrid\
	gt_Drawgrid	Command		gtXDrawgrid\
	gt_Drawgrid	Command		gtYDrawgrid\
	gt_Gridcolor	Label		gtLGridcolor\
	gt_Gridcolor	MenuButton	gtXGridcolor\
	gt_Gridcolor	MenuButton	gtYGridcolor\
	gt_Framecolor	Label		gtLFramecolor\
	gt_Framecolor	MenuButton	gtBFramecolor\
\
	gtTicksShell	Layout		gtTicksLayout\
	gtTicksLayout	Frame		gtTicksMBFrame\
	gtTicksLayout	Layout		gt_Ticks\
\
	gtTicksMBFrame	Layout		gtTicksMenuBar\
	gtTicksMenuBar	Command		gtTicksApply\
	gtTicksMenuBar	Command		gtTicksHelp\
	gtTicksMenuBar	Command		gtTicksDismiss\
\
	gt_Ticks	Form		gt_Drawticks\
	gt_Ticks	Form		gt_Nmajor\
	gt_Ticks	Form		gt_Nminor\
	gt_Ticks	Form		gt_Labelticks\
	gt_Ticks	Form		gt_Format\
	gt_Ticks	Form		gt_Ticklabcolor\
\
	gt_Drawticks	Label		gtLDrawticks\
	gt_Drawticks	Command		gtXDrawticks\
	gt_Drawticks	Command		gtYDrawticks\
	gt_Nmajor	Label		gtLNmajor\
	gt_Nmajor	AsciiText	gtXNmajor\
	gt_Nmajor	AsciiText	gtYNmajor\
	gt_Nminor	Label		gtLNminor\
	gt_Nminor	AsciiText	gtXNminor\
	gt_Nminor	AsciiText	gtYNminor\
	gt_Labelticks	Label		gtLLabelticks\
	gt_Labelticks	Command		gtXLabelticks\
	gt_Labelticks	Command		gtYLabelticks\
	gt_Format	Label		gtLFormat\
	gt_Format	AsciiText	gtXFormat\
	gt_Format	AsciiText	gtYFormat\
	gt_Ticklabcolor	Label		gtLTicklabcolor\
	gt_Ticklabcolor	MenuButton	gtXTicklabcolor\
	gt_Ticklabcolor	MenuButton	gtYTicklabcolor\
\
	llShell		Parameter	llpars\
	llShell		Parameter	linelist\
	llShell		Layout		llLayout\
	llLayout	Frame		llMBFrame\
	llLayout	Layout		llValues\
	llLayout	Layout		llParams\
	llLayout	Viewport	llListView\
	llLayout	TextBox		llListHelp\
	llMBFrame	Layout		llMenuBar\
	llMenuBar	MenuButton	llFile\
	llMenuBar	Command		llMark\
	llMenuBar	Label		llLab\
	llMenuBar	AsciiText	llLinelist\
	llMenuBar	Command		llHelp\
	llMenuBar	Command		llDismiss\
	llValues	Label		llLineLab\
	llValues	TextBox		llLine\
	llParams	Label		llSepLabel\
	llParams	AsciiText	llSepValue\
	llParams	Label		llMinSepLabel\
	llParams	AsciiText	llMinSep\
	llListView	List		llList\
\
	labelShell	Parameter	labelset\
	labelShell	Parameter	labellist\
	labelShell	Layout		labelLayout\
	labelLayout	Frame		labelMBFrame\
	labelLayout	Layout		labelParams\
	labelMBFrame	Layout		labelMenuBar\
	labelMenuBar	Toggle		labelShow\
	labelMenuBar	Toggle		labelAll\
	labelMenuBar	Toggle		labelDraw\
	labelMenuBar	Command		labelHelp\
	labelMenuBar	Command		labelDismiss\
	labelParams	Label		labelLabelLab\
	labelParams	AsciiText	labelLabel\
	labelParams	Label		labelXLab\
	labelParams	AsciiText	labelX\
	labelParams	Label		labelYLab\
	labelParams	AsciiText	labelY\
	labelParams	Label		labelType\
	labelParams	Layout		labelTypes\
	labelParams	Label		labelFormat\
	labelParams	Layout		labelFormats\
	labelParams	Label		labelColorLabel\
	labelParams	MenuButton	labelColor\
	labelParams	Frame		labelVFrame\
	labelVFrame	Layout		labelVLayout\
	labelVLayout	Viewport	labelView\
	labelView	List		labelList\
	labelVLayout	TextBox		labelListHelp\
	labelTypes	TextToggle	labelSpec\
	labelTypes	TextToggle	labelGraph\
	labelFormats	TextToggle	labelVert\
	labelFormats	TextToggle	labelHoriz\
	labelFormats	TextToggle	labelOther\
	labelFormats	AsciiText	labelOtherVal\
\
	llabShell	Layout		llabLayout\
	llabLayout	Frame		llabMBFrame\
	llabLayout	Layout		llabValues\
	llabLayout	Layout		llabParams\
	llabMBFrame	Layout		llabMenuBar\
	llabMenuBar	Toggle		llabShow\
	llabMenuBar	Toggle		llabAll\
	llabMenuBar	Toggle		llabDraw\
	llabMenuBar	Command		llabHelp\
	llabMenuBar	Command		llabDismiss\
	llabValues	Label		llabLineLab\
	llabValues	TextBox		llabLine\
	llabParams	Label		llabPos\
	llabParams	TextToggle	llabAbove\
	llabParams	TextToggle	llabBelow\
	llabParams	Label		llabY1\
	llabParams	AsciiText	llabY2\
	llabParams	Label		llabLab\
	llabParams	TextToggle	llabObs\
	llabParams	TextToggle	llabRef\
	llabParams	TextToggle	llabId\
	llabParams	Label		llabTicks\
	llabParams	TextToggle	llabTick\
	llabParams	TextToggle	llabArrow\
	llabParams	TextToggle	llabBand\
	llabParams	Label		llabFormat\
	llabParams	Layout		llabFormats\
	llabParams	Label		llabColorLabel\
	llabParams	MenuButton	llabColor\
	llabFormats	TextToggle	llabVert\
	llabFormats	TextToggle	llabHoriz\
	llabFormats	TextToggle	llabOther\
	llabFormats	AsciiText	llabOtherVal\
\
	lidsShell	Layout		lidsLayout\
	lidsLayout	Frame		lidsMBFrame\
	lidsLayout	Layout		lidsValues\
	lidsLayout	Layout		lidsVLayout\
	lidsMBFrame	Layout		lidsMenuBar\
	lidsMenuBar	MenuButton	lidsFile\
	lidsMenuBar	Toggle		lidsAll\
	lidsMenuBar	Command		lidsHelp\
	lidsMenuBar	Command		lidsDismiss\
	lidsValues	Label		lidsLineLab\
	lidsValues	TextBox		lidsLine\
	lidsVLayout	Form		lids_Center\
	lidsVLayout	Form		lids_Reference\
	lidsVLayout	Form		lids_Lower\
	lidsVLayout	Form		lids_Upper\
	lidsVLayout	Form		lids_Label\
	lidsVLayout	Viewport	lidsView\
	lidsVLayout	TextBox		lids_ListHelp\
	lids_Center	Label		lids_CenterLab\
	lids_Center	AsciiText	lids_CenterVal\
	lids_Reference	Label		lids_ReferencLab\
	lids_Reference	AsciiText	lids_ReferenceVal\
	lids_Lower	Label		lids_LowerLab\
	lids_Lower	AsciiText	lids_LowerVal\
	lids_Upper	Label		lids_UpperLab\
	lids_Upper	AsciiText	lids_UpperVal\
	lids_Label	Label		lids_LabelLab\
	lids_Label	AsciiText	lids_LabelVal\
	lidsView	List		lids_List\
\
	ctrShell	Parameter	ctrpars\
	ctrShell	Layout		ctrLayout\
	ctrLayout	Frame		ctrMBFrame\
	ctrLayout	Layout		ctrValues\
	ctrLayout	Layout		ctrParams\
	ctrMBFrame	Layout		ctrMenuBar\
	ctrMenuBar	Toggle		ctrAll\
	ctrMenuBar	Command		ctrCenter\
	ctrMenuBar	Command		ctrHelp\
	ctrMenuBar	Command		ctrDismiss\
	ctrValues	Label		ctrLineLab\
	ctrValues	TextBox		ctrLine\
	ctrParams	Label		ctrWidthLab\
	ctrParams	AsciiText	ctrWidthVal\
	ctrParams	Label		ctrRadiusLab\
	ctrParams	AsciiText	ctrRadiusVal\
	ctrParams	Group		ctrCtypes\
	ctrParams	Group		ctrPtypes\
	ctrCtypes	TextToggle	ctrCtype1\
	ctrCtypes	TextToggle	ctrCtype2\
	ctrCtypes	TextToggle	ctrCtype3\
	ctrCtypes	TextToggle	ctrCtype4\
	ctrCtypes	TextToggle	ctrCtype5\
	ctrPtypes	TextToggle	ctrPtype1\
	ctrPtypes	TextToggle	ctrPtype2\
	ctrPtypes	TextToggle	ctrPtype3\
\
	rvShell		Parameter	rvvel\
	rvShell		Parameter	rvresults\
	rvShell		Layout		rvLayout\
	rvLayout	Frame		rvMBFrame\
	rvLayout	Layout		rvParams\
	rvMBFrame	Layout		rvMenuBar\
	rvMenuBar	Command		rvDeredshift\
	rvMenuBar	Command		rvVel\
	rvMenuBar	Command		rvClear\
	rvMenuBar	Command		rvHelp\
	rvMenuBar	Command		rvDismiss\
	rvParams	Label		rvVobsLabel\
	rvParams	AsciiText	rvVobs\
	rvParams	Label		rvZobsLabel\
	rvParams	AsciiText	rvZobs\
	rvParams	Label		rvVhelioLabel\
	rvParams	AsciiText	rvVhelio\
	rvParams	Label		rvZhelioLabel\
	rvParams	AsciiText	rvZhelio\
	rvParams	AsciiText	rvText\
\
	modShell	Parameter	modpars\
	modShell	Parameter	modvalues\
	modShell	Parameter	modplot\
	modShell	Layout		modLayout\
	modLayout	Frame		modMBFrame\
	modLayout	Layout		modValues\
	modLayout	Layout		modParams\
	modMBFrame	Layout		modMenuBar\
	modMenuBar	Toggle		modShow\
	modMenuBar	Toggle		modAll\
	modMenuBar	Command		modFit\
	modMenuBar	Toggle		modDraw\
	modMenuBar	Toggle		modSub\
	modMenuBar	Command		modHelp\
	modMenuBar	Command		modDismiss\
	modValues	Label		modLineLab\
	modValues	TextBox		modLine\
	modValues	Form		modProf\
	modValues	Form		modCen\
	modValues	Form		modPeak\
	modValues	Form		modGFWHM\
	modValues	Form		modLFWHM\
	modValues	Form		modCont\
	modValues	Form		modSlope\
	modValues	Form		modLow\
	modValues	Form		modUp\
	modValues	Form		modFlux\
	modValues	Form		modEqw\
	modProf		Label		modProfLab\
	modProf		MenuButton	modProfVal\
	modCen		Label		modCenLab\
	modCen		AsciiText	modCenVal\
	modPeak		Label		modPeakLab\
	modPeak		AsciiText	modPeakVal\
	modGFWHM	Label		modGFWHMLab\
	modGFWHM	AsciiText	modGFWHMVal\
	modLFWHM	Label		modLFWHMLab\
	modLFWHM	AsciiText	modLFWHMVal\
	modCont		Label		modContLab\
	modCont		AsciiText	modContVal\
	modSlope	Label		modSlopeLab\
	modSlope	AsciiText	modSlopeVal\
	modLow		Label		modLowLab\
	modLow		TextBox		modLowVal\
	modUp		Label		modUpLab\
	modUp		TextBox		modUpVal\
	modFlux		Label		modFluxLab\
	modFlux		TextBox		modFluxVal\
	modEqw		Label		modEqwLab\
	modEqw		TextBox		modEqwVal\
	modParams	Group		modToggles\
	modToggles	TextToggle	modPos\
	modToggles	TextToggle	modInt\
	modToggles	TextToggle	modBkg\
	modToggles	TextToggle	modGFWHMTog\
	modToggles	TextToggle	modLFWHMTog\
	modParams	Group		modConstrain\
	modConstrain	TextToggle	modRelPos\
	modConstrain	TextToggle	modRelGFWHM\
	modConstrain	TextToggle	modEqGFWHM\
	modConstrain	TextToggle	modRelInt\
	modConstrain	TextToggle	modRelLFWHM\
	modConstrain	TextToggle	modEqLFWHM\
	modParams	Group		modPlots\
	modPlots	TextToggle	modPlotProf\
	modPlots	MenuButton	modColor\
	modPlots	TextToggle	modPlotCont\
	modPlots	MenuButton	modContColor\
	modPlots	TextToggle	modPlotSum\
	modPlots	MenuButton	modSumColor\
\
	eqwShell	Parameter	eqwvalues\
	eqwShell	Layout		eqwLayout\
	eqwLayout	Frame		eqwMBFrame\
	eqwLayout	Layout		eqwValues\
	eqwMBFrame	Layout		eqwMenuBar\
	eqwMenuBar	Toggle		eqwAll\
	eqwMenuBar	Command		eqwEqwidth\
	eqwMenuBar	Command		eqwHelp\
	eqwMenuBar	Command		eqwDismiss\
	eqwValues	Label		eqwLineLab\
	eqwValues	TextBox		eqwLine\
	eqwValues	Form		eqwLow\
	eqwValues	Form		eqwUp\
	eqwValues	Form		eqwCen\
	eqwValues	Form		eqwCont\
	eqwValues	Form		eqwFlux\
	eqwValues	Form		eqwEqw\
	eqwLow		Label		eqwLowLab\
	eqwLow		TextBox		eqwLowVal\
	eqwUp		Label		eqwUpLab\
	eqwUp		TextBox		eqwUpVal\
	eqwCen		Label		eqwCenLab\
	eqwCen		TextBox		eqwCenVal\
	eqwCont		Label		eqwContLab\
	eqwCont		TextBox		eqwContVal\
	eqwFlux		Label		eqwFluxLab\
	eqwFlux		TextBox		eqwFluxVal\
	eqwEqw		Label		eqwEqwLab\
	eqwEqw		TextBox		eqwEqwVal\
\
	errShell	Parameter	errpars\
	errShell	Layout		errLayout\
	errLayout	Frame		errMBFrame\
	errLayout	Layout		errForm\
	errMBFrame	Layout		errMenuBar\
	errMenuBar	Command		errApply\
	errMenuBar	Command		errHelp\
	errMenuBar	Command		errDismiss\
	errForm		Form		errErrors\
	errForm		Form		errSamples\
	errForm		Form		errSigma\
	errForm		Form		errSeed\
	errErrors	Label		errErrorsLab\
	errErrors	Command		errErrorsVal\
	errSamples	Label		errSamplesLab\
	errSamples	AsciiText	errSamplesVal\
	errSigma	Label		errSigmaLab\
	errSigma	AsciiText	errSigmaVal\
	errSeed		Label		errSeedLab\
	errSeed		AsciiText	errSeedVal\
\
	arithShell	Parameter	arithreg\
	arithShell	Parameter	arithexpr\
	arithShell	Parameter	arithtypes\
	arithShell	Layout		arithLayout\
	arithLayout	Frame		arithMBFrame\
	arithLayout	Layout		arithForm\
	arithLayout	Frame		arithRegFrame\
	arithMBFrame	Layout		arithMenuBar\
	arithMenuBar	Command		arithHelp\
	arithMenuBar	Command		arithDismiss\
	arithForm	Label		arithTemplateLab\
	arithForm	AsciiText	arithTemplate\
	arithForm	Label		arithOutLab\
	arithForm	AsciiText	arithOut\
	arithForm	Label		arithExprLab\
	arithForm	AsciiText	arithExpr\
	arithForm	Label		arithTypes\
	arithForm	TextToggle	arithSpec\
	arithForm	TextToggle	arithCont\
	arithForm	TextToggle	arithRaw\
	arithForm	TextToggle	arithSky\
	arithForm	TextToggle	arithSig\
	arithRegFrame	Layout		arithRegLayout\
	arithRegLayout	Viewport	arithRegView\
	arithRegLayout	TextBox		arithRegHelp\
	arithRegView	List		arithRegList\
\
	saveShell	Layout		saveLayout\
	saveLayout	Frame		saveMBFrame\
	saveLayout	Layout		saveVLayout\
	saveMBFrame	Layout		saveMenuBar\
	saveMenuBar	MenuButton	saveFile\
	saveMenuBar	Label		saveFileLabel\
	saveMenuBar	AsciiText	saveFilename\
	saveMenuBar	Command		saveHelp\
	saveMenuBar	Command		saveDismiss\
	saveVLayout	Viewport	saveView\
	saveVLayout	TextBox		saveListHelp\
	saveView	List		saveList\
\
	printShell	Layout		printLayout\
	printLayout	Frame		printMBFrame\
	printLayout	Frame		printPFrame\
	printMBFrame	Layout		printMenuBar\
	printMenuBar	Command		printPrint\
	printMenuBar	Command		printPS\
	printMenuBar	Command		printEPS\
	printMenuBar	Command		printScreen\
	printMenuBar	Command		printHelp\
	printMenuBar	Command		printDismiss\
	printPFrame	Layout		printParams\
	printParams	Label		printLabel\
	printParams	AsciiText	printValue\
	printParams	Label		printPSLabel\
	printParams	AsciiText	printPSValue\
	printParams	Label		printEPSLabel\
	printParams	AsciiText	printEPSValue\
	printParams	Label		printWidthLab\
	printParams	AsciiText	printWidthVal\
	printParams	Label		printHeightLab\
	printParams	AsciiText	printHeightVal\
\
	logShell	Parameter	logcmd\
	logShell	Parameter	logadd\
	logShell	Layout		logLayout\
	logLayout	Frame		logMBFrame\
	logLayout	AsciiText	logText\
	logMBFrame	Layout		logMenuBar\
	logMenuBar	MenuButton	logFile\
	logMenuBar	Label		logFileLabel\
	logMenuBar	AsciiText	logFilename\
	logMenuBar	Command		logHelp\
	logMenuBar	Command		logDismiss\
\
	stackShell	Layout		stackLayout\
	stackLayout	Frame		stackMBFrame\
	stackLayout	Layout		stackForm\
	stackMBFrame	Layout		stackMenuBar\
	stackMenuBar	Toggle		stackOverplot\
	stackMenuBar	Toggle		stackStack\
	stackMenuBar	Command		stackHelp\
	stackMenuBar	Command		stackDismiss\
	stackForm	TextToggle	stackValue4\
	stackForm	TextToggle	stackValue5\
	stackForm	Label		stackLabel1\
	stackForm	MenuButton	stackValue1\
	stackForm	Label		stackLabel2\
	stackForm	MenuButton	stackValue2\
	stackForm	Label		stackLabel3\
	stackForm	AsciiText	stackValue3\
\
	statShell	Parameter	statSet\
	statShell	Parameter	statval\
	statShell	Layout		statLayout\
	statLayout	Frame		statMBFrame\
	statLayout	Layout		statRegion\
	statLayout	Layout		statForm\
	statMBFrame	Layout		statMenuBar\
	statMenuBar	Command		statMeasure\
	statMenuBar	Command		statHelp\
	statMenuBar	Command		statDismiss\
	statRegion	Label		statX1Label\
	statRegion	AsciiText	statX1\
	statRegion	Label		statX2Label\
	statRegion	AsciiText	statX2\
	statForm	TextToggle	stat1\
	statForm	TextToggle	stat2\
	statForm	TextToggle	stat3\
	statForm	TextToggle	stat4\
	statForm	TextToggle	stat5\
	statForm	TextToggle	stat6\
	statForm	TextToggle	stat7\
	statForm	TextToggle	stat8\
	statForm	TextToggle	stat9\
	statForm	TextToggle	stat10\
	statForm	TextToggle	stat11\
	statForm	TextToggle	stat12\
	statForm	TextToggle	stat13\
	statForm	TextToggle	stat14\
	statForm	TextBox		stat1val\
	statForm	TextBox		stat2val\
	statForm	TextBox		stat3val\
	statForm	TextBox		stat4val\
	statForm	TextBox		stat5val\
	statForm	TextBox		stat6val\
	statForm	TextBox		stat7val\
	statForm	TextBox		stat8val\
	statForm	TextBox		stat9val\
	statForm	TextBox		stat10val\
	statForm	TextBox		stat11val\
	statForm	TextBox		stat12val\
	statForm	TextBox		stat13val\
	statForm	TextBox		stat14val\
\
	deredShell	Layout		deredLayout\
	deredLayout	Frame		deredMBFrame\
	deredLayout	Frame		deredPFrame\
	deredMBFrame	Layout		deredMenuBar\
	deredMenuBar	Command		deredDered\
	deredMenuBar	Command		deredHelp\
	deredMenuBar	Command		deredDismiss\
	deredPFrame	Layout		deredParams\
	deredParams	Label		deredLabel1\
	deredParams	AsciiText	deredParam1\
	deredParams	Label		deredLabel2\
	deredParams	AsciiText	deredParam2\
	deredParams	Label		deredLabel3\
	deredParams	Layout		deredParam3\
	deredParam3	TextToggle	deredParam31\
	deredParam3	TextToggle	deredParam32\
	deredParam3	TextToggle	deredParam33\
	deredParams	TextToggle	deredParam4\
	deredParams	TextToggle	deredParam5\
\
	sclipShell	Parameter	sigclip\
	sclipShell	Layout		sclipLayout\
	sclipLayout	Frame		sclipMBFrame\
	sclipLayout	Layout		sclipParams\
	sclipMBFrame	Layout		sclipMBLayout\
	sclipMBLayout	Command		sclipClip\
	sclipMBLayout	Command		sclipHelp\
	sclipMBLayout	Command		sclipDismiss\
	sclipParams	Form		sclipSigma\
	sclipParams	Form		sclipLow\
	sclipParams	Form		sclipHigh\
	sclipParams	Form		sclipRadius\
	sclipSigma	Label		sclipSigmaLab\
	sclipSigma	AsciiText	sclipSigmaVal\
	sclipLow	Label		sclipLowLab\
	sclipLow	AsciiText	sclipLowVal\
	sclipHigh	Label		sclipHighLab\
	sclipHigh	AsciiText	sclipHighVal\
	sclipRadius	Label		sclipRadiusLab\
	sclipRadius	AsciiText	sclipRadiusVal\
\
	toplevel	TopLevelShell	specShell0\
	specShell0	Layout		specLayout0\
	specLayout0	Frame		specMBFrame0\
	specLayout0	Gterm		specGterm0\
	specMBFrame0	Layout		specMBLayout0\
	specMBLayout0	Command		specDismiss0\
	toplevel	TopLevelShell	specShell1\
	specShell1	Layout		specLayout1\
	specLayout1	Frame		specMBFrame1\
	specLayout1	Gterm		specGterm1\
	specMBFrame1	Layout		specMBLayout1\
	specMBLayout1	Command		specDismiss1\
	toplevel	TopLevelShell	specShell2\
	specShell2	Layout		specLayout2\
	specLayout2	Frame		specMBFrame2\
	specLayout2	Gterm		specGterm2\
	specMBFrame2	Layout		specMBLayout2\
	specMBLayout2	Command		specDismiss2\
	toplevel	TopLevelShell	specShell3\
	specShell3	Layout		specLayout3\
	specLayout3	Frame		specMBFrame3\
	specLayout3	Gterm		specGterm3\
	specMBFrame3	Layout		specMBLayout3\
	specMBLayout3	Command		specDismiss3\
	toplevel	TopLevelShell	specShell4\
	specShell4	Layout		specLayout4\
	specLayout4	Frame		specMBFrame4\
	specLayout4	Gterm		specGterm4\
	specMBFrame4	Layout		specMBLayout4\
	specMBLayout4	Command		specDismiss4\
	toplevel	TopLevelShell	specShell5\
	specShell5	Layout		specLayout5\
	specLayout5	Frame		specMBFrame5\
	specLayout5	Gterm		specGterm5\
	specMBFrame5	Layout		specMBLayout5\
	specMBLayout5	Command		specDismiss5\
	toplevel	TopLevelShell	specShell6\
	specShell6	Layout		specLayout6\
	specLayout6	Frame		specMBFrame6\
	specLayout6	Gterm		specGterm6\
	specMBFrame6	Layout		specMBLayout6\
	specMBLayout6	Command		specDismiss6\
	toplevel	TopLevelShell	specShell7\
	specShell7	Layout		specLayout7\
	specLayout7	Frame		specMBFrame7\
	specLayout7	Gterm		specGterm7\
	specMBFrame7	Layout		specMBLayout7\
	specMBLayout7	Command		specDismiss7\
	toplevel	TopLevelShell	specShell8\
	specShell8	Layout		specLayout8\
	specLayout8	Frame		specMBFrame8\
	specLayout8	Gterm		specGterm8\
	specMBFrame8	Layout		specMBLayout8\
	specMBLayout8	Command		specDismiss8\
	toplevel	TopLevelShell	specShell9\
	specShell9	Layout		specLayout9\
	specLayout9	Frame		specMBFrame9\
	specLayout9	Gterm		specGterm9\
	specMBFrame9	Layout		specMBLayout9\
	specMBLayout9	Command		specDismiss9\
\
	icShell		    Layout	    icLayout\
        icLayout      	    Frame           icMenuFrame\
        icMenuFrame   	    Layout          icMenuBar\
	icMenuBar	    MenuButton	    icPlotButton\
	icMenuBar	    MenuButton	    icFuncButton\
	icMenuBar	    MenuButton	    icOrderButton\
	icMenuBar	    MenuButton	    icMiscButton\
	icMenuBar	    Toggle	    icMarkRej\
	icMenuBar	    Command	    icEdit\
	icMenuBar	    Command	    icRefit\
	icMenuBar	    Command	    icHelp\
	icMenuBar	    Command	    icQuit\
        icLayout	    Gterm           icGterm\
\
        icLayout            Parameter       icfit\
        icLayout            Parameter       icrefit\
        icLayout            Parameter       icshow\
	icLayout	    Parameter	    ichelp\
\
        toplevel            TopLevelShell   icfitPars\
        icfitPars           Layout          icfitpLayout\
        icfitpLayout        Layout          icfparsForms\
        icfitpLayout   	    Frame           icfpCmdFrame\
\
	icfparsForms	    Form	    icFunc\
	icfparsForms	    Form	    icOrder\
	icfparsForms	    Form	    icGrow\
	icfparsForms	    Form	    icMarkrej\
	icfparsForms	    Form	    icNaverage\
	icfparsForms	    Form	    icNiter\
	icfparsForms	    Form	    icLowrej\
	icfparsForms	    Form	    icHirej\
	icfparsForms	    Form	    icSample\
	icFunc              Label           icFuncName\
        icFunc              MenuButton      icFuncValue\
        icOrder             Label           icOrderName\
        icOrder             AsciiText       icOrderValue\
        icGrow              Label           icGrowName\
        icGrow              AsciiText       icGrowValue\
        icMarkrej           Label           icMarkrejName\
        icMarkrej           Command         icMarkrejValue\
        icNaverage          Label           icNaverageName\
        icNaverage          AsciiText       icNaverageValue\
        icNiter             Label           icNiterName\
        icNiter             AsciiText       icNiterValue\
        icLowrej            Label           icLowrejName\
        icLowrej            AsciiText       icLowrejValue\
        icHirej             Label           icHirejName\
        icHirej             AsciiText       icHirejValue\
        icSample            Label           icSampleName\
        icSample            AsciiText       icSampleValue\
\
        icfpCmdFrame   	    Layout          icfparsCmd\
        icfparsCmd     	    Command         icfparsApply\
        !icfparsCmd     	    Command         icfparsUnlearn\
        icfparsCmd     	    Command         icfparsCancel\
        icfparsCmd     	    Command         icfparsHelp\
        icfparsCmd     	    Command         icfparsDismiss\
\
        toplevel            TopLevelShell   icHelpShell\
        icHelpShell         Layout          icHelpLayout\
        icHelpLayout        Frame           icHelpMenuFrame\
        icHelpMenuFrame     Layout          icHelpMenuBar\
        icHelpMenuBar       Command         icHelpDismiss\
        icHelpLayout        Frame           icHelpFrame\
        icHelpFrame         HTML            icHelpHtml\
\
        toplevel            TopLevelShell   icShowShell\
        icShowShell         Layout          icShowLayout\
        icShowLayout        Frame           icShowMenuFrame\
        icShowMenuFrame     Layout          icShowMenuBar\
        icShowMenuBar       Command         icShowDismiss\
        icShowLayout        Frame           icTextFrame\
        icTextFrame         AsciiText       icShowText\
\
	params		Parameter	lidsset\
	params		Parameter	lidslist\
	params		Parameter	lidspars\
	params		Parameter	line\
	params		Parameter	coord\
	params		Parameter	output\
	params		Parameter	wcs\
	params		Parameter	finder_wcs\
	params		Parameter	query\
	params		Parameter	registers\
	params		Parameter	files\
	params		Parameter	images\
	params		Parameter	spectra\
	params		Parameter	spectrum\
	params		Parameter	setGui\
	params		Parameter	guicmd\
	params		Parameter	viewRegion\
	params		Parameter	errorMsg

    *allowShellResize:				true
    *MenuButton*cursor:				based_arrow_down
    *editType:					edit

    ! Fonts
    *font:					7x13bold
    *HTML*font:		-*-times-medium-r-*-*-12-*

    ! Colors
    *background:				grey
    *Label*borderColor:				grey
    *Text*background:				grey90
    *TextBox*background:			grey
    *List*background:				grey90
    *HTML*background:				grey90
    *Layout.borderColor:			grey
    *Form.borderColor:				grey
    *Paned.borderColor:				grey
    *errForm*Command.background:		grey90
    *regForm*MenuButton.background:		grey90
    *gtForm*MenuButton.background:		grey90
    *gtForm*Command.background:			grey90
    *gt_Labels*MenuButton.background:		grey90
    *gt_Labels*Command.background:		grey90
    *gt_Axes*MenuButton.background:		grey90
    *gt_Axes*Command.background:		grey90
    *gt_Ticks*MenuButton.background:		grey90
    *gt_Ticks*Command.background:		grey90
    *modValues*MenuButton.background:		grey90
    *modParams*MenuButton.background:		grey90
    *modParams*Command.background:		grey90
    *lidsParams*MenuButton.background:		grey90
    *llabParams*MenuButton.background:		grey90
    *labelParams*MenuButton.background:		grey90
    *stackLayout*MenuButton.background:		grey90
    *icfparsList*MenuButton.background:		grey90
    *icfparsList*Command.background:		grey90
    *icfplotPlotOp*MenuButton.background:	grey90

!    *helpLayout*Frame.background:		gray
!    *helpLayout*Layout.background:		gray
!    *helpLayout*ScrollbarBackground:		#c0c0c0
!    *helpLayout*Scrollbar*background:		#c0c0c0
!    *helptext*background:			white
!    *helptext*foreground:			black
!    *helpMenuLayout*background:			gray

    ! These are the default names for the gterm colors.
    *color0Name:				background
    *color1Name:				foreground
    *color2Name:				red
    *color3Name:				green
    *color4Name:				blue
    *color5Name:				cyan
    *color6Name:				yellow
    *color7Name:				magenta
    *color8Name:				purple
    *color9Name:				darkslategray

    ! Borders
    *Form.borderWidth:				0
    *Label.shadowWidth:				0
    *Label.borderWidth:				1
    *Command.borderWidth:			1
    *MenuButton.borderWidth:			1
    *Frame*highlightThickness:			0
    *TextBox.borderWidth:			0
    *TextBox.innerOffset:			0
    *TextBox.outerOffset:			0

    ! Text Boxes
    *TextBox.shrinkToFit:			False
    *TextBox.alignment:				left
    *TextBox.topMargin:				0
    *TextBox.bottomMargin:			0
    *TextBox.leftMargin:			2
    *TextBox.rightMargin:			2
    *TextBox.location:				0 0 120 24
    *TextBox.frameType:				chiseled

    ! Text Toggles
    *TextToggle*offIcon:			square0s
    *TextToggle*onIcon:				square1s
    *TextToggle*highlightColor:			yellow
    *TextToggle*alignment:			left
    *TextToggle*frameWidth:			0
!    *TextToggle*Abs_height:			26
!    *TextToggle*Abs_width:			100
    *TextToggle*shrinkToFit:			true
    *TextToggle*location			0 0 120 24

    ! Radio Toggles
    *deredParam3*offIcon:			diamond0s
    *deredParam3*onIcon:			diamond1s
    *deredParam3*highlightColor:		blue
    *saveSame*offIcon:				diamond0s
    *saveSame*onIcon:				diamond1s
    *saveSame*highlightColor:			blue
    *saveOned*offIcon:				diamond0s
    *saveOned*onIcon:				diamond1s
    *saveOned*highlightColor:			blue
    *llabAbove*offIcon:				diamond0s
    *llabAbove*onIcon:				diamond1s
    *llabAbove*highlightColor:			blue
    *llabBelow*offIcon:				diamond0s
    *llabBelow*onIcon:				diamond1s
    *llabBelow*highlightColor:			blue
    *llabFormats*offIcon:			diamond0s
    *llabFormats*onIcon:			diamond1s
    *llabFormats*highlightColor:		blue
    *labelTypes*offIcon:			diamond0s
    *labelTypes*onIcon:				diamond1s
    *labelTypes*highlightColor:			blue
    *labelFormats*offIcon:			diamond0s
    *labelFormats*onIcon:			diamond1s
    *labelFormats*highlightColor:		blue
    *ctrParams*offIcon:				diamond0s
    *ctrParams*onIcon:				diamond1s
    *ctrParams*highlightColor:			blue

    ! Default frame
    *frameType:					chiseled
    *frameWidth:				3
    *outerOffset:				2
    *innerOffset:				2

    ! Gterms and Lists
    *mainGTFrame.frameType:			sunken
    *mainGTFrame.innerOffset:			0
    *viewGTFrame.frameType:			sunken
    *viewGTFrame.innerOffset:			0
    *labelVFrame.frameType:			sunken
    *labelVFrame.innerOffset:			0
    *rvVFrame.frameType:			sunken
    *rvVFrame.innerOffset:			0
    *readVFrame.innerOffset:			0
    *arithRegFrame.frameType:			sunken
    *arithRegFrame.innerOffset:			0

    ! Menu Bars
    *mainMBFrame.frameType:			chiseled
    *mainMenuBar.Command.borderWidth:		0
    *mainMenuBar.MenuButton.borderWidth:	0
    *cntrlMBFrame.frameType:			chiseled
    *cntrlMenuBar.Command.borderWidth:		0
    *cntrlmainMenuBar.MenuButton.borderWidth:	0
    *cntrlButtons.*.Command.borderWidth:		0
    *cntrlButtons.*.MenuButton.borderWidth:	0
    *viewMBFrame.frameType:			chiseled
    *viewMenuBar.Command.borderWidth:		0
    *viewMenuBar.MenuButton.borderWidth:	0
    *gtMBFrame.frameType:			chiseled
    *gtMenuBar.Command.borderWidth:		0
    *gtMenuBar.MenuButton.borderWidth:		0
    *gtLabelsMBFrame.frameType:			chiseled
    *gtLabelsMenuBar.Command.borderWidth:	0
    *gtLabelsMenuBar.MenuButton.borderWidth:	0
    *gtAxesMBFrame.frameType:			chiseled
    *gtAxesMenuBar.Command.borderWidth:	0
    *gtAxesMenuBar.MenuButton.borderWidth:	0
    *gtTicksMBFrame.frameType:			chiseled
    *gtTicksMenuBar.Command.borderWidth:	0
    *gtTicksMenuBar.MenuButton.borderWidth:	0
    *regMBFrame.frameType:			chiseled
    *regMBLayout.*.Command.borderWidth:		0
    *regMBLayout.*.MenuButton.borderWidth:	0
    *readMBFrame.frameType:			chiseled
    *readMBLayout.*.Command.borderWidth:	0
    *readMBLayout.*.MenuButton.borderWidth:	0
    *modMBFrame.frameType:			chiseled
    *modMenuBar.Command.borderWidth:		0
    *modMenuBar.MenuButton.borderWidth:		0
    *eqwMBFrame.frameType:			chiseled
    *eqwMenuBar.Command.borderWidth:		0
    *eqwMenuBar.MenuButton.borderWidth:		0
    *errMBFrame.frameType:			chiseled
    *errMenuBar.Command.borderWidth:		0
    *errMenuBar.MenuButton.borderWidth:		0
    *arithMBFrame.frameType:			chiseled
    *arithMenuBar.Command.borderWidth:		0
    *arithMenuBar.MenuButton.borderWidth:	0
    *saveMBFrame.frameType:			chiseled
    *saveMenuBar.Command.borderWidth:		0
    *saveMenuBar.MenuButton.borderWidth:	0
    *printMBFrame.frameType:			chiseled
    *saveMenuBar.MenuButton.borderWidth:	0
    *saveMenuBar.Command.borderWidth:		0
    *logMBFrame.frameType:			chiseled
    *logMenuBar.Command.borderWidth:		0
    *logMenuBar.MenuButton.borderWidth:		0
    *llMBFrame1.frameType:			chiseled
    *llMenuBar1.Command.borderWidth:		0
    *llMenuBar1.MenuButton.borderWidth:		0
    *rvMBFrame.frameType:			chiseled
    *rvMenuBar.Command.borderWidth:		0
    *rvMenuBar.MenuButton.borderWidth:		0
    *stackMBFrame.frameType:			chiseled
    *stackMenuBar.Command.borderWidth:		0
    *stackMenuBar.MenuButton.borderWidth:	0
    *statMBFrame.frameType:			chiseled
    *statMenuBar.Command.borderWidth:		0
    *statMenuBar.MenuButton.borderWidth:	0
    *deredMBFrame.frameType:			chiseled
    *deredMenuBar.Command.borderWidth:		0
    *deredMenuBar.MenuButton.borderWidth:	0
    *llMBFrame.frameType:			chiseled
    *llMenuBar.Command.borderWidth:		0
    *llMenuBar.MenuButton.borderWidth:		0
    *labelMBFrame.frameType:			chiseled
    *labelMenuBar.Command.borderWidth:		0
    *labelMenuBar.MenuButton.borderWidth:	0
    *lidsMBFrame.frameType:			chiseled
    *lidsMenuBar.Command.borderWidth:		0
    *lidsMenuBar.MenuButton.borderWidth:	0
    *llabMBFrame.frameType:			chiseled
    *llabMenuBar.Command.borderWidth:		0
    *llabMenuBar.MenuButton.borderWidth:	0
    *ctrMBFrame.frameType:			chiseled
    *ctrMenuBar.Command.borderWidth:		0
    *ctrMenuBar.MenuButton.borderWidth:		0
    *dialogMBFrame.frameType:			chiseled
    *dialogMB.Command.borderWidth:		0
    *dialogMB.MenuButton.borderWidth:		0

    ! Groups
    *Group*selectionStyle:			none
    *Group.frameType:				chiseled
    *Group.frameWidth:				2
    *Group.outerOffset:				6
    *Group.innerOffset:				4
    *Group.shrinkToFit:				True
    *Group.storeByRow:				False
    *Group.columns:				1
    *Group*location:				0 0 200 200

    ! Main window.
    *spectool.title:				Spectool
    *mainLayout.layout: vertical {\
	mainMBFrame <+inf -inf *>\
	2 mainGTFrame <+inf -inf * +inf -inf>\
    }
    *mainMenuBar.layout: horizontal {\
	fileButton <+inf -inf *>\
	2 viewButton <+inf -inf *>\
	2 editButton <+inf -inf *>\
	2 analyzeButton <+inf -inf *>\
	2 helpButton <+inf -inf *>\
    }

    *fileButton.label:		File
    *viewButton.label:		View
    *editButton.label:		Edit
    *analyzeButton.label:	Analyze
    *helpButton.label:		Help

    *fileButton.menuName:	fileMenu
    *viewButton.menuName:	viewMenu
    *editButton.menuName:	editMenu
    *analyzeButton.menuName:	analyzeMenu

    ! Control panel
    *cntrlShell.title:			View Control Panel

    *cntrlPanel.layout: vertical {cntrlMBFrame 10 cntrlButtons}
    *cntrlMenuBar.layout: horizontal {1 <+inf -inf> cntrlHelp 2 cntrlDismiss}

    *cntrlButtons.layout: vertical {\
        horizontal {\
	    5 panToggle <+inf -inf *>\
	    5 wcsToggle <+inf -inf *>\
	    5 labelToggle <+inf -inf *>\
	    5 lineToggle <+inf -inf *>\
	    5 modToggle <+inf -inf *> 2\
	}\
        20 horizontal {\
	    5 allToggle <+inf -inf *>\
	    5 oplotToggle <+inf -inf *>\
	    5 stackToggle <+inf -inf *>\
	    5 xflipToggle <+inf -inf *>\
	    5 yflipToggle <+inf -inf *> 2\
	    5 zeroToggle <+inf -inf *> 2\
	}\
        20 horizontal {\
	    5 specToggle <+inf -inf *>\
	    5 contToggle <+inf -inf *>\
	    5 rawToggle <+inf -inf *>\
	    5 skyToggle <+inf -inf *>\
	    5 sigToggle <+inf -inf *> 2\
	}\
        20 horizontal {\
	    5 previousButton <+inf -inf *>\
	    5 nextButton <+inf -inf *>\
	}\
	10\
    }

    *cntrlHelp.label:				Help
    *cntrlDismiss.label:			Dismiss

    *panToggle.label:				Pan
    *wcsToggle.label:				WCS
    *labelToggle.label:				Labels
    *lineToggle.label:				Lines
    *modToggle.label:				Profiles

    *allToggle.label:				All
    *oplotToggle.label:				Overplot
    *stackToggle.label:				Stack
    *xflipToggle.label:				X Flip
    *yflipToggle.label:				Y Flip
    *zeroToggle.label:				Zero

    *specToggle.label:				Spectrum
    *contToggle.label:				Continuum
    *rawToggle.label:				Raw
    *skyToggle.label:				Sky
    *sigToggle.label:				Sigma

    *nextButton.label:				Next
    *previousButton.label:			Prev

    ! Help Window.
    *helpShell.title:				Spectool Help
    *helpShell.width:				560
    *helpShell.height:				560
    *helpLayout*borderWidth:                    0
    *helpLayout*Frame*frameType:                sunken
    *helpLayout*Frame*frameWidth:               2
    *helpLayout*Scrollbar*width:                17
    *helpLayout*Scrollbar*height:               17
    *helpLayout*Scrollbar*shadowWidth:          2
    *helpLayout*Scrollbar*cursorName:           top_left_arrow
    *helpLayout*Scrollbar*pushThumb:            true
   
    *helpLayout.layout: vertical { \
        -1 \
        horizontal { \
            0 < +0 -0 > \
            helpMenuLayout < +inf -inf * > \
            0 < +0 -0 > \
        } \
        0 < +0 -0 > \
        horizontal { \
            0 < +0 -0 > \
            helpTextFrame < +inf -inf * +inf -inf > \
            0 \
        } \
        0 < +0 -0 > \
	horizontal { \
	    5 \
	    hfLabel 5 hfindFrame < +inf -inf *> \
	    2 \
	    hfFind 2 hfClear 5 hfDir 5 hfCase \
	    5 \
	} \
        2 \
    }
    *helpLayout*TextToggle*location:            0 0 90 25
    *helpLayout*TextToggle*offIcon:             diamond0s
    *helpLayout*TextToggle*onIcon:              diamond1s
    *helpLayout*TextToggle*highlightColor:      yellow
    *helpLayout*TextToggle*frameType:           chiseled
    *helpLayout*TextToggle*frameWidth:          2
    *hfEntry*editType:                          edit
    *hfEntry*font:                              7x13
    *hfEntry*displayCaret:                      True
    *hfLabel.label:                             Find:
    *hfFind.label:                              Find
    *hfFind.shadowWidth:                        1
    *hfClear.label:                             Clear
    *hfClear.shadowWidth:                       1
    *hfDir.label:                               Backwards
    *hfCase.label:                              Caseless
    *hfCase.on:                                 true
      
    *helpMenuLayout*Command.highlightThickness: 2
    *helpMenuLayout*Command.internalHeight:     2
    *helpMenuLayout*Command.font: 	-*-helvetica-bold-r-normal-*-12-*-*-*
    *helpMenuLayout.layout: vertical { \
        5 \
	horizontal { \
            5 < +0 -5 > \
            helpBack \
            2 < +0 -2 > \
            helpForward \
            2 < +0 -2 > \
            helpHome \
            2 < +0 -2 > \
            helpTutorial \
            20 < +inf -20 > \
            helpDismiss \
            5 < +0 -5 > \
	} \
        5 \
    }
    *helpBack.label:				Back
    *helpBack.sensitive:			False
    *helpForward.label:				Forward
    *helpForward.sensitive:			False
    *helpHome.label:				Home
    *helpTutorial.label:			Tutorial
    *helpDismiss.label:				Dismiss
 
    *helpText.width:					450
    *helpText.height:					500
    *helpText.anchorUnderlines:				1
    *helpText.visitedAnchorUnderlines:			1
    *helpText.verticalScrollOnRight:			true
    *helpText.plainFont:				6x13


    ! Log Window.
    *logShell.title:			Log
    *logFile.label:			File
    *logFileLabel.label:		Logfile:
    *logFilename.string:
    *logHelp.label:			Help
    *logDismiss.label:			Dismiss
    *logLayout.layout: vertical {\
	logMBFrame <+inf -inf *>\
	2 logText <+inf -inf * +inf -inf>\
    }
    *logMenuBar.layout: horizontal {\
	logFile\
	10 <+inf -inf>\
	logFileLabel\
	logFilename <+inf -inf *>\
	10 <+inf -inf>\
	logHelp\
	2 logDismiss\
    }

    *logFile.menuName:			logFileMenu

    *logText*editType:			edit
    *logText*scrollVertical:		always
    *logText*scrollHorizontal:		whenNeeded
    *logText.width:			530
    *logText.height:			200

    ! Generic dialog popup.
    *dialogLayout.layout: vertical {\
	dialogMBFrame <+inf -inf *>\
	2 dialogFrame <+inf -inf * +inf -inf>\
    }
    *dialogMB.layout: horizontal {\
	dialogExec\
	2 <+inf -inf>\
	2 dialogHelp\
	2 dialogDismiss\
    }
    *dialog.layout: vertical {\
	2 dialogLabel <+inf -inf *>\
	2 dialogValue <+inf -inf *>\
	2\
    }
    *dialogExec.label:			XXXXXXXX
    *dialogHelp.label:			Help
    *dialogDismiss.label:			Dismiss
    *dialogLabel.justify:		left
    *dialogLabel.width:			300
    *dialogValue.width:			300

    ! View Window
    *viewShell.title:			Pan
    *viewShell*Command.width:		50
    *viewShell*Label.width:		70
    *viewShell*Text.width:		100

    *viewLayout.layout: vertical {\
	viewMBFrame <+inf -inf *>\
	viewFormFrame <+inf -inf *>\
	viewGTFrame <+inf -inf * +inf -inf>\
    }
    *viewMenuBar.layout: horizontal {\
	viewFull 2 <+inf -inf>\
	viewHelp\
	2 viewDismiss\
    }
    *viewForm.layout: vertical {\
	horizontal {viewLeftForm viewLeftValue <+inf -inf *>\
	    10 viewRightForm viewRightValue <+inf -inf *>}\
	2 horizontal {viewTopForm viewTopValue <+inf -inf *>\
	    10 viewBottomForm viewBottomValue <+inf -inf *>}\
	2 horizontal {viewHClipForm viewHClipValue <+inf -inf *>\
	    10 viewLClipForm viewLClipValue <+inf -inf *>}\
	2 horizontal {viewBufForm viewBufValue <+inf -inf *>}\
    }

    *viewFull.label:			Full
    *viewHelp.label:			Help
    *viewDismiss.label:			Dismiss

    *viewLeftLabel.label:		Left
    *viewRightLabel.label:		Right
    *viewBottomLabel.label:		Bottom
    *viewTopLabel.label:		Top
    *viewLClipLabel.label:		Low Clip
    *viewHClipLabel.label:		High Clip
    *viewBufLabel.label:		Y Buffer

    *viewForm*Label.width:		60
    *viewForm*Label.justify:		right
    *viewForm*Form.defaultDistance:	0
!    *viewForm*label.resizable:		False
!    *viewForm*label.right:		ChainRight
!    *viewLeftValue.fromHoriz:		viewLeftLabel
!    *viewRightValue.fromHoriz:		viewRightLabel
!    *viewTopValue.fromHoriz:		viewTopLabel
!    *viewBottomValue.fromHoriz:		viewBottomLabel
!    *viewHClipValue.fromHoriz:		viewHClipLabel
!    *viewLClipValue.fromHoriz:		viewLClipLabel
!    *viewBufValue.fromHoriz:		viewBufLabel

    *gterm2.width:			500
    *gterm2.height:			100
    *gterm2.min:			100

    ! Spectrum Window
    *regShell*title:				Registers

    ! Register Frame
    *regLayout.layout: vertical {\
	regMBFrame <+inf -inf *>\
	regForm <+inf -inf *>\
	regVLayout <+inf -inf * +inf -inf>\
    }
    *regMBLayout.layout: vertical {regMenuBar}
    *regMenuBar.layout: horizontal {\
	regClear 2 <+inf -inf>\
	regHelp 2 regDismiss\
    }
    *regForm.layout: horizontal {\
	regForm1 <+inf -inf *>\
	regForm5 <+inf -inf *>\
	regForm6 <+inf -inf *>\
    }
    *regVLayout.layout: vertical {\
	regView <+inf -inf * +inf -inf>\
	regListHelp <+inf -inf *>\
    }

    *regClear.label:				Clear
    *regHelp.label:				Help
    *regDismiss.label:				Dismiss

    *regForm*MenuButton.shadowWidth:		0
    *regForm*Label.justify:			center
    *regLabel.label:			Reg
    *regTypeLabel.label:				Type
    *regColorLabel.label:				Color
    *regLabel.width:			40
    *regTypeLabel.width:				80
    *regColorLabel.width:				80
    *regType.menuName:			typeMenu
    *regColor.menuName:			colorMenu

    *regValue.width:			40
    *regType.width:				80
    *regColor.width:				80
    *regValue.fromVert:			regLabel
    *regType.fromVert:			regTypeLabel
    *regColor.fromVert:			regColorLabel

    *regView.allowHoriz:		False
    *regView.allowVert:			True
    *regView.forceBars:			True
    *regList*width:			600
    *regList*height:			80
    *regList*forceColumns:		True
    *regList*defaultColumns:		1

    ! File list
    *flistShell*title:			Read File

    *flistLayout.layout: vertical {\
	flistMBFrame <+inf -inf *>\
	flistForm <+inf -inf *>\
	flistView <+inf -inf * +inf -inf>\
    }
    *flistMBLayout.layout: vertical {flistMenuBar}
    *flistMenuBar.layout: horizontal {\
	2 flistApply 2 <+inf -inf> flistHelp 2 flistCancel\
    }

    *flistApply.label:				Apply
    *flistHelp.label:				Help
    *flistCancel.label:				Cancel

    *flistForm.layout: vertical {\
	10 horizontal {5 flistLabel 5 flistFile <+inf -inf *> 5}\
	30 horizontal {5 flistDirLabel 5 flistDir <+inf -inf *> 5}\
	2 horizontal {\
	    5 flistTempLabel 5 flistTemplate <+inf -inf *> 5\
	} 10\
    }

    *flistForm*Label.justify:			right
    *flistLabel.label:				File:
    *flistDirLabel.label:			Directory:
    *flistTempLabel.label:			Template:

    *flistView.allowHoriz:			False
    *flistView.allowVert:			True
    *flistView.forceBars:			True
    *flistView.height:				200
    *flistList*width:				500

    ! Read Window
    *readShell*title:			Read Spectra

    *readLayout.layout: vertical {\
	readMBFrame <+inf -inf *>\
	4 readForm <+inf -inf *>\
	20 readImLayout <+inf -inf * +inf -inf>\
    }
    *readMBLayout.layout: vertical {readMenuBar}
    *readMenuBar.layout: horizontal {\
	2 <+inf -inf> readHelp 2 readDismiss\
    }

    *readHelp.label:				Help
    *readDismiss.label:				Dismiss

    *readForm.layout: horizontal {\
	readForm1 <+inf -inf *>\
	readForm2 <+inf -inf *>\
	readForm3 <+inf -inf *>\
	readForm4 <+inf -inf *>\
    }

    *readForm*MenuButton.shadowWidth:		0
    *readForm*Label.justify:			center
    *readImageLabel.label:			File
    *readApLabel.label:				Ap
    *readAxisLabel.label:			Axis
    *readNsumLabel.label:			Nsum
    *readImageLabel.width:			240
    *readApLabel.width:				42
    *readAxisLabel.width:			42
    *readNsumLabel.width:			42

    *readImage.width:			240
    *readAp.width:			42
    *readAxis.width:			42
    *readNsum.width:			42
    *readImage.fromVert:		readImageLabel
    *readAp.fromVert:			readApLabel
    *readAxis.fromVert:			readAxisLabel
    *readNsum.fromVert:			readNsumLabel

    *readImLayout.layout: vertical {\
	readImForm <+inf -inf *>\
	4 readVFrame <+inf -inf * +inf -inf>\
    }
    *readImForm.layout: horizontal {\
	vertical {readDirLabel 5 readImLabel}\
	2\
	vertical {readDir <+inf -inf *> 5 readImages <+inf -inf *>}\
    }
!    *readImForm.layout: vertical {\
!        horizontal {readDirLabel 2 readDir <+inf -inf *>}\
!	5\
!	horizontal {readImLabel 2 readImages <+inf -inf *>}\
!    }

    *readImForm*Label.justify:			right
    *readDirLabel.label:			Directory:
    *readImLabel.label:				Template:

    *readImView.preferredPaneSize:		200
    *readImView.allowHoriz:			False
    *readImView.allowVert:			True
    *readImView.forceBars:			True
    *readImView.height:				200
    *readImList*width:				500
    *readImList*height:				200
    *readList*verticalList:			True
    *readList*forceColumns:			True
    *readList*defaultColumns:			1

    *readView.preferredPaneSize:		200
    *readView.allowHoriz:			False
    *readView.allowVert:			True
    *readView.forceBars:			True
    *readView.height:				200
    *readList*height:				400
    *readList*width:				500

    ! Graph Form
    *gtShell*title:				Graph Spectra

    *gtLayout.layout: vertical {\
	gtMBFrame <+inf -inf *> 4\
	gtForm <+inf -inf * +inf -inf>\
    }
    *gtMenuBar.layout: horizontal {\
	gtApply 2 <+inf -inf>\
	gtHelp 2\
	gtDismiss 2\
    }
    *gtForm.layout: vertical {\
	gt_Type <+inf -inf *> 2 \
	gt_EType <+inf -inf *> 2 \
	gt_Color <+inf -inf *> 2 \
	gt_Symsize <+inf -inf *> 2 \
    }

    *gtMenuBar*Command.width:			50
    *gtApply.label:				Apply
    *gtHelp.label:				Help
    *gtDismiss.label:				Dismiss

    *gtForm*Label.width:			150
    *gtForm*Command.width:			100
    *gtForm*MenuButton.width:			100
    *gtForm*Text.width:				100
    *gtForm*MenuButton.shadowWidth:		0
    *gtForm*Command.shadowWidth:		0
    *gtForm*Label.justify:			right
    *gtForm*MenuButton.justify:			left
    *gtForm*Command.justify:			left

    *gtForm*gtBType.width:			206
    *gtForm*gtEType.width:			206
    *gtForm*gtBColor.width:			206

    *gtLType.label:				Type
    *gtLEType.label:				Error type
    *gtLColor.label:				Color
    *gtLSymsize.label:				Mark size

    *gtBType.fromHoriz:				gtLType
    *gtEType.fromHoriz:				gtLEType
    *gtBColor.fromHoriz:			gtLColor
    *gtXSymsize.fromHoriz:			gtLSymsize
    *gtYSymsize.fromHoriz:			gtXSymsize

    *gtBType.menuName:				gtTypeMenu
    *gtEType.menuName:				gtTypeMenu
    *gtBColor.menuName:				gtColorMenu

    ! Graph Labels
    *gtLabelsShell*title:			Graph Labels

    *gtLabelsLayout.layout: vertical {\
	gtLabelsMBFrame <+inf -inf *> 4\
	gt_Labels <+inf -inf * +inf -inf>\
    }
    *gtLabelsMenuBar.layout: horizontal {\
	gtLabelsApply 2 <+inf -inf>\
	gtLabelsHelp 2\
	gtLabelsDismiss 2\
    }
    *gt_Labels.layout: vertical {\
	gt_Sysid <+inf -inf *> 2 \
	gt_Title <+inf -inf *> 2 \
	gt_Subtitle <+inf -inf *> 2 \
	gt_Titlecolor <+inf -inf *> 2 \
	gt_Label <+inf -inf *> 2 \
	gt_Units <+inf -inf *> 2 \
	gt_Axislabcolor <+inf -inf *> 2 \
    }

    *gtLabelsMenuBar*Command.width:		50
    *gtLabelsApply.label:			Apply
    *gtLabelsHelp.label:			Help
    *gtLabelsDismiss.label:			Dismiss

    *gt_Labels*Label.width:			150
    *gt_Labels*Command.width:			100
    *gt_Labels*MenuButton.width:		100
    *gt_Labels*Text.width:			100
    *gt_Labels*MenuButton.shadowWidth:		0
    *gt_Labels*Command.shadowWidth:		0
    *gt_Labels*Label.justify:			right
    *gt_Labels*MenuButton.justify:		left
    *gt_Labels*Command.justify:			left

    *gt_Labels*gtBSysid.width:			206
    *gt_Labels*gtBTitle.width:			206
    *gt_Labels*gtBSubtitle.width:		206
    *gt_Labels*gtBTitlecolor.width:		206

    *gtLSysid.label:				System banner?
    *gtLTitle.label:				Title
    *gtLSubtitle.label:				Subtitle
    *gtLTitlecolor.label:			Title color
    *gtLLabel.label:				Axis label
    *gtLUnits.label:				Axis units
    *gtLAxislabcolor.label:			Axis label color

    *gtBTitlecolor.menuName:			gtLabelsColorMenu
    *gtXAxislabcolor.menuName:			gtLabelsColorMenu
    *gtYAxislabcolor.menuName:			gtLabelsColorMenu

    *gtBSysid.fromHoriz:			gtLSysid
    *gtBTitle.fromHoriz:			gtLTitle
    *gtBSubtitle.fromHoriz:			gtLSubtitle
    *gtBTitlecolor.fromHoriz:			gtLTitlecolor
    *gtXLabel.fromHoriz:			gtLLabel
    *gtYLabel.fromHoriz:			gtXLabel
    *gtXUnits.fromHoriz:			gtLUnits
    *gtYUnits.fromHoriz:			gtXUnits
    *gtXAxislabcolor.fromHoriz:			gtLAxislabcolor
    *gtYAxislabcolor.fromHoriz:			gtXAxislabcolor

    ! Graph Axes
    *gtAxesShell*title:				Graph Axes

    *gtAxesLayout.layout: vertical {\
	gtAxesMBFrame <+inf -inf *> 4\
	gt_Axes <+inf -inf * +inf -inf>\
    }
    *gtAxesMenuBar.layout: horizontal {\
	gtAxesApply 2 <+inf -inf>\
	gtAxesHelp 2\
	gtAxesDismiss 2\
    }
    *gt_Axes.layout: vertical {\
	gt_View1 <+inf -inf *> 2 \
	gt_View2 <+inf -inf *> 2 \
	gt_Drawaxes <+inf -inf *> 2 \
	gt_Axiswidth <+inf -inf *> 2 \
	gt_Axistype <+inf -inf *> 2 \
	gt_Axiscolor <+inf -inf *> 2 \
	gt_Drawgrid <+inf -inf *> 2 \
	gt_Gridcolor <+inf -inf *> 2 \
	gt_Framecolor <+inf -inf *> 2 \
    }

    *gtAxesMenuBar*Command.width:			50
    *gtAxesApply.label:				Apply
    *gtAxesHelp.label:				Help
    *gtAxesDismiss.label:			Dismiss

    *gt_Axes*Label.width:			150
    *gt_Axes*Command.width:			100
    *gt_Axes*MenuButton.width:			100
    *gt_Axes*Text.width:			100
    *gt_Axes*MenuButton.shadowWidth:		0
    *gt_Axes*Command.shadowWidth:		0
    *gt_Axes*Label.justify:			right
    *gt_Axes*MenuButton.justify:		left
    *gt_Axes*Command.justify:			left

    *gt_Axes*gtBFramecolor.width:		206

    *gtLView1.label:				Viewport minimum
    *gtLView2.label:				Viewport maximum
    *gtLDrawaxes.label:				Draw axis?
    *gtLAxiswidth.label:			Axis width
    *gtLAxistype.label:				Axis type
    *gtLAxiscolor.label:			Axis color
    *gtLDrawgrid.label:				Draw grid?
    *gtLGridcolor.label:			Grid color
    *gtLFramecolor.label:			Frame color

    *gtXView1.fromHoriz:			gtLView1
    *gtYView1.fromHoriz:			gtXView1
    *gtXView2.fromHoriz:			gtLView2
    *gtYView2.fromHoriz:			gtXView2
    *gtXDrawaxes.fromHoriz:			gtLDrawaxes
    *gtYDrawaxes.fromHoriz:			gtXDrawaxes
    *gtXAxiswidth.fromHoriz:			gtLAxiswidth
    *gtYAxiswidth.fromHoriz:			gtXAxiswidth
    *gtXAxistype.fromHoriz:			gtLAxistype
    *gtYAxistype.fromHoriz:			gtXAxistype
    *gtXAxiscolor.fromHoriz:			gtLAxiscolor
    *gtYAxiscolor.fromHoriz:			gtXAxiscolor
    *gtXDrawgrid.fromHoriz:			gtLDrawgrid
    *gtYDrawgrid.fromHoriz:			gtXDrawgrid
    *gtXGridcolor.fromHoriz:			gtLGridcolor
    *gtYGridcolor.fromHoriz:			gtXGridcolor
    *gtBFramecolor.fromHoriz:			gtLFramecolor

    *gtXDrawaxes.menuName:			gtXDrawaxesMenu
    *gtYDrawaxes.menuName:			gtYDrawaxesMenu
    *gtXAxistype.menuName:			gtAxistypeMenu
    *gtYAxistype.menuName:			gtAxistypeMenu
    *gtXAxiscolor.menuName:			gtAxesColorMenu
    *gtYAxiscolor.menuName:			gtAxesColorMenu
    *gtXGridcolor.menuName:			gtAxesColorMenu
    *gtYGridcolor.menuName:			gtAxesColorMenu
    *gtBFramecolor.menuName:			gtAxesColorMenu

    ! Graph Ticks
    *gtTicksShell*title:				Graph Ticks

    *gtTicksLayout.layout: vertical {\
	gtTicksMBFrame <+inf -inf *> 4\
	gt_Ticks <+inf -inf * +inf -inf>\
    }
    *gtTicksMenuBar.layout: horizontal {\
	gtTicksApply 2 <+inf -inf>\
	gtTicksHelp 2\
	gtTicksDismiss 2\
    }
    *gt_Ticks.layout: vertical {\
	gt_Drawticks <+inf -inf *> 2 \
	gt_Nmajor <+inf -inf *> 2 \
	gt_Nminor <+inf -inf *> 2 \
	gt_Labelticks <+inf -inf *> 2 \
	gt_Format <+inf -inf *> 2 \
	gt_Ticklabcolor <+inf -inf *> 2 \
    }

    *gtTicksMenuBar*Command.width:			50
    *gtTicksApply.label:				Apply
    *gtTicksHelp.label:				Help
    *gtTicksDismiss.label:			Dismiss

    *gt_Ticks*Label.width:			150
    *gt_Ticks*Command.width:			100
    *gt_Ticks*MenuButton.width:			100
    *gt_Ticks*Text.width:			100
    *gt_Ticks*MenuButton.shadowWidth:		0
    *gt_Ticks*Command.shadowWidth:		0
    *gt_Ticks*Label.justify:			right
    *gt_Ticks*MenuButton.justify:		left
    *gt_Ticks*Command.justify:			left

    *gtLDrawticks.label:			Draw ticks?
    *gtLNmajor.label:				Major ticks
    *gtLNminor.label:				Minor ticks
    *gtLLabelticks.label:			Label ticks?
    *gtLFormat.label:				Label format
    *gtLTicklabcolor.label:			Label color

    *gtXDrawticks.fromHoriz:			gtLDrawticks
    *gtYDrawticks.fromHoriz:			gtXDrawticks
    *gtXNmajor.fromHoriz:			gtLNmajor
    *gtYNmajor.fromHoriz:			gtXNmajor
    *gtXNminor.fromHoriz:			gtLNminor
    *gtYNminor.fromHoriz:			gtXNminor
    *gtXLabelticks.fromHoriz:			gtLLabelticks
    *gtYLabelticks.fromHoriz:			gtXLabelticks
    *gtXFormat.fromHoriz:			gtLFormat
    *gtYFormat.fromHoriz:			gtXFormat
    *gtXTicklabcolor.fromHoriz:			gtLTicklabcolor
    *gtYTicklabcolor.fromHoriz:			gtXTicklabcolor

    *gtXTicklabcolor.menuName:			gtTicksColorMenu
    *gtYTicklabcolor.menuName:			gtTicksColorMenu

    ! Line Labels
    *llabShell.title:			Line Labels
    *llabLayout.layout: vertical {\
	llabMBFrame <+inf -inf *> 10\
	llabValues <+inf -inf *> 30\
	llabParams <+inf -inf *> 10\
    }
    *llabMenuBar.layout: horizontal {\
	llabShow 4\
	llabAll 4\
	llabDraw 4\
	<+inf -inf>\
	llabHelp 4\
	llabDismiss\
    }
    *llabValues.layout: horizontal {llabLineLab llabLine <+inf -inf *>}
    *llabParams.layout: vertical {\
	4 horizontal {llabPos llabAbove llabBelow llabY1 llabY2 <+inf -inf *>}\
	4 horizontal {llabLab llabObs llabRef llabId 1 <+inf -inf>}\
	4 horizontal {llabTicks llabTick llabArrow llabBand 1 <+inf -inf>}\
	4 horizontal {llabFormat llabFormats <+inf -inf *>}\
	4 horizontal {llabColorLabel llabColor <+inf -inf *>}\
    }
    *llabFormats.layout: horizontal {\
	llabVert llabHoriz llabOther llabOtherVal <+inf -inf *>\
    }

    *llabShow.label:			Show Labels
    *llabAll.label:			All
    *llabDraw.label:			Label
    *llabHelp.label:			Help
    *llabDismiss.label:			Dismiss

    *llabLineLab.label:			Spectral line:

    *llabOther*Abs_width:		70
    *llabPos.label:			Position:
    *llabAbove.label:			Above
    *llabBelow.label:			Below
    *llabY1.label:			Distance:
    *llabLab.label:			Label with:
    *llabObs.label:			Measured
    *llabRef.label:			Reference
    *llabId.label:			Id
    *llabTicks.label:			Tick:
    *llabTick.label:			Line
    *llabArrow.label:			Arrowhead
    *llabBand.label:			Bandpass
    *llabFormat.label:			\  Format:
    *llabVert.label:			Vertical
    *llabHoriz.label:			Horizontal
    *llabOther.label:			Other:
    *llabColorLabel.label:		Color:
    *llabColor.menuName:		llabColorMenu
    *llabParams*MenuButton.width:	70
    *llabParams*MenuButton.shadowWidth:	0
    *llabParams*MenuButton.justify:		left

    ! Line List
    *lidsShell.title:			Line List
    *lidsLayout.layout: vertical {\
	lidsMBFrame <+inf -inf *> 10\
	lidsValues <+inf -inf *> 30\
	lidsVLayout <+inf -inf * +inf -inf>\
    }
    *lidsMenuBar.layout: horizontal {\
	lidsFile 4\
	lidsAll 4\
	<+inf -inf>\
	lidsHelp 4\
	lidsDismiss\
    }
    *lidsValues.layout: horizontal {lidsLineLab lidsLine <+inf -inf *>}
    *lidsVLayout.layout: vertical {\
	horizontal {\
	    lids_Center <+inf -inf *>\
	    lids_Reference <+inf -inf *>\
	    lids_Lower <+inf -inf *>\
	    lids_Upper <+inf -inf *>\
	}\
	lids_Label <+inf -inf *>\
	lidsView <+inf -inf * +inf -inf>\
	lids_ListHelp <+inf -inf *>\
    }

    *lidsFile.label:			File
    *lidsAll.label:			All
    *lidsHelp.label:			Help
    *lidsDismiss.label:			Dismiss

    *lidsFile.menuName:			lidsFileMenu

    *lidsLineLab.label:			Spectral line:

    *lidsVLayout*Label.justify:		center
    *lids_CenterLab.label:		Center
    *lids_ReferencLab.label:		Reference
    *lids_LowerLab.label:		Lower
    *lids_UpperLab.label:		Upper
    *lids_LabelLab.label:		Label
    *lids_CenterVal.fromVert:		lids_CenterLab
    *lids_ReferenceVal.fromVert:	lids_ReferencLab
    *lids_LowerVal.fromVert:		lids_LowerLab
    *lids_UpperVal.fromVert:		lids_UpperLab
    *lids_LabelVal.fromHoriz:		lids_LabelLab

    *lidsView.allowHoriz:		false
    *lidsView.allowVert:		true
    *lidsView.forceBars:		true
    *lids_List*height:			100
    *lids_List*forceColumns:		true
    *lids_List*defaultColumns:		1

    ! Spectrum Labels
    *labelShell.title:			Spectrum Labels
    *labelLayout.layout: vertical {\
	labelMBFrame <+inf -inf *> 10\
	labelParams <+inf -inf *> 10\
    }
    *labelMenuBar.layout: horizontal {\
	labelShow 4\
	labelAll 4\
	labelDraw 4\
	<+inf -inf>\
	labelHelp 4\
	labelDismiss\
    }
    *labelParams.layout: vertical {\
	4 horizontal {\
	    labelXLab labelX <+inf -inf *> labelYLab labelY <+inf -inf *>\
	}\
	4 horizontal {labelLabelLab labelLabel <+inf -inf *>}\
	4 horizontal {labelType labelTypes <+inf -inf *>}\
	4 horizontal {labelFormat labelFormats <+inf -inf *>}\
	4 horizontal {labelColorLabel labelColor <+inf -inf *>}\
	10 labelVFrame <+inf -inf * +inf -inf>\
    }
    *labelTypes.layout: horizontal {\
	labelSpec <+inf -inf *> labelGraph <+inf -inf *>\
    }
    *labelFormats.layout: horizontal {\
	labelVert labelHoriz labelOther labelOtherVal <+inf -inf *>\
    }
    *labelVLayout.layout: vertical {\
	labelView <+inf -inf * +inf -inf>\
	labelListHelp <+inf -inf *>\
    }

    *labelShow.label:			Show Labels
    *labelAll.label:			All
    *labelDraw.label:			Label
    *labelHelp.label:			Help
    *labelDismiss.label:		Dismiss

    *labelOther*Abs_width:		75
    *labelLabelLab.label:		Label:
    *labelXLab.label:			X:
    *labelType.label:			Attach to:
    *labelFormat.label:			Format:
    *labelColorLabel.label:		Color:
    *labelYLab.label:			Y:
    *labelSpec.label:			Spectrum
    *labelGraph.label:			Graph
    *labelVert.label:			Vertical
    *labelHoriz.label:			Horizontal
    *labelOther.label:			Other:
    *labelColor.menuName:		labelColorMenu
    *labelParams*MenuButton.width:	70
    *labelParams*MenuButton.shadowWidth:	0
    *labelParams*MenuButton.justify:		left

    *labelView.allowHoriz:		false
    *labelView.allowVert:		true
    *labelView.forceBars:		true
    *labelList*height:			100
    *labelList*forceColumns:		true
    *labelList*defaultColumns:		1

    ! Line list
    *llShell.title:			Reference List
    *llLayout.layout: vertical {\
	llMBFrame <+inf -inf *> 10\
	llValues <+inf -inf *> 30\
	llParams <+inf -inf *> 10\
	llListView <+inf -inf * +inf -inf> 10\
	llListHelp <+inf -inf *> 10\
    }
    *llMenuBar.layout: horizontal {\
	llFile\
	4 llMark\
	10 <+inf -inf>\
	llLab\
	llLinelist <+inf -inf *>\
	10 <+inf -inf>\
	4 llHelp\
	llDismiss\
    }
    *llValues.layout: horizontal {llLineLab llLine <+inf -inf *>}
    *llParams.layout: vertical {\
	horizontal {llSepLabel llSepValue <+inf -inf *>}\
	4 horizontal {llMinSepLabel llMinSep <+inf -inf *>}\
    }

    *llFile.label:			File
    *llMark.label:			Mark
    *llHelp.label:			Help
    *llDismiss.label:			Dismiss

    *llFile.menuName:			llFileMenu

    *llLineLab.label:			Spectral line:

    *llMinSepLabel.label: 		Maximum separation (pixels):
    *llSepLabel.label: 			Maximum match distance (pixels):
    *llLab.label:			Line list:

    *llListView.allowHoriz:		false
    *llListView.allowVert:		true
    *llListView.forceBars:		true
    *llList*width:			530
    *llList*height:			100
    *llList*forceColumns:		true
    *llList*defaultColumns:		1

    ! Center parameters
    *ctrShell.title:			Centering Parameters

    *ctrLayout.layout: vertical {\
	ctrMBFrame <+inf -inf *> 10\
	ctrValues <+inf -inf *> 30\
	ctrParams <+inf -inf *> 10\
    }
    *ctrMenuBar.layout: horizontal {\
	ctrAll 4\
	ctrCenter 4\
	1 <+inf -inf>\
	ctrHelp 4\
	ctrDismiss 4\
    }
    *ctrValues.layout: horizontal {ctrLineLab ctrLine <+inf -inf *>}
    *ctrParams.layout: vertical {\
	horizontal {ctrWidthLab ctrWidthVal <+inf -inf *> 4\
		    ctrRadiusLab ctrRadiusVal <+inf -inf *>} 12\
	ctrCtypes <+inf -inf * +inf -inf>\
	ctrPtypes <+inf -inf * +inf -inf>\
    }

    *ctrCenter.label:			Center
    *ctrAll.label:			All
    *ctrHelp.label:			Help
    *ctrDismiss.label:			Dismiss

    *ctrLineLab.label:			Spectral line:
    *ctrWidthLab.label:			Centering width (pixels):
    *ctrRadiusLab.label:		Error radius (pixels): 
    *ctrCtypes.label:			Centering types
    *ctrPtypes.label:			Profile types
    *ctrCtype1.label:			None
    *ctrCtype2.label:			Center1d
    *ctrCtype3.label:			Gaussian
    *ctrCtype4.label:			Parabola
    *ctrCtype5.label:			Peak
    *ctrPtype1.label:			Either
    *ctrPtype2.label:			Emission
    *ctrPtype3.label:			Absorption

    *ctrParams*Abs_width:		60
    *ctrParams*Abs_height:		24
    *ctrPtypes.selectionStyle:		one
    *ctrPtypes.columns:			3
    *ctrCtypes.selectionStyle:		one
    *ctrCtypes.columns:			5

    ! Radial velocities
    *rvShell.title:			Radial Velocities
    *rvLayout.layout: vertical {\
	rvMBFrame <+inf -inf *>\
	rvParams <+inf -inf * +inf -inf>\
    }
    *rvMenuBar.layout: horizontal {\
	rvVel 4\
	rvDeredshift 4\
	rvClear 4 <+inf -inf>\
	rvHelp 4\
	rvDismiss 4\
    }
    *rvParams.layout: vertical {\
	horizontal {\
	    rvVobsLabel rvVobs <+inf -inf *> 10\
	    rvZobsLabel rvZobs <+inf -inf *>\
	}\
	4 horizontal {\
	    rvVhelioLabel rvVhelio <+inf -inf *> 10\
	    rvZhelioLabel rvZhelio <+inf -inf *>\
	}\
	10 rvText <+inf -inf * +inf -inf>\
    }

    *rvVel.label:			Velocity
    *rvDeredshift.label:		Deredshift
    *rvClear.label:			Clear
    *rvHelp.label:			Help
    *rvDismiss.label:			Dismiss

    *rvVobsLabel.label:			\  Vobs (km/s):
    *rvZobsLabel.label:			\         Zobs:
    *rvVhelioLabel.label:		\Vhelio (km/s):
    *rvZhelioLabel.label:		\       Zhelio:

    *rvText.displayCaret:		False
    *rvText.editType:			read
    *rvText.scrollVertical:		always
    *rvText.height:			200
    *rvText.width:			500

    ! Model Shell
    *modLayout.layout: vertical {\
	modMBFrame <+inf -inf *> 10\
	modValues <+inf -inf *>\
	modParams <+inf -inf *>\
    }
    *modMenuBar.layout: horizontal {4\
	modShow 4\
	modAll 4\
	modFit 4\
	modDraw 4\
	modSub 4\
	<+inf -inf>\
	modHelp 4\
	modDismiss 4\
    }
    *modValues.layout: vertical {\
	4 horizontal {modLineLab modLine <+inf -inf *>}\
	30 horizontal {modProf 4 0 <+inf -inf>}\
	4 horizontal {modCen 4 modPeak 0 <+inf -inf>}\
	4 horizontal {modGFWHM 4 modLFWHM 0 <+inf -inf>}\
	4 horizontal {modCont 4 modSlope 0 <+inf -inf>}\
	4 horizontal {modLow 4 modUp 0 <+inf -inf>}\
	4 horizontal {modFlux 4 modEqw 0 <+inf -inf>}\
	4\
    }
    *modParams.layout: vertical {\
	modToggles <+inf -inf *>\
	modConstrain <+inf -inf *>\
	modPlots <+inf -inf *>\
    }

    *modShell.title:			Profile Fitting
    *modShow.label:			Show Plots
    *modAll.label:			All
    *modDraw.label:			Plot
    *modFit.label:			Fit
    *modSub.label:			Subtract
    *modHelp.label:			Help
    *modDismiss.label:			Dismiss

    *modValues*Label.justify:		right
    *modValues*Label.width:		120
    *modValues*AsciiText.width:		120
    *modValues*TextBox.outerOffset:	0
    *modValues*TextBox.innerOffset:	0
    *modValues*TextBox.location:	-2 0 106 24
    *modValues*MenuButton.width:	100
    *modValues*MenuButton.shadowWidth:	0
    *modValues*MenuButton.justify:	left

    *modParams*storeByRow:		True
    *modParams*Abs_height:		24
    *modParams*rows:			0
    *modToggles*Abs_width:		95
    *modConstrain*Abs_width:		95

    *modToggles.label:			Fit
    *modToggles*columns:		3
    *modConstrain.label:		Constrain
    *modConstrain*columns:		3
    *modPlots.label:			Plot:
    *modPlots*columns:			4

    *modPos.label:			positions
    *modInt.label:			intensities
    *modGFWHMTog.label:			GFWHM
    *modLFWHMTog.label:			LFWHM
    *modBkg.label:			background
    *modRelPos.label:			relative positions
    *modRelInt.label:			relative intensities
    *modRelGFWHM.label:			relative GFWHM
    *modEqGFWHM.label:			equal GFWHM
    *modRelLFWHM.label:			relative LFWHM
    *modEqLFWHM.label:			equal LFWHM
    *modPlotProf.label:			Profiles
    *modPlotCont.label:			Continuum
    *modPlotSum.label:			Sum
    *modColor.menuName:			modColorMenu
    *modSumColor.menuName:		modColorMenu
    *modContColor.menuName:		modColorMenu
    *modParams*Command.width:		70
    *modParams*MenuButton.width:	70
    *modParams*MenuButton.shadowWidth:	0
    *modParams*Command.shadowWidth:	0
    *modParams*Label.justify:		left
    *modParams*MenuButton.justify:	left
    *modParams*Command.justify:		left

    *modLineLab.label:			Spectral Line:
    *modProfLab.label:			Profile:
    *modCenLab.label:			Center:
    *modPeakLab.label:			Peak:
    *modGFWHMLab.label:			GFWHM:
    *modLFWHMLab.label:			LFWHM:
    *modContLab.label:			Continuum:
    *modSlopeLab.label:			Slope:
    *modLowLab.label:			Lower bandpass:
    *modUpLab.label:			Upper bandpass:
    *modFluxLab.label:			Flux:
    *modEqwLab.label:			Eq. Width:

    *modProfVal.fromHoriz:		modProfLab
    *modCenVal.fromHoriz:		modCenLab
    *modPeakVal.fromHoriz:		modPeakLab
    *modGFWHMVal.fromHoriz:		modGFWHMLab
    *modLFWHMVal.fromHoriz:		modLFWHMLab
    *modContVal.fromHoriz:		modContLab
    *modSlopeVal.fromHoriz:		modSlopeLab
    *modLowVal.fromHoriz:		modLowLab
    *modUpVal.fromHoriz:		modUpLab
    *modFluxVal.fromHoriz:		modFluxLab
    *modEqwVal.fromHoriz:		modEqwLab

    *modProfVal.menuName:		profMenu

    ! Equivalent Width Shell
    *eqwLayout.layout: vertical {\
	eqwMBFrame <+inf -inf *> 10\
	eqwValues <+inf -inf *>\
    }
    *eqwMenuBar.layout: horizontal {4\
	eqwAll 4\
	eqwEqwidth 4\
	<+inf -inf>\
	eqwHelp 4\
	eqwDismiss 4\
    }
    *eqwValues.layout: vertical {\
	horizontal {eqwLineLab eqwLine <+inf -inf *>}\
	30\
	horizontal {eqwLow <+inf -inf *> eqwUp <+inf -inf *>}\
	horizontal {eqwCen <+inf -inf *> eqwCont <+inf -inf *>}\
	horizontal {eqwFlux <+inf -inf *> eqwEqw <+inf -inf *>}\
    }

    *eqwShell.title:			Equivalent Widths
    *eqwEqwidth.label:			Equivalent Width
    *eqwAll.label:			All
    *eqwHelp.label:			Help
    *eqwDismiss.label:			Dismiss

    *eqwLineLab.label:		Spectral line:
    *eqwLowLab.label:			Lower bandpass:
    *eqwUpLab.label:			Upper bandpass:
    *eqwCenLab.label:			Center:
    *eqwContLab.label:			Continuum:
    *eqwFluxLab.label:			Flux:
    *eqwEqwLab.label:			Eq. Width:

    *eqwLowVal.fromHoriz:		eqwLowLab
    *eqwUpVal.fromHoriz:		eqwUpLab
    *eqwCenVal.fromHoriz:		eqwCenLab
    *eqwContVal.fromHoriz:		eqwContLab
    *eqwFluxVal.fromHoriz:		eqwFluxLab
    *eqwEqwVal.fromHoriz:		eqwEqwLab

    *eqwValues*Label.justify:		right
    *eqwValues*Label.width:		120
    *eqwValues*TextBox.location:	0 0 120 24

    ! Error Shell
    *errLayout.layout: vertical {\
	errMBFrame <+inf -inf *> 4\
	errForm <+inf -inf * +inf -inf>\
    }
    *errMenuBar.layout: horizontal {\
	errApply 2 <+inf -inf>\
	errHelp 2\
	errDismiss 2\
    }
    *errForm.layout: vertical {\
	errErrors <+inf -inf *> 20\
	errSamples <+inf -inf *> 4\
	errSigma <+inf -inf *> 4\
	errSeed <+inf -inf *> 4\
    }

    *errShell.title:			Error Computations
    *errApply.label:			Apply
    *errHelp.label:			Help
    *errDismiss.label:			Dismiss

    *errErrorsLab.label:		Compute errors?
    *errSamplesLab.label:		Number of Monte Carlo Samples
    *errSigmaLab.label:			Percentage of samples for sigma
    *errSeedLab.label:			Random number seed

    *gtMenuBar*Command.width:		50
    *gtApply.label:			Apply
    *gtHelp.label:			Help
    *gtDismiss.label:			Dismiss

    *errForm*Label.width:		250
    *errForm*Command.width:		100
    *errForm*Text.width:		100
    *errForm*Command.shadowWidth:	0
    *errForm*Label.justify:		right
    *errForm*Command.justify:		left

    *errErrorsVal.fromHoriz:		errErrorsLab
    *errSamplesVal.fromHoriz:		errSamplesLab
    *errSigmaVal.fromHoriz:		errSigmaLab
    *errSeedVal.fromHoriz:		errSeedLab

    ! Arithmetic Shell
    *arithLayout.layout: vertical {\
	arithMBFrame <+inf -inf *>\
	arithForm <+inf -inf *>\
	arithRegFrame <+inf -inf * +inf -inf>\
    }
    *arithMenuBar.layout: horizontal {4\
	1 <+inf -inf>\
	arithHelp 4\
	arithDismiss 4\
    }
    *arithForm.layout: vertical {\
	4 horizontal {arithTemplateLab arithTemplate <+inf -inf *>\
	              10 arithOutLab arithOut <+inf -inf *>}\
	4 horizontal {arithExprLab arithExpr <+inf -inf *>}\
	4 horizontal {arithTypes arithSpec arithCont arithRaw\
		      arithSky arithSig 1 <+inf -inf>}\
	4\
    }
    *arithRegLayout.layout: vertical {\
	arithRegView <+inf -inf * +inf -inf> arithRegHelp <+inf -inf *>\
    }

    *arithShell.title:			Spectrum Arithmetic
    *arithHelp.label:			Help
    *arithDismiss.label:		Dismiss

    *arithTemplateLab.label:		Template register:
    *arithOutLab.label:			Output register:
    *arithExprLab.label:		Expression:
    *arithTypes.label:			Spectrum types:
    *arithSpec.label:			Spectrum
    *arithCont.label:			Continuum
    *arithRaw.label:			Raw
    *arithSky.label:			Sky
    *arithSig.label:			Sigma

    *arithRegView.allowHoriz:		false
    *arithRegView.allowVert:		true
    *arithRegList*height:		100
    *arithRegList*forceColumns:		true
    *arithRegList*defaultColumns:	1

    ! Save Shell
    *saveLayout.layout: vertical {\
	saveMBFrame <+inf -inf *>\
	saveVLayout <+inf -inf * +inf -inf>\
    }
    *saveMenuBar.layout: horizontal {\
	saveFile\
	10 <+inf -inf>\
	saveFileLabel\
	saveFilename <+inf -inf *>\
	10 <+inf -inf>\
	saveHelp\
	4 saveDismiss\
    }
    *saveVLayout.layout: vertical {\
	saveView <+inf -inf * +inf -inf>\
	saveListHelp <+inf -inf *>\
    }

    *saveShell.title:			Write Spectrum
    *saveFile.label:			File
    *saveHelp.label:			Help
    *saveDismiss.label:			Dismiss

    *saveFile.menuName:			saveFileMenu
    *saveFileLabel.label:		Output file:

    *saveView.allowHoriz:			False
    *saveView.allowVert:			True
    *saveView.forceBars:			True
    *saveList*width:				530
    *saveList*height:				100
    *saveList*forceColumns:			True
    *saveList*defaultColumns:			1

    *saveListHelp.shrinkToFit:		true
    *saveListHelp.label: \
	\ Button 1: Select spectrum to save\n\
	  Output spectrum name must be set first!
    *saveListHelp.TextBox.shrinkToFit:	True

    ! Print Shell
    *printLayout.layout: vertical {\
	printMBFrame <+inf -inf *>\
	printPFrame <+inf -inf * +inf -inf>\
    }
    *printMenuBar.layout: horizontal {\
	printPrint 4\
	printPS 4\
	printEPS 4\
	printScreen 4 <+inf -inf>\
	printHelp 4\
	printDismiss 4\
    }
    *printParams.layout: vertical {\
	horizontal {printLabel printValue <+inf -inf *>} 2\
	horizontal {printPSLabel printPSValue <+inf -inf *>} 2\
	horizontal {printEPSLabel printEPSValue <+inf -inf *>} 2\
	horizontal {\
	    printWidthLab printWidthVal <+inf -inf *>\
	    printHeightLab printHeightVal <+inf -inf *>\
	} 2\
    }

    *printShell.title:			Print
    *printPrint.label:			Print
    *printPS.label:			PS
    *printEPS.label:			EPS
    *printScreen.label:			Screen
    *printHelp.label:			Help
    *printDismiss.label:		Dismiss

    *printParams*Label.justify:		right
    *printLabel.label:			Printer device name:
    *printPSLabel.label:		Postscript device name:
    *printEPSLabel.label:		EPS device name:
    *printWidthLab.label:		Screen width:
    *printHeightLab.label:		Screen height:
    *printValue*string:			stdplot
    *printPSValue*string:		psdump
    *printEPSValue*string:		eps
    *printWidthVal*string:		400
    *printHeightVal*string:		300

    ! Stack Shell
    *stackShell.title:			Overplot and Stack Spectra
    *stackLayout.layout: vertical {\
	stackMBFrame <+inf -inf *>\
	stackForm <+inf -inf * +inf -inf>\
    }
    *stackMenuBar.layout: horizontal {\
	stackOverplot 4 stackStack 4 <+inf -inf> stackHelp 4 stackDismiss\
    }
    *stackForm.layout: vertical {\
	stackValue4 <+inf -inf *>\
	stackValue5 <+inf -inf *>\
	10 horizontal {stackLabel1 2 stackValue1 <+inf -inf *>}\
	2 horizontal {stackLabel2 2 stackValue2 <+inf -inf *>}\
	2 horizontal {stackLabel3 2 stackValue3 <+inf -inf *>}\
	10\
    }

    *stackOverplot.label:		Overplot
    *stackStack.label:			Stack
    *stackHelp.label:			Help
    *stackDismiss.label:		Dismiss

    *stackValue4.label:			Automatic line types?
    *stackValue5.label:			Automatic colors?
    *stackLabel1.label:			\      Scaling
    *stackLabel2.label:			\Stacking type
    *stackLabel3.label:			\Stacking step
    *stackValue1.menuName:		stackMenu1
    *stackValue2.menuName:		stackMenu2
    *stackLabel1.width:			150
    *stackLabel2.width:			150
    *stackLabel3.width:			150
    *stackValue1.width:			150
    *stackValue2.width:			150
    *stackValue3.width:			150
    *stackForm*MenuButton.shadowWidth:	0
    *stackForm*Label.justify:		right
    *stackForm*MenuButton.justify:	left

    ! Stat Form
    *statShell.title:			Statistics
    *statLayout.layout: vertical {\
	statMBFrame <+inf -inf *>\
	4 statRegion <+inf -inf *>\
	4 statForm <+inf -inf * +inf -inf>\
	4 \
    }
    *statMenuBar.layout: horizontal {\
	2 statMeasure\
	1 <+inf -inf> statHelp\
	2 statDismiss\
    }
    *statForm.layout: vertical {\
	horizontal {stat1 stat1val <+inf -200 *>}\
	horizontal {stat2 stat2val <+inf -200 *>}\
	horizontal {stat3 stat3val <+inf -200 *>}\
	horizontal {stat4 stat4val <+inf -200 *>}\
	horizontal {stat5 stat5val <+inf -200 *>}\
	horizontal {stat6 stat6val <+inf -200 *>}\
	horizontal {stat7 stat7val <+inf -200 *>}\
	horizontal {stat8 stat8val <+inf -200 *>}\
	horizontal {stat9 stat9val <+inf -200 *>}\
	horizontal {stat10 stat10val <+inf -200 *>}\
	horizontal {stat11 stat11val <+inf -200 *>}\
	horizontal {stat12 stat12val <+inf -200 *>}\
	horizontal {stat13 stat13val <+inf -200 *>}\
	horizontal {stat14 stat14val <+inf -200 *>}\
    }
    *statRegion.layout: horizontal {\
	 2 statX1Label 2 statX1 <+inf -inf *>\
	10 statX2Label 2 statX2 <+inf -inf *> 2\
    }

    *statMeasure.label:			Measure
    *statHelp.label:			Help
    *statDismiss.label:			Dismiss

    *statX1Label.label:			From:
    *statX2Label.label:			To:
    *stat1val.label:			\             
    *statForm.TextBox.topMargin:	1	
    *statForm.TextBox.bottomMargin:	1	
    *statForm.TextBox.shrinkToFit:	False
    *statForm.TextBox.location:		0 0 120 24

    *statForm.TextToggle.Abs_width:	450
    *stat1*label:  x     = Mean dispersion coordinate                     =
    *stat2*label:  n     = Number of pixels                               =
    *stat3*label:  S     = Mean of spectrum                               =
    *stat4*label:  N1    = Standard deviation about mean                  =
    *stat5*label:  N2    = Standard deviation about linear fit            =
    *stat6*label:  N3    = Standard deviation about continuum             =
    *stat7*label:  N4    = Standard deviation from poisson statistics     =
    *stat8*label:  N5    = Mean of sigma spectrum                         =
    *stat9*label:  S/N1  = Signal to noise ratio                          =
    *stat10*label: S/N2  = Signal to noise ratio                          =
    *stat11*label: S/N3  = Signal to noise ratio                          =
    *stat12*label: S/N4  = Signal to noise ratio                          =
    *stat13*label: S/N5  = Signal to noise ratio                          =
    *stat14*label: <S/N> = Mean of pixel S/N from data and sigma spectrum =


    ! Dereddening Shell
    *deredLayout.layout: vertical {\
	deredMBFrame <+inf -inf *>\
	deredPFrame <+inf -inf * +inf -inf>\
    }
    *deredMenuBar.layout: horizontal {\
	deredDered 1 <+inf -inf> deredHelp 4 deredDismiss}
    *deredParams.layout: vertical {\
	horizontal {deredLabel1 4 deredParam1 <+inf -inf *>} 10\
	horizontal {deredLabel2 4 deredParam2 <+inf -inf *>}\
	horizontal {deredLabel3 4 deredParam3 <+inf -inf *>}\
	deredParam4 <+inf -inf *>\
	deredParam5 <+inf -inf *>\
    }
    *deredParam3.layout: horizontal {\
	deredParam31 <+inf -inf *>\
	deredParam32 <+inf -inf *>\
	deredParam33 <+inf -inf *>\
    }

    *deredShell.title:			Deredden Spectra
    *deredDered.label:			Deredden
    *deredHelp.label:			Help
    *deredDismiss.label:			Dismiss

    *deredParams*Abs_width:		80
    *deredLabel1*label:			\   Extinction ratio R(V):
    *deredLabel2*label:			\     Reddening parameter:
    *deredLabel3*label:			\Reddening parameter type:
    *deredParam31*label:		A(V)
    *deredParam32*label:		E(B-V)
    *deredParam33*label:		c
    *deredParam4*label:			Uncorrect previous reddening
    *deredParam5*label:			Override previous reddening

    ! Sigma Clipping
    *sclipShell*title:			Sigma Clipping
    *sclipClip.label:			Clip
    *sclipHelp.label:			Help
    *sclipDismiss.label:		Dismiss
    *sclipSigmaLab.label:		Sigma
    *sclipLowLab.label:			Low Clip
    *sclipHighLab.label:		High Clip
    *sclipRadiusLab.label:		Radius (pixels)

    *sclipSigmaVal.fromHoriz:		sclipSigmaLab
    *sclipLowVal.fromHoriz:		sclipLowLab
    *sclipHighVal.fromHoriz:		sclipHighLab
    *sclipRadiusVal.fromHoriz:		sclipRadiusLab

    *sclipParams*Label.justify:		right
    *sclipParams*Label.width:		120
    *sclipParams*Text.width:		120

    *sclipLayout.layout: vertical {\
	sclipMBFrame <+inf -inf *>\
	4 sclipParams <+inf -inf *>\
    }
    *sclipMBLayout.layout: horizontal {\
	sclipClip 2 <+inf -inf> sclipHelp 2 sclipDismiss\
    }
    *sclipParams.layout: vertical {\
	sclipSigma 2 sclipLow 2 sclipHigh 2 sclipRadius\
    }

    ! Spectrum windows
    !-----------------
    *specShell0*title:			Spectool Graph
    *specDismiss0.label:		Dismiss
    *specLayout0.layout: vertical {\
	specMBFrame0 <+inf -inf *>\
	specGterm0 <+inf -inf * +inf -inf>\
    }
    *specMBLayout0.layout: horizontal {0 <+inf -inf> specDismiss0}
    *specGterm0.sensitive:		False
    *specShell1*title:			Spectool Graph
    *specDismiss1.label:		Dismiss
    *specLayout1.layout: vertical {\
	specMBFrame1 <+inf -inf *>\
	specGterm1 <+inf -inf * +inf -inf>\
    }
    *specMBLayout1.layout: horizontal {0 <+inf -inf> specDismiss1}
    *specGterm1.sensitive:		False
    *specShell2*title:			Spectool Graph
    *specDismiss2.label:		Dismiss
    *specLayout2.layout: vertical {\
	specMBFrame2 <+inf -inf *>\
	specGterm2 <+inf -inf * +inf -inf>\
    }
    *specMBLayout2.layout: horizontal {0 <+inf -inf> specDismiss2}
    *specGterm2.sensitive:		False
    *specShell3*title:			Spectool Graph
    *specDismiss3.label:		Dismiss
    *specLayout3.layout: vertical {\
	specMBFrame3 <+inf -inf *>\
	specGterm3 <+inf -inf * +inf -inf>\
    }
    *specMBLayout3.layout: horizontal {0 <+inf -inf> specDismiss3}
    *specGterm3.sensitive:		False
    *specShell4*title:			Spectool Graph
    *specDismiss4.label:		Dismiss
    *specLayout4.layout: vertical {\
	specMBFrame4 <+inf -inf *>\
	specGterm4 <+inf -inf * +inf -inf>\
    }
    *specMBLayout4.layout: horizontal {0 <+inf -inf> specDismiss4}
    *specGterm4.sensitive:		False
    *specShell5*title:			Spectool Graph
    *specDismiss5.label:		Dismiss
    *specLayout5.layout: vertical {\
	specMBFrame5 <+inf -inf *>\
	specGterm5 <+inf -inf * +inf -inf>\
    }
    *specMBLayout5.layout: horizontal {0 <+inf -inf> specDismiss5}
    *specGterm5.sensitive:		False
    *specShell6*title:			Spectool Graph
    *specDismiss6.label:		Dismiss
    *specLayout6.layout: vertical {\
	specMBFrame6 <+inf -inf *>\
	specGterm6 <+inf -inf * +inf -inf>\
    }
    *specMBLayout6.layout: horizontal {0 <+inf -inf> specDismiss6}
    *specGterm6.sensitive:		False
    *specShell7*title:			Spectool Graph
    *specDismiss7.label:		Dismiss
    *specLayout7.layout: vertical {\
	specMBFrame7 <+inf -inf *>\
	specGterm7 <+inf -inf * +inf -inf>\
    }
    *specMBLayout7.layout: horizontal {0 <+inf -inf> specDismiss7}
    *specGterm7.sensitive:		False
    *specShell8*title:			Spectool Graph
    *specDismiss8.label:		Dismiss
    *specLayout8.layout: vertical {\
	specMBFrame8 <+inf -inf *>\
	specGterm8 <+inf -inf * +inf -inf>\
    }
    *specMBLayout8.layout: horizontal {0 <+inf -inf> specDismiss8}
    *specGterm8.sensitive:		False
    *specShell9*title:			Spectool Graph
    *specDismiss9.label:		Dismiss
    *specLayout9.layout: vertical {\
	specMBFrame9 <+inf -inf *>\
	specGterm9 <+inf -inf * +inf -inf>\
    }
    *specMBLayout9.layout: horizontal {0 <+inf -inf> specDismiss9}
    *specGterm9.sensitive:		False

    ! Define the ICFIT GUI resources.
    !--------------------------------
    *icShell*title:                       Interactive Curve Fitting

    *icPlotButton.label:		Plots
    *icPlotButton.menuName:		icPlotMenu
    *icFuncButton.label:		Function
    *icFuncButton.menuName:		icFuncMenu
    *icOrderButton.label:		Order
    *icOrderButton.menuName:		icOrderMenu
    *icMiscButton.label:		Misc
    *icMiscButton.menuName:		icMiscMenu
    *icMarkRej.label:			Mark Rej
    *icEdit.label:			Edit Fit Pars
    *icRefit.label:			Refit
    *icHelp.label:			Help
    *icQuit.label:			Quit

    *icLayout.layout:	vertical { \
        -1 \
        vertical { \
            icMenuFrame < +inf -inf * > \
            icGterm < +inf -inf * +inf -inf > \
        } \
        -1 \
    }

    *icMenuFrame.height:		40
    *icMenuFrame.outerOffset:		0
    *icMenuFrame.innerOffset:		5
    *icMenuFrame.frameType:		chiseled
    *icMenuFrame.frameWidth:		2
    *icMenuBar*SmeBSB.leftMargin:	25
    *icMenuBar.layout:	horizontal { \
        icPlotButton   2 \
        icFuncButton   2 \
        icOrderButton  2 \
        icMiscButton   2 \
        icMarkRej      2 \
        icEdit         2 \
        icRefit        2 \
        140 < +inf -inf > \
        icHelp         2 \
        icQuit         2 \
    }
    *icMarkRej.state:			on

    *icGterm.translations:      \
               <Btn1Down>:      call(gtMarker,$name,$x,$y) m_create() \n\
               <Btn2Down>:      call(gtShift,$name,$x,$y) m_create() \n\
            <EnterWindow>:      enter-window() \n\
            <LeaveWindow>:      leave-window() \n\
               <KeyPress>:      graphics-input() \n\
                 <Motion>:      track-cursor() call(gtWcsUpdate,$name,$x,$y)


    !  Resources for the ICFIT parameter editor window. 
    !--------------------------------------------------
    *icfitPars.title:			Curfit Parameters

    *icfitpLayout.layout: vertical { \
        0 < +0 -0 > \
        icfparsForms 	  < +inf -inf * +inf -inf > \
        icfpCmdFrame 	  < +inf -inf * > \
        0 < +0 -0 > \
    }

    *icfparsForms.layout: vertical { \
	5 \
	icFunc \
	icOrder \
	icGrow \
	icMarkrej \
	icNaverage \
	icNiter \
	icLowrej \
	icHirej \
	icSample \
	5 \
    }
    
    *icfparsForms*background:			 gray85
    *icfparsForms*borderWidth:			 0
    *icfparsForms*shadowWidth:			 0
    *icfparsForms*Label*background:		 gray85
    *icfparsForms*Label*width:			 200
    *icfparsForms*Label*justify:		 right
    *icfparsForms*Text*background:               gray75
    *icfparsForms*Text*width:	                 100
    *icfparsForms*Text*editType:                 edit
    *icfparsForms*Text*displayCaret:             False
    *icfparsForms*Command*width:	         100
    *icfparsForms*Command.background:            gray75
    *icfparsForms*Command.highlightThickness:    2
    *icfparsForms*MenuButton.background:         gray75
    *icfparsForms*MenuButton*width:	         100
    *icfparsForms*MenuButton.highlightThickness: 2


    *icFuncName.label:			Fitting Function:
    *icOrderName.label:			Function Order:
    *icGrowName.label:			Grow Radius:
    *icMarkrejName.label:		Mark Rejected Points:
    *icNaverageName.label:		Npts to Average:
    *icNiterName.label:			Number of Fit Iterations:
    *icLowrejName.label:		Low Sigma Rejection Limit:
    *icHirejName.label:			High Sigma Rejection Limit:
    *icSampleName.label:		Sample Regions:

    *icFuncValue.fromHoriz:		icFuncName
    *icOrderValue.fromHoriz:		icOrderName
    *icGrowValue.fromHoriz:		icGrowName
    *icMarkrejValue.fromHoriz:		icMarkrejName
    *icNaverageValue.fromHoriz:		icNaverageName
    *icNiterValue.fromHoriz:		icNiterName
    *icLowrejValue.fromHoriz:		icLowrejName
    *icHirejValue.fromHoriz:		icHirejName
    *icSampleValue.fromHoriz:		icSampleName
    
    *icFuncValue.label:			spline3
    *icFuncValue.menuName:		icparsFuncMenu
    *icFuncValue.justify:		left
    *icMarkrejValue.label:		yes
    *icMarkrejValue.justify:		left
    *icSampleValue.scrollHorizontal:	Never
    
    ! Do the command bar group resources.
    !------------------------------------
    *icfpCmdFrame.frameType:            sunken
    *icfpCmdFrame.frameWidth:    	1
    *icfpCmdFrame.outerOffset:          0
    *icfpCmdFrame.innerOffset:          5
    *icfpCmdFrame.background:           gray75
    *icfpCmdFrame*Command.background:	gray85
    *icfparsCmd.background: 		gray75
    *icfparsCmd.layout: vertical { \
        2 \
        horizontal { \
    	    icfparsApply   2 \
    	    icfparsCancel \
            10 < +inf -10> \
    	    icfparsHelp    2 \
    	    icfparsDismiss \
        } \
        2 \
    }
    *icfparsApply.label:	 	Apply
    !*icfparsUnlearn.label:	 	Unlearn
    *icfparsCancel.label:	 	Cancel
    *icfparsHelp.label:	 		Help
    *icfparsHelp.sensitive:		False
    *icfparsDismiss.label:	 	Dismiss


    ! ICFIT Help
    !-----------
    *icHelpShell.title:                 Curfit Help
    *icHelpShell.width:                 560
    *icHelpShell.height:                560
    *icHelpDismiss.label:               Dismiss
    *icHelpLayout.layout: vertical {\
        icHelpMenuFrame <+inf -inf *> 2\
        icHelpFrame <+inf -inf * +inf -inf> 2\
    }
    *icHelpMenuBar.layout: horizontal { 2 <+inf -inf> icHelpDismiss 5 }
    *icHelpMenuBar.height:		30
    *icHelpMenuFrame.frameType:         chiseled
    *icHelpMenuFrame.frameWidth:        3
    *icHelpMenuFrame.background:        gray85
    *icHelpMenuFrame.innerOffset:	2
    *icHelpFrame.frameType:             sunken
    *icHelpFrame.frameWidth:            3
    *icHelpFrame.background:            gray85


    ! ICFIT Show
    !-----------
    *icShowShell.title:                 Curfit Show
    *icShowShell.width:                 512
    *icShowShell.height:                350
    *icShowDismiss.label:               Dismiss
    *icShowLayout.layout: vertical {\
        icShowMenuFrame <+inf -inf *> 2\
        icTextFrame <+inf -inf * +inf -inf> 2\
    }

    *icShowMenuBar.layout: horizontal { 2 <+inf -inf> icShowDismiss 5 }
    *icShowMenuBar.height:		30
    *icShowMenuFrame.frameType:         chiseled
    *icShowMenuFrame.frameWidth:        3
    *icShowMenuFrame.background:        gray85
    *icShowMenuFrame.innerOffset:	2
    *icShowMenuFrame.outerOffset:	0
    *icTextFrame.frameType:             sunken
    *icTextFrame.frameWidth:            3
    *icTextFrame.background:            gray85
    *icShowText*scrollVertical:         always
    *icShowText*scrollHorizontal:       whenNeeded

      *gterm1.translations:	\
	       <Btn1Down>:	call(makeRegion,$name,$x,$y) m_create() \n\
	       <Btn2Down>:	call(roam,$name,$x,$y) \n\
	    <EnterWindow>:      enter-window() call(windowEnter,$name)\n\
	    <LeaveWindow>:      leave-window()          \n\
	       <KeyPress>:      graphics-input()        \n\
	         <Motion>:      track-cursor() call(wcsUpdate,$name,$x,$y)

    *gterm2.translations:	\
	       <Btn1Down>:	call(makeRegion,$name,$x,$y) m_create() \n\
	       <Btn2Down>:	call(roam,$name,$x,$y) m_create() \n\
	    <EnterWindow>:      enter-window() call(windowEnter,$name)\n\
	    <LeaveWindow>:      leave-window()          \n\
	       <KeyPress>:      graphics-input() 	\n\
	         <Motion>:      track-cursor() call(wcsUpdate,$name,$x,$y)

   *MenuButton.translations: #override \
		<BtnDown>:	set() notify() reset() PopupMenu()

    *regList.translations:	\
     <Btn1Down>,<Btn1Up>:	Set() call(regPlot,plot,item)	\n\
	      <Key>space:	Set() call(regPlot,select,item)	\n\
	          <Key>d:	Set() call(deleteReg)		\n\
	     <Key>Delete:	Set() call(deleteReg)
    *regListHelp.shrinkToFit:	True
    *regListHelp.label:	\
	\ Button 1: Plot  <Space>: Select   <Delete>/d: Delete

    *arithRegList.translations:	\
	          <Key>+:	Set() call(regArith,$name,add)		\n\
	          <Key>-:	Set() call(regArith,$name,sub)		\n\
	          <Key>*:	Set() call(regArith,$name,mul)		\n\
	          <Key>/:	Set() call(regArith,$name,div)
    *arithRegHelp.shrinkToFit:	True
    *arithRegHelp.label:	\
	\ +,-,*,/: Apply to current spectrum

    *lids_List.translations:	\
     <Btn1Down>,<Btn1Up>:	Set() call(lineList,$name,select)	\n\
	          <Key>c:	Set() call(lineList,$name,center)	\n\
	          <Key>d:	Set() call(lineList,$name,delete)	\n\
	          <Key>e:	Set() call(lineList,$name,eqwidth)	\n\
	          <Key>f:	Set() call(lineList,$name,fit)		\n\
	          <Key>l:	Set() call(lineList,$name,label)	\n\
	          <Key>p:	Set() call(lineList,$name,plot)		\n\
	          <Key>s:	Set() call(lineList,$name,subtract)	\n\
	     <Key>Delete:	Set() call(lineList,$name,delete)
    *lids_ListHelp.shrinkToFit:	True
    *lids_ListHelp.label:	\
	\ Button 1: Select     c: Center    d,<Delete>: Delete\n\
	  e: Equivalent width  f: Fit       l: Label toggle\n\
	  p: Profile toggle    s: Subtract/Add toggle

    *llList.translations:	\
     <Btn1Down>,<Btn1Up>:	Set() call(llSelect,select)		\n\
     <Btn2Down>,<Btn2Up>:	Set() call(llSelect,mark)		\n\
	          <Key>m:	Set() call(llSelect,mark)
    *llListHelp.shrinkToFit:	True
    *llListHelp.label:	\
	\ Button 1: Select for current line\n\
	  Button 2,m: Mark in spectrum

    *labelList.translations:	\
     <Btn1Down>,<Btn1Up>:	Set() call(labelList,$name,select)	\n\
	          <Key>d:	Set() call(labelList,$name,delete)	\n\
	          <Key>l:	Set() call(labelList,$name,label)	\n\
	     <Key>Delete:	Set() call(labelList,$name,delete)
    *labelListHelp.shrinkToFit:	True
    *labelListHelp.label:	\
	\ Create labels using cursor and :glabel/:slabel commands\n\
	\ Button 1: Select  <Delete>,d: Delete  l: Label toggle
}
createObjects
send gterm2 setGterm
send gterm2 activate
send gterm1 setGterm
send gterm1 activate
activate


# Define the bitmaps.
createBitmap qmark 16 16 {
   0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xf8, 0x0f, 0x18, 0x0c, 0x18, 0x0c,
   0x18, 0x0e, 0x00, 0x07, 0x80, 0x03, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00,
   0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00};

createBitmap check 16 16 {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x60,
   0x00, 0x30, 0x00, 0x18, 0x00, 0x0c, 0x08, 0x06, 0x18, 0x03, 0xb0, 0x01,
   0xe0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00
}

createBitmap null 16 16 {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

# Global variables.
set version	"Spectool 0.1 - Alpha Test Version"
set YN(0)	NO
set YN(1)	YES
set yn(0)	no
set yn(1)	yes
set gterm gterm1
set winWidth(gterm1)	 [send gterm1 get width]
set winHeight(gterm1)	 [send gterm1 get height]
set winWidth(gterm2)	 [send gterm2 get width]
set winHeight(gterm2)	 [send gterm2 get height]
set wcsbox(gterm1) wcsbox1
set wcsbox(gterm2) wcsbox2
set markerGterm ""
set dispType 2
send gtBType set label line1
send gtEType set label vebar
send gtBColor set label foreground
send wcs setValue "0 1 0 1 0 1 0 1"
send finder_wcs setValue "0 1 0 1 0 1 0 1"

getResources {
	{ color0Name gtcolors(0) }
	{ color1Name gtcolors(1) }
	{ color2Name gtcolors(2) }
	{ color3Name gtcolors(3) }
	{ color4Name gtcolors(4) }
	{ color5Name gtcolors(5) }
	{ color6Name gtcolors(6) }
	{ color7Name gtcolors(7) }
	{ color8Name gtcolors(8) }
	{ color9Name gtcolors(9) }
}
set gticolors($gtcolors(0)) 0
set gticolors($gtcolors(1)) 1
set gticolors($gtcolors(2)) 2
set gticolors($gtcolors(3)) 3
set gticolors($gtcolors(4)) 4
set gticolors($gtcolors(5)) 5
set gticolors($gtcolors(6)) 6
set gticolors($gtcolors(7)) 7
set gticolors($gtcolors(8)) 8
set gticolors($gtcolors(9)) 9
set gticolors(INDEF) INDEF

set colorMenu {
    {Colors		f.title}
    {			f.dblline}
    {$gtcolors(0)	f.exec "setMenuLabel $gtcolors(0)"}
    {$gtcolors(1)	f.exec "setMenuLabel $gtcolors(1)"}
    {$gtcolors(2)	f.exec "setMenuLabel $gtcolors(2)"}
    {$gtcolors(3)	f.exec "setMenuLabel $gtcolors(3)"}
    {$gtcolors(4)	f.exec "setMenuLabel $gtcolors(4)"}
    {$gtcolors(5)	f.exec "setMenuLabel $gtcolors(5)"}
    {$gtcolors(6)	f.exec "setMenuLabel $gtcolors(6)"}
    {$gtcolors(7)	f.exec "setMenuLabel $gtcolors(7)"}
    {$gtcolors(8)	f.exec "setMenuLabel $gtcolors(8)"}
    {$gtcolors(9)	f.exec "setMenuLabel $gtcolors(9)"}
}

set typeMenu {
    {"Line or Symbol Types"		f.title}
    {					f.dblline}
    {"line1 - Solid line"		f.exec "setMenuLabel line1"}
    {"hist1 - Solid histogram"		f.exec "setMenuLabel hist1"}
    {"line2 - Line pattern 2"		f.exec "setMenuLabel line2"}
    {"hist2 - Histogram pattern 2"	f.exec "setMenuLabel hist2"}
    {"line3 - Line pattern 3"		f.exec "setMenuLabel line3"}
    {"hist3 - Histogram pattern 3"	f.exec "setMenuLabel hist3"}
    {"line4 - Line pattern 4"		f.exec "setMenuLabel line4"}
    {"hist4 - Histogram pattern 4"	f.exec "setMenuLabel hist4"}
    {"point - Points"			f.exec "setMenuLabel point"}
    {"box - Box symbols"		f.exec "setMenuLabel box"}
    {"plus - Plus symbols"		f.exec "setMenuLabel plus"}
    {"cross - Cross symbols"		f.exec "setMenuLabel cross"}
    {"diamond - Diamond symbols"	f.exec "setMenuLabel diamond"}
    {"circle - Circle symbols"		f.exec "setMenuLabel circle"}
    {"hline - Horizontal line"		f.exec "setMenuLabel hline"}
    {"vline - Vertical line"		f.exec "setMenuLabel vline"}
    {"hebar - Horizontal error bar"	f.exec "setMenuLabel hebar"}
    {"vebar - Horizontal error bar"	f.exec "setMenuLabel vebar"}
}

# Set state of GUI.

proc map {widget} {
    send $widget unmap
    send $widget map
}

proc setGui {param old new} {
    global	helpfile
    global	mapped
    global	viewMenuDescription

    set name  [lindex $new 0]
    set value [lindex $new 1]

    switch $name {
    read	{map readShell}
    interactive {send client gcmd "errclear YES"}
    helpfile	{if {![info exists helpfile]} {set helpfile ""}
		 if {$helpfile != $value} {send client gcmd "help load $value"}
		 set helpfile $value
		}
    viewcntrl	{if {$value} {map cntrlShell} else {send cntrlShell unmap}}
    finder	{send panToggle set state $value
		 if {$value} {map viewShell} else {send viewShell unmap}}
    coords	{setTrack [send wcsToggle get state] [expr {$value=="YES"}]}
    stypes	{send specToggle set state [lindex $new 1]
		 send contToggle set state [lindex $new 4]
		 send rawToggle  set state [lindex $new 2]
		 send skyToggle  set state [lindex $new 3]
		 send sigToggle  set state [lindex $new 5]}
    lidsall	{send allToggle set state $value
		 send lidsAll set state $value
		 send llabAll set state $value
		 send modAll set state $value
		 send ctrAll set state $value
    		 send eqwAll set state $value}
    labelall	{send labelAll set state $value}
    overplot	{send oplotToggle set state $value
		 send stackOverplot set state $value}
    stack	{send stackToggle set state $value
		 send stackStack set state $value}
    xflip	{send xflipToggle set state $value}
    yflip	{send yflipToggle set state $value}
    zero	{send zeroToggle set state $value}
    labels	{send labelToggle set state $value
		 send labelShow set state $value}
    lines	{send lineToggle set state $value
		 send llabShow set state $value}
    models	{send modToggle set state $value
		 send modShow set state $value}
    stackpars	{send stackValue1 set label $value
		 send stackValue2 set label [lindex $new 2]
		 send stackValue3 set string [lindex $new 3]
		 send stackValue4 set on [lindex $new 4]
		 send stackValue5 set on [lindex $new 5]}
    imList	{if {$value < 0} {send readImList unhighlight
		 } else {send readImList highlight $value}}
    readList	{if {$value < 0} {send readList unhighlight
		 } else {send readList highlight $value}}
    regList	{if {$value < 0} {
		    send regList unhighlight
		    send arithRegList unhighlight
		 } else {
		     send regList highlight $value
		     send arithRegList highlight $value}}
    directory	{send readDir set string $value
		 send flistDir set string $value}
    images	{send readImages set string $value}
    files	{send flistTemplate set string $value}
    stackValue	{send stackValue3 set string $value}
    title	{if {$value != [send gtBTitle get string]} {
		 send gtBTitle set string $value}}
    xlabel	{if {$value != [send gtXLabel get string]} {
		 send gtXLabel set string $value}}
    xunits	{if {$value != [send gtXUnits get string]} {
		 send gtXUnits set string $value}}
    ylabel	{if {$value != [send gtYLabel get string]} {
		 send gtYLabel set string $value}}
    yunits	{if {$value != [send gtYUnits get string]} {
		 send gtYUnits set string $value}}
    etype	{if {$value != [send gtEType get label]} {
		 send gtEType set label $value}}
    }
}; send setGui addCallback setGui


# Dummy callback procedure for single line text fields.
proc null args {}

send saveFilename addCallback null
send printValue addCallback null
send printPSValue addCallback null
send printEPSValue addCallback null
send printWidthVal addCallback null
send printHeightVal addCallback null
send gtXSymsize addCallback null
send gtYSymsize addCallback null
send gtBTitle addCallback null
send gtBSubtitle addCallback null
send gtXLabel addCallback null
send gtYLabel addCallback null
send gtXUnits addCallback null
send gtYUnits addCallback null
send gtXView1 addCallback null
send gtYView1 addCallback null
send gtXView2 addCallback null
send gtYView2 addCallback null
send gtXAxiswidth addCallback null
send gtYAxiswidth addCallback null
send gtXNmajor addCallback null
send gtYNmajor addCallback null
send gtXNminor addCallback null
send gtYNminor addCallback null
send gtXFormat addCallback null
send gtYFormat addCallback null
send deredParam1 addCallback null
send deredParam2 addCallback null

# Dismiss
proc done {name args} {
	switch $name {
	helpDismiss		{send helpShell unmap}
	cntrlDismiss		{send cntrlShell unmap}
	regDismiss		{send regShell unmap}
	readDismiss		{send readShell unmap}
	gtDismiss		{send gtShell unmap}
	gtLabelsDismiss		{send gtLabelsShell unmap}
	gtAxesDismiss		{send gtAxesShell unmap}
	gtTicksDismiss		{send gtTicksShell unmap}
	rvDismiss		{send rvShell unmap}
	modDismiss		{send modShell unmap}
	eqwDismiss		{send eqwShell unmap}
	errDismiss		{send errShell unmap}
	arithDismiss		{send arithShell unmap}
	saveDismiss		{send saveShell unmap}
	printDismiss		{send printShell unmap}
	logDismiss		{send logShell unmap}
	viewDismiss		{send client gcmd pan NO}
	stackDismiss		{send stackShell unmap}
	statDismiss		{send statShell unmap}
	deredDismiss		{send deredShell unmap}
	labelDismiss		{send labelShell unmap}
	lidsDismiss		{send lidsShell unmap}
	llabDismiss		{send llabShell unmap}
	llDismiss		{send llShell unmap}
	ctrDismiss		{send ctrShell unmap}
	sclipDismiss		{send sclipShell unmap}
	specDismiss0		{send specShell0 unmap}
	specDismiss1		{send specShell1 unmap}
	specDismiss2		{send specShell2 unmap}
	specDismiss3		{send specShell3 unmap}
	specDismiss4		{send specShell4 unmap}
	specDismiss5		{send specShell5 unmap}
	specDismiss6		{send specShell6 unmap}
	specDismiss7		{send specShell7 unmap}
	specDismiss8		{send specShell8 unmap}
	specDismiss9		{send specShell9 unmap}
	dialogDismiss		{send dialogShell popdown}
	flistCancel		{send flistShell popdown}
	}
}
send helpDismiss addCallback done
send cntrlDismiss addCallback done
send regDismiss addCallback done
send readDismiss addCallback done
send gtDismiss addCallback done
send gtLabelsDismiss addCallback done
send gtAxesDismiss addCallback done
send gtTicksDismiss addCallback done
send rvDismiss addCallback done
send modDismiss addCallback done
send eqwDismiss addCallback done
send errDismiss addCallback done
send arithDismiss addCallback done
send saveDismiss addCallback done
send printDismiss addCallback done
send logDismiss addCallback done
send viewDismiss addCallback done
send stackDismiss addCallback done
send statDismiss addCallback done
send deredDismiss addCallback done
send labelDismiss addCallback done
send lidsDismiss addCallback done
send llabDismiss addCallback done
send llDismiss addCallback done
send ctrDismiss addCallback done
send sclipDismiss addCallback done
send specDismiss0 addCallback done
send specDismiss1 addCallback done
send specDismiss2 addCallback done
send specDismiss3 addCallback done
send specDismiss4 addCallback done
send specDismiss5 addCallback done
send specDismiss6 addCallback done
send specDismiss7 addCallback done
send specDismiss8 addCallback done
send specDismiss9 addCallback done
send dialogDismiss addCallback done
send flistCancel addCallback done

proc setErrormsg { param old new } {
    #send mainLabel set label $new
    print $new
}; send errorMsg addCallback setErrormsg

proc winResize {w width height} {
	global winWidth winHeight
	set winWidth($w) $width
	set winHeight($w) $height
	switch $w {
	gterm1 {setWcs wcs dummy [send wcs getValue]}
	gterm2 {send client gcmd "redraw finder"}
	}
}
send gterm1 addCallback winResize resize
send gterm2 addCallback winResize resize

proc npButtons {widget args} {
	switch $widget {
	nextButton	{send client gkey j}
	previousButton	{send client gkey k}
	}
}
send nextButton addCallback npButtons
send previousButton addCallback npButtons

proc windowEnter {widget} {
    global gterm
    if {$widget == $gterm} return

    set gterm $widget
    send $gterm setGterm
    switch $widget {
    gterm1	{send client gcmd "wcs 1"}
    gterm2	{send client gcmd "wcs 2"}
    }
}

# COORDINATE readout (WCS box display).

proc wcsUpdate { gterm x y } \
{
	global x0 dx y0 dy y1 wcsbox

	if {![send wcsToggle get state]} \
	    return

	# Convert screen coords to world coordinates.
	set w $gterm
	set wx [expr "$x0($w) + $dx($w) * $x"]
	set wy [expr "$y0($w) + $dy($w) * $y"]
	send $wcsbox($gterm) "set text \{$wx $wy\}; redraw noerase"
}

proc setTrack { oldstate newstate } {
	global winWidth winHeight wcsbox

	if {$newstate} {
	    if {$oldstate} \
		return

	    foreach gterm {gterm1 gterm2} {
		send $gterm createMarker $wcsbox($gterm) {
		    type		text
		    createMode	noninteractive
		    width		25ch
		    height		1ch
		    lineWidth	0
		    imageText	true
		    textBgColor	black
		    textColor	yellow
		    visible		false
		}

		set box_width [send $wcsbox($gterm) get width]
		set box_height [send $wcsbox($gterm) get height]

		send $wcsbox($gterm) setAttributes \
		    x		[expr "$winWidth($gterm) - $box_width - 5"] \
		    y		[expr "$winHeight($gterm) - $box_height - 5"] \
		    activated	true \
		    visible	true \
		    sensitive	true

		send $wcsbox($gterm) addCallback markerDestroy destroy
	    }

	    setWcs wcs dummy [send wcs getValue]
	    setWcs finder_wcs dummy [send finder_wcs getValue]
	    send wcsToggle set state $newstate

	} elseif {$oldstate} {
	    send $wcsbox(gterm1) destroy
	    send wcsToggle set state $newstate
	}
}

proc markerDestroy {marker args} {
	global markerGterm

	switch $marker {
	wcsbox1		{ send wcsbox2 destroy; send wcsToggle set state 0 }
	wcsbox2		{ send wcsbox1 destroy; send wcsToggle set state 0 }
	regionMarker	{ set markerGterm "" }
	}
}

# If the window is resized make the wcsbox track the corner.
proc wcsboxWindowResize {widget args} {
	if {[send wcsToggle get state]} {
	    setTrack YES NO
	    setTrack NO YES
	}
}

# Called when the wcs or window size changes.
proc setWcs { param old new } {
	global winWidth winHeight
	global x0 y0 dx dy y1

	set vx1 [lindex $new 0]
	set vx2 [lindex $new 1]
	set vy1 [lindex $new 2]
	set vy2 [lindex $new 3]
	set wx1 [lindex $new 4]
	set wx2 [lindex $new 5]
	set wy1 [lindex $new 6]
	set wy2 [lindex $new 7]

	switch $param {
	wcs		{set a gterm1; set b gterm1; set c 0.}
	finder_wcs	{set a gterm2; set b gterm2; set c 0.}
	}

	set width $winWidth($a)
	set height $winHeight($a)
	set y1($a) [expr "(1 - $c) * $height"]
	set dx($b) [expr "($wx2 - $wx1) / ($vx2 - $vx1) / ($width - 1)"]
	set x0($b) [expr "$wx1 - $dx($b) * $vx1 * ($width - 1)"]
	set dy($b) [expr "($wy2 - $wy1) / ($vy1 - $vy2) / ($height - 1)"]
	set y0($b) [expr "$wy1 - $dy($b) * (1 - $vy1) * ($height - 1)"]
}

proc setWcsMarker { param old new } {
	    global x0 y0 dx dy
	    global markerGterm

	    if {$markerGterm == "gterm1"} {
		send regionMarker destroy
	    }

	    if {![send panToggle get state]} return

	    if {$param == "wcs"} {
		set auto [lindex $new 11]
		if {$auto == "yes"} {
		    if {$markerGterm != ""} {send regionMarker destroy}
		    return
		}

		set wx1 [lindex $new 4]
		set wx2 [lindex $new 5]
		set wy1 [lindex $new 6]
		set wy2 [lindex $new 7]

		set w gterm2
		set x1 [expr "($wx1 - $x0($w)) / $dx($w)"]
		set x2 [expr "($wx2 - $x0($w)) / $dx($w)"]
		set y1 [expr "($wy1 - $y0($w)) / $dy($w)"]
		set y2 [expr "($wy2 - $y0($w)) / $dy($w)"]
		set x [expr "($x1 + $x2) / 2."]
		set y [expr "($y1 + $y2) / 2."]
		set width [expr "abs (($x1 - $x2) / 2)"]
		set height [expr "abs (($y1 - $y2) / 2)"]
		setMarker $x $y $width $height
	    }
}

send wcs addCallback setWcs
send finder_wcs addCallback setWcs
send wcs addCallback setWcsMarker
send finder_wcs addCallback setWcsMarker
send gterm1 addCallback wcsboxWindowResize resize
send gterm2 addCallback wcsboxWindowResize resize

# Send UI coordinate to a widget.
# This may be used as a callback to a widget to paste the UI coordinate value.
# There may also be a callback procedure to the UI parameter to act immediately
# on new coordinate which then calls this routine to do the paste.

proc getCoord {widget value} {
	set coord [send coord getValue]
	set x [lindex $coord 0]
	send $widget set string $x
}

proc viewSetForm {param old new} {
    if {![send panToggle get state]} return
    send viewLeftValue set string [lindex $new 4]
    send viewRightValue set string [lindex $new 5]
    send viewBottomValue set string [lindex $new 6]
    send viewTopValue set string [lindex $new 7]
    send viewLClipValue set string [lindex $new 8]
    send viewHClipValue set string [lindex $new 9]
    send viewBufValue set string [lindex $new 10]
}

proc viewGetForm {widget args} {
    switch $widget {
    viewLClipValue -
    viewHClipValue {
        set lclip [send viewLClipValue get string]
        set hclip [send viewHClipValue get string]
        send client gcmd "clip $lclip $hclip" }
    viewBufValue {
        send client gcmd "/ybuf [send viewBufValue get string]"
	send client gcmd "redraw"}
    default {
        set xmin [send viewLeftValue get string]
        set xmax [send viewRightValue get string]
        set ymin [send viewBottomValue get string]
        set ymax [send viewTopValue get string]
        send client gcmd "region 1 $xmin $xmax $ymin $ymax"
        set lclip [send viewLClipValue get string]
        set hclip [send viewHClipValue get string]
        send client gcmd "clip $lclip $hclip" }
    }
}

send wcs addCallback viewSetForm
send viewLeftValue addCallback viewGetForm
send viewRightValue addCallback viewGetForm
send viewBottomValue addCallback viewGetForm
send viewTopValue addCallback viewGetForm
send viewLClipValue addCallback viewGetForm
send viewHClipValue addCallback viewGetForm
send viewBufValue addCallback viewGetForm
send viewFull addCallback viewFull

proc viewFull args { send client gcmd "region 1 INDEF INDEF INDEF INDEF" }

# File Menu
createMenu fileMenu fileButton {
    {"About File Menu"		f.exec "showHelp fileMenu"}
    {				f.dblline}
    {"Read..."                  f.exec "map readShell"}
    {"Write..."                 f.exec "map saveShell"}
    {"Print..."                 f.exec "map printShell"}
    {"Log..."                   f.exec "map logShell"}
    {                           f.line}
    {"Quit"                     f.exec "send client gcmd quit"}
}

# View Menu
set viewMenuDescription {
    {"About View Menu"		f.exec "showHelp viewMenu"}
    {				f.dblline}
    {"Control Panel..."		f.exec "map cntrlShell"}
    {"Registers..."             f.exec "map regShell"}
    {"Graph Spectra..."		f.exec "map gtShell"}
    {"Graph Labels..."		f.exec "map gtLabelsShell"}
    {"Graph Axes..."		f.exec "map gtAxesShell"}
    {"Graph Ticks..."		f.exec "map gtTicksShell"}
    {"Spectrum labels..."	f.exec "map labelShell"}
    {"Line labels..."		f.exec "map llabShell"}
    {"Overplot/Stack..."	f.exec "map stackShell"}
    {"Dispersion Units"		f.menu unitsMenu}
    {"Flux Units"		f.menu funitsMenu}
}; createMenu viewMenu viewButton $viewMenuDescription

createMenu unitsMenu viewButton {
{"About Dispersion Units"	f.exec "showHelp unitsMenu"}
{				f.dblline}
{"     default - Default coordinates"
		f.exec {send client gcmd "units default"}}
{"      pixels - Pixel coordinates"
		f.exec {send client gcmd "units pixels"}}
{"   angstroms - Wavelength in Angstroms"
		f.exec {send client gcmd "units angstroms"}}
{"  nanometers - Wavelength in nanometers"
		f.exec {send client gcmd "units nanometers"}}
{"millimicrons - Wavelength in millimicrons"
		f.exec {send client gcmd "units millimicrons"}}
{"     microns - Wavelength in microns"
		f.exec {send client gcmd "units microns"}}
{" millimeters - Wavelength in millimeters"
		f.exec {send client gcmd "units millimeters"}}
{"  centimeter - Wavelength in centimeters"
		f.exec {send client gcmd "units centimeter"}}
{"      meters - Wavelength in meters"
		f.exec {send client gcmd "units meters"}}
{"       hertz - Frequency in hertz"
		f.exec {send client gcmd "units hertz"}}
{"   kilohertz - Frequency in kilohertz"
		f.exec {send client gcmd "units kilohertz"}}
{"   megahertz - Frequency in megahertz"
		f.exec {send client gcmd "units megahertz"}}
{"    gigahertz - Frequency in gigahertz"
		f.exec {send client gcmd "units gigahertz"}}
{"          ev - Energy in electron volts"
		f.exec {send client gcmd "units ev"}}
{"         kev - Energy in kilo electron volts"
		f.exec {send client gcmd "units kev"}}
{"         mev - Energy in mega electron volts"
		f.exec {send client gcmd "units mev"}}
{"log units" f.menu logunitsMenu}
{"inverse units" f.menu invunitsMenu}
{"log inverse units" f.menu loginvunitsMenu}
}

createMenu logunitsMenu viewButton {
{"   log(angstroms)" f.exec {send client gcmd "units log angstroms"}}
{"  log(nanometers)" f.exec {send client gcmd "units log nanometers"}}
{"log(millimicrons)" f.exec {send client gcmd "units log millimicrons"}}
{"     log(microns)" f.exec {send client gcmd "units log microns"}}
{" log(millimeters)" f.exec {send client gcmd "units log millimeters"}}
{"  log(centimeter)" f.exec {send client gcmd "units log centimeter"}}
{"      log(meters)" f.exec {send client gcmd "units log meters"}}
{"       log(hertz)" f.exec {send client gcmd "units log hertz"}}
{"   log(kilohertz)" f.exec {send client gcmd "units log kilohertz"}}
{"   log(megahertz)" f.exec {send client gcmd "units log megahertz"}}
{"    log(gigahert)" f.exec {send client gcmd "units log gigahertz"}}
{"          log(ev)" f.exec {send client gcmd "units log ev"}}
{"         log(kev)" f.exec {send client gcmd "units log kev"}}
{"         log(mev)" f.exec {send client gcmd "units log mev"}}
}

createMenu invunitsMenu viewButton {
{"   1/angstroms" f.exec {send client gcmd "units inv angstroms"}}
{"  1/nanometers" f.exec {send client gcmd "units inv nanometers"}}
{"1/millimicrons" f.exec {send client gcmd "units inv millimicrons"}}
{"     1/microns" f.exec {send client gcmd "units inv microns"}}
{" 1/millimeters" f.exec {send client gcmd "units inv millimeters"}}
{"  1/centimeter" f.exec {send client gcmd "units inv centimeter"}}
{"      1/meters" f.exec {send client gcmd "units inv meters"}}
{"       1/hertz" f.exec {send client gcmd "units inv hertz"}}
{"   1/kilohertz" f.exec {send client gcmd "units inv kilohertz"}}
{"   1/megahertz" f.exec {send client gcmd "units inv megahertz"}}
{"    1/gigahert" f.exec {send client gcmd "units inv gigahertz"}}
{"          1/ev" f.exec {send client gcmd "units inv ev"}}
{"         1/kev" f.exec {send client gcmd "units inv kev"}}
{"         1/mev" f.exec {send client gcmd "units inv mev"}}
}

createMenu loginvunitsMenu viewButton {
{"   log(1/angstroms)" f.exec {send client gcmd "units log inv angstroms"}}
{"  log(1/nanometers)" f.exec {send client gcmd "units log inv nanometers"}}
{"log(1/millimicrons)" f.exec {send client gcmd "units log inv millimicrons"}}
{"     log(1/microns)" f.exec {send client gcmd "units log inv microns"}}
{" log(1/millimeters)" f.exec {send client gcmd "units log inv millimeters"}}
{"  log(1/centimeter)" f.exec {send client gcmd "units log inv centimeter"}}
{"      log(1/meters)" f.exec {send client gcmd "units log inv meters"}}
{"       log(1/hertz)" f.exec {send client gcmd "units log inv hertz"}}
{"   log(1/kilohertz)" f.exec {send client gcmd "units log inv kilohertz"}}
{"   log(1/megahertz)" f.exec {send client gcmd "units log inv megahertz"}}
{"    log(1/gigahert)" f.exec {send client gcmd "units log inv gigahertz"}}
{"          log(1/ev)" f.exec {send client gcmd "units log inv ev"}}
{"         log(1/kev)" f.exec {send client gcmd "units log inv kev"}}
{"         log(1/mev)" f.exec {send client gcmd "units log inv mev"}}
}

createMenu funitsMenu viewButton {
{"About Flux Units"	f.exec "showHelp funitsMenu"}
{			f.dblline}
{"Default"		f.exec { send client gcmd "funits default"}}
{			f.space 10}
{"Jansky"		f.exec { send client gcmd "funits Jansky"}}
{"Flux units"		f.exec { send client gcmd "funits FU"}}
{"erg/cm2/s/Hz"		f.exec { send client gcmd "funits erg/cm2/s/Hz"}}
{"erg/cm2/s/A"		f.exec { send client gcmd "funits erg/cm2/s/A"}}
{			f.space 10}
{"log(Jansky)"		f.exec { send client gcmd "funits log Jansky"}}
{"log(Flux units)"	f.exec { send client gcmd "funits log FU"}}
{"log(erg/cm2/s/Hz)"	f.exec { send client gcmd "funits log erg/cm2/s/Hz"}}
{"log(erg/cm2/s/A)"	f.exec { send client gcmd "funits log erg/cm2/s/A"}}
{			f.space 10}
{"mag(Jansky)"		f.exec { send client gcmd "funits mag Jansky"}}
{"mag(Flux units)"	f.exec { send client gcmd "funits mag FU"}}
{"mag(erg/cm2/s/Hz)"	f.exec { send client gcmd "funits mag erg/cm2/s/Hz"}}
{"mag(erg/cm2/s/A)"	f.exec { send client gcmd "funits mag erg/cm2/s/A"}}
}

# Menus
createMenu editMenu editButton {
    {"About Edit Menu"			f.exec "showHelp editMenu"}
    {					f.dblline}
    {"Interpolate spectrum (x key)"	f.exec "showHelp interpolate"}
    {"Draw spectrum (y key)"		f.exec "showHelp draw"}
    {"Draw continuum (c key)"		f.exec "showHelp draw"}
    {"Zap bad pixels (z key)"		f.exec "showHelp zap"}
    {"Sigma clipping..."		f.exec "map sclipShell"}
    {"Spectrum arithmetic..."		f.exec "map arithShell" }
    {"Filter/smooth spectrum"		f.menu filterMenu}
    {"Edit/apply continuum"		f.menu contMenu}
    {"Deredden spectrum..."		f.exec "map deredShell"}
    {					f.space 10}
    {"Edit dispersion"			f.menu dispMenu}
    {					f.space 10}
    {"Save spectrum"			f.exec "send client gcmd save"}
    {"Restore saved spectrum"		f.exec "send client gcmd restore"}
    {"Undo last change (u key)"		f.exec "send client gcmd undo"}
}

createMenu dispMenu editButton {
    {"About Edit Dispersion Menu"    f.exec "showHelp dispMenu"}
    {				     f.dblline}
    {"Coordinate of first pixel..."  f.exec "send client gcmd coord first"}
    {"Coordinate of last pixel..."   f.exec "send client gcmd coord last"}
    {"Coordinate step per pixel..."  f.exec "send client gcmd coord step"}
    {"Coordinate shift..."	     f.exec "send client gcmd coord shift"}
    {"Coordinate redshift..."	     f.exec "send client gcmd coord redshift"}
    {"Coordinate deredshift..."	     f.exec "send client gcmd coord deredshift"}
    {				     f.space 10}
    {"Shift from marked lines"       f.exec "send client gcmd coord lineshift"}
    {"Fit marked lines..."           f.exec "send client gcmd coord fitlines"}
}

createMenu contMenu editButton {
    {"About Continnum Menu"		f.exec "showHelp contMenu"}
    {					f.dblline}
    {"From moving average of spectrum..."
	f.exec {send client gcmd {%[spectrum] Continuum smooth box}}}
    {"From moving median of spectrum..."
	f.exec {send client gcmd {%[spectrum] Continuum smooth median}}}
    {"From curve fitting of spectrum..."
	f.exec {send client gcmd {%[spectrum] Continuum icfit fit}}}
    {"Fit curve to continuum..."
	f.exec {send client gcmd {%[continuum] Continuum icfit fit}}}
    {					f.space 10}
    {"Normalize spectrum by continuum"
	f.exec {send client gcmd Continuum divide}}
    {"Subtract continuum from spectrum"
	f.exec {send client gcmd Continuum subtract}}
}

createMenu filterMenu editButton {
    {"About Filter/Smooth Menu" f.exec "showHelp filterMenu"}
    {				f.dblline}
    {"Moving average..."	f.exec "send client gcmd smooth average"}
    {"Moving median..."		f.exec "send client gcmd smooth median"}
    {"Gaussian convolution..."	f.exec "send client gcmd smooth gauss"}
    {"Fit curve..."		f.exec "send client gcmd icfit fit"}
}

createMenu analyzeMenu analyzeButton {
    {"About Analyze Menu"	f.exec "showHelp analyzeMenu"}
    {				f.dblline}
    {"Line list..."		f.exec "map lidsShell"}
    {"Reference list..."	f.exec "map llShell"}
    {"Line centering..."	f.exec "map ctrShell"}
    {"Equivalent widths..."	f.exec "map eqwShell"}
    {"Profile fitting..."	f.exec "map modShell"}
    {				f.space 10}
    {"Velocities..."		f.exec "map rvShell"}
    {"Spectrum statistics..."	f.exec "map statShell"}
    {"Error computations..."	f.exec "map errShell"}
}

createMenu typeMenu regType $typeMenu

createMenu colorMenu regColor $colorMenu


#createMenu scaleMenu scaleLabel {
#    {"Scaling Options"			f.title}
#    {					f.dblline}
#    {"none - Unit scales"		f.exec {send client gcmd "scale none"}}
#    {"mean - Scale all to unit mean"	f.exec {send client gcmd "scale mean"}}
#}

#createMenu offsetMenu offsetLabel {
#    {"Offset Options"			f.title}
#    {					f.dblline}
#    {"none - Zero offsets"		f.exec {send client gcmd "offset none"}}
#    {"mean - Zero mean offsets"		f.exec {send client gcmd "offset mean"}}
#}

proc regButtons {widget args} {
    switch $widget {
    regClear	{send client gcmd "register delete"}
    }
}
send regClear addCallback regButtons

proc cntrlButtons {widget type state} {
    global yn

    switch $widget {
    panToggle	{send client gcmd "pan $yn($state)"}
    wcsToggle	{setTrack [expr !$state] $state}
    labelToggle	{send client gcmd "labels $yn($state)"}
    lineToggle	{send client gcmd "lines $yn($state)"}
    modToggle	{send client gcmd "plot models $yn($state)"}
    specToggle	{send client gcmd "spectrum $yn($state)"}
    contToggle	{send client gcmd "continuum $yn($state)"}
    rawToggle	{send client gcmd "raw $yn($state)"}
    skyToggle	{send client gcmd "sky $yn($state)"}
    sigToggle	{send client gcmd "sigma $yn($state)"}
    oplotToggle	{send client gcmd "overplot $yn($state)"}
    stackToggle	{send client gcmd "stack $yn($state)"}
    xflipToggle	{send client gcmd "xflip $yn($state)"}
    yflipToggle	{send client gcmd "yflip $yn($state)"}
    zeroToggle	{send client gcmd "zero $yn($state)"}
    }
}
send panToggle addCallback cntrlButtons
send wcsToggle addCallback cntrlButtons
send labelToggle addCallback cntrlButtons
send lineToggle addCallback cntrlButtons
send modToggle addCallback cntrlButtons
send specToggle addCallback cntrlButtons
send contToggle addCallback cntrlButtons
send rawToggle addCallback cntrlButtons
send skyToggle addCallback cntrlButtons
send sigToggle addCallback cntrlButtons
send oplotToggle addCallback cntrlButtons
send stackToggle addCallback cntrlButtons
send xflipToggle addCallback cntrlButtons
send yflipToggle addCallback cntrlButtons
send zeroToggle addCallback cntrlButtons


# Called when the spectrum changes.
proc setSpectrum { param old new } {
    global gtcolors

    set reg [lindex $new 0]
    set image [lindex $new 1]
    set ap [lindex $new 2]
    set band [lindex $new 3]
    set type [lindex $new 4]
    set color $gtcolors([lindex $new 5])
    set daxis [lindex $new 6]
    set nsum [lindex $new 7]

    send regValue set string $reg
    send regType set label $type
    send regColor set label $color

    send readImage set string $image
    send readAp set string $ap
    if {$daxis == "INDEF"} {
	send readAxis set string ""
    } else {
	send readAxis set string $daxis
    }
    if {$nsum == "INDEF"} {
	send readNsum set string ""
    } else {
	send readNsum set string $nsum
    }
}; send spectrum addCallback setSpectrum

proc loadSpec args {

}

proc spApply {args} {

#    switch $widget {
#    readImage {send regImage set string [send $widget get string]}
#    readAp    {send regAp set string [send $widget get string]}
#    }
#    set spectrum [send regImage get string]
#    set ap [send regAp get string]
#    set band [send regBand get string]
#    set daxis [send readAxis get string]
#    set nsum [send readNsum get string]
    set spectrum [send readImage get string]
    set ap [send readAp get string]
    if {$ap == ""} {set ap INDEF}
    set band INDEF
    set daxis [send readAxis get string]
    if {$daxis == ""} {set daxis INDEF}
    set nsum [send readNsum get string]
    if {$nsum == ""} {set nsum INDEF}
    send client gcmd "register pload anynew $spectrum $ap $band $daxis $nsum"
}

send readImage addCallback spApply
send readAp addCallback spApply
send readAxis addCallback spApply
send readNsum addCallback spApply

proc spAttrib {widget args} {
    global gticolors

    set reg [send regValue get string]
    switch $widget {
    regType {send client gcmd "register type $reg [send regType get label]"}
    regColor {
	set color $gticolors([send regColor get label])
	send client gcmd "register color $reg $color"}
    }
}
send regValue addCallback spAttrib
send regType addCallback setMenuWidget
send regColor addCallback setMenuWidget

proc readImList {widget type item itemno} {
    set item [string trim $item]
    if {$item == ""} {
	send readImList unhighlight
    } elseif {[regexp {/$} $item]} {
	send readDir set string $item
	getImages
    } else {
	send client gcmd "open $item"
    }
}
send readImList addCallback readImList
proc readList {widget type item itemno} {setReg pload anynew}
send readList addCallback readList

proc plot args {send client gcmd "register plot"}

proc getImages {args} {
    set dir [send readDir get string]
    set images [send readImages get string]
    send client gcmd "images \"$dir\" $images"
}
send readDir addCallback getImages
send readImages addCallback getImages


# File List Selection

proc getFiles {args} {
    set dir [send flistDir get string]
    set template [send flistTemplate get string]
    send client gcmd "files \"$dir\" $template"
}
send flistDir addCallback getFiles
send flistTemplate addCallback getFiles
    
proc setFiles { widget old new } {send flistList setList $new resize}
send files addCallback setFiles

proc setFile {widget type item itemno} {
    set item [string trim $item]
    if {$item == ""} {
	send flistList unhighlight
    } elseif {[regexp {/$} $item]} {
	send flistDir set string $item
	getFiles
    } else {
	send flistFile set string $item
    }
}
send flistList addCallback setFile

proc getFile {type args} {
    global flistType

    getFiles

    set flistType $type
    switch $flistType {
    lidsread {
	send flistShell set title "Read Line List Definitions"
	send flistApply set label Read
    } lidswrite {
	send flistShell set title "Write Line List Definitions"
	send flistApply set label Write
    } llread {
	send flistShell set title "Read Reference List"
	send flistApply set label Read
    } logopen {
	send flistShell set title "Open Log File"
	send flistApply set label Open
    } savefname {
	send flistShell set title "Set Output Spectrum Filename"
	send flistApply set label Filename
    }}
    send flistShell popup GrabNonexclusive
}

proc sendFile {args} {
    global flistType

    set file [send flistFile get string]
    switch $flistType {
    lidsread	{send client gcmd "lids read $file"}
    lidswrite	{send client gcmd "lids write $file"}
    llread	{send client gcmd "ll linelist $file"}
    logopen	{send client gcmd "log logfile $file"}
    savefname	{send saveFilename set string $file}
    }
    send flistShell popdown
}
send flistApply addCallback sendFile
send flistFile addCallback sendFile
    

proc setRegList { widget old new } {
    send regList setList $new resize
    send arithRegList setList $new resize
    send saveList setList $new resize
}
send registers addCallback setRegList

proc setImages { widget old new } {send readImList setList $new resize}
send images addCallback setImages
proc setSpectra { widget old new } {
    send readList setList $new resize
    set nspec [send readList get numberStrings]
    if {$nspec == 1} {
	send readList highlight 0
	setReg pload anynew
    }
	
}
send spectra addCallback setSpectra

proc setReg {cmd reg} {
    set item [send readList getItem itemno]
    set image [lindex $item 0]
    set ap [lindex $item 1]
    if {$ap == ""} {set ap INDEF}
    set band INDEF
    set daxis [send readAxis get string]
    if {$daxis == ""} {set daxis INDEF}
    set nsum [send readNsum get string]
    if {$nsum == ""} {set nsum INDEF}
    send client gcmd "register $cmd $reg $image $ap $band $daxis $nsum"
}

proc setObj {cmd reg} {
    set image [lindex [send readImList getItem itemno] 0]
    set ap [send readAp get string]
    if {$ap == ""} {set ap INDEF}
    set band INDEF
    set daxis [send readAxis get string]
    if {$daxis == ""} {set daxis INDEF}
    set nsum [send readNsum get string]
    if {$nsum == ""} {set nsum INDEF}
    send client gcmd "register $cmd $reg $image $ap $band $daxis $nsum"
}

proc regPlot { cmd reg } {
    if {$reg == "item"} {
	set item [send regList getItem itemno]
	set reg [lindex $item 0]
    }
    send client gcmd "register $cmd $reg"
}

proc deleteReg args {
    set item [send regList getItem itemno]
    set reg [lindex $item 0]
    send client gcmd "register delete $reg"
}

# Region marker.
set markerTranslations { \
	      <Btn1Motion>:	m_moveResize()
		<Btn1Down>:	m_raise()  m_markposAdd()
		  <Btn1Up>:	m_redraw() call(setRegion)
	    <Key>BackSpace:	call(resetRegion)
	       <Key>Delete:	call(resetRegion)
		<KeyPress>:	graphics-input()
	          <Motion>:     track-cursor() call(wcsUpdate,gterm2,$x,$y)
}

proc makeRegion {gterm x y} {
	global markerTranslations
	global markerGterm

	if {$markerGterm != ""} {send regionMarker destroy}

	set markerGterm $gterm
	send $markerGterm createMarker regionMarker \
	    createMode		interactive \
	    translations	$markerTranslations \
	    type		rectangle \
	    activated		true \
	    visible		true \
	    sensitive		true \
	    x			$x \
	    y			$y
	send regionMarker addCallback markerDestroy destroy
}

proc setRegion args {
	global markerGterm
	global x0 dx y0 dy y1

	set region [send regionMarker getRegion ]
	set x [lindex $region 2]
	set y [lindex $region 3]
	set width [lindex $region 4]
	set height [lindex $region 5]
	set w $markerGterm
	if {($width < 1.) || ($height < 1.)} {
	    set markerGterm $w
	    resetRegion
	    return
	}

	# Convert screen coords to world coordinates.
	set wx1 [expr "$x0($w) + $dx($w) * ($x - $width)"]
	set wx2 [expr "$x0($w) + $dx($w) * ($x + $width)"]
	set wy1 [expr "$y0($w) + $dy($w) * ($y + $height)"]
	set wy2 [expr "$y0($w) + $dy($w) * ($y - $height)"]

	switch $w {
	gterm1	{send client gcmd "region 1 $wx1 $wx2 $wy1 $wy2"}
	gterm2	{send client gcmd "region 2 $wx1 $wx2 $wy1 $wy2"}
	}
}

proc resetRegion args  {
	global markerGterm

	switch $markerGterm {
	gterm1	{send client gcmd "region 1 INDEF INDEF INDEF INDEF"}
	gterm2	{send client gcmd "region 2 INDEF INDEF INDEF INDEF"}
	}
}

proc setMarker {x y width height} {
	global markerTranslations
	global markerGterm

	if {$markerGterm != ""} {send regionMarker destroy}

	set markerGterm gterm2
	send $markerGterm createMarker regionMarker \
	    createMode		noninteractive \
	    translations	$markerTranslations \
	    type		rectangle \
	    activated		true \
	    visible		true \
	    sensitive		true \
	    x			$x \
	    y			$y \
	    width		$width \
	    height		$height
	send regionMarker addCallback markerDestroy destroy

	send regionMarker redraw
	#send regionMarker redraw
}

proc roam {gterm x y} {
	global x0 dx y0 dy y1

	set w $gterm

	# Convert screen coords to world coordinates.
	set wx [expr "$x0($w) + $dx($w) * $x"]
	set wy [expr "$y0($w) + $dy($w) * $y"]

	switch $w {
	gterm1	{send client gcmd "roam 1 $wx INDEF"}
	gterm2	{send client gcmd "roam 2 $wx $wy"}
	}
}


proc guicmd {param old new} {
	send server $new
}; send guicmd addCallback guicmd

# Set graphics input/output
proc setOutput {param old new} {
	global gterm printScreen

	set setgterm $gterm
	switch $new {
	"gterm1"	-
	"gterm2"	{if {$printScreen == 0} {set setgterm $new}}
	"icfit"		{send mainLayout setSensitive false
	    		 send cntrlShell setSensitive false
	    		 send gtShell setSensitive false
			 send viewLayout setSensitive false
	    		 send gtLabelsShell setSensitive false
	    		 send gtAxesShell setSensitive false
	    		 send gtTicksShell setSensitive false
	    		 send regShell setSensitive false
	    		 send readShell setSensitive false
	    		 send saveShell setSensitive false
	    		 send rvShell setSensitive false
	    		 send ctrShell setSensitive false
	    		 send sclipShell setSensitive false
	    		 send labelShell setSensitive false
	    		 send lidsShell setSensitive false
	    		 send llabShell setSensitive false
	    		 send llShell setSensitive false
	    		 send modShell setSensitive false
	    		 send eqwShell setSensitive false
	    		 send arithShell setSensitive false
	    		 send logShell setSensitive false
	    		 send stackShell setSensitive false
	    		 send statShell setSensitive false
	    		 send deredShell setSensitive false
	    		 send printShell setSensitive false
	    		 map icShell
	    		 set setgterm icGterm}
	"icfitDone"	{send icfitPars unmap
			 send icShowShell unmap
			 send icHelpShell unmap
			 send icShell unmap
			 send mainLayout setSensitive true
	    		 send cntrlShell setSensitive true
			 send viewLayout setSensitive true
	    		 send gtShell setSensitive true
	    		 send gtLabelsShell setSensitive true
	    		 send gtAxesShell setSensitive true
	    		 send gtTicksShell setSensitive true
	    		 send regShell setSensitive true
	    		 send readShell setSensitive true
	    		 send saveShell setSensitive true
	    		 send rvShell setSensitive true
	    		 send ctrShell setSensitive true
	    		 send sclipShell setSensitive true
	    		 send labelShell setSensitive true
	    		 send lidsShell setSensitive true
	    		 send llabShell setSensitive true
	    		 send llShell setSensitive true
	    		 send modShell setSensitive true
	    		 send eqwShell setSensitive true
	    		 send arithShell setSensitive true
	    		 send logShell setSensitive true
	    		 send stackShell setSensitive true
	    		 send statShell setSensitive true
	    		 send deredShell setSensitive true
	    		 send printShell setSensitive true
			 set setgterm gterm1}
	"log"		{map logShell}
	"help"		{map helpShell}
	"screen"	{set printScreen 2}
	"quit"		{catch {
			    send wcsbox1 deleteCallback markerDestroy
			    send wcsbox2 deleteCallback markerDestroy
			    send regionMarker deleteCallback markerDestroy
			 }
			 deactivate unmap
			} 
	}
	if {$setgterm != $gterm} {
	    set gterm $setgterm
	    send $gterm setGterm
	}
}; send output addCallback setOutput

# Query state
proc Query {param old new} {
    global gtcolors

    set cmd  [lindex $new 0]
    set value [lrange $new 1 end]

    switch $cmd {
    colors	{send client gcmd "clist \"\" \"\" $gtcolors(2) $gtcolors(3) $gtcolors(4) $gtcolors(5) $gtcolors(6) $gtcolors(7) $gtcolors(8) $gtcolors(9)"}
    echo	{send client gcmd $value}
    }
}; send query addCallback Query


# Sigma Clipping

proc sigclip {param old new} {
    send sclipSigmaVal set string [lindex $new 0]
    send sclipLowVal set string [lindex $new 1]
    send sclipHighVal set string [lindex $new 2]
    send sclipRadiusVal set string [lindex $new 3]
}; send sigclip addCallback sigclip

proc sclipClip {widget args} {
    set sigma [send sclipSigmaVal get string]
    set low [send sclipLowVal get string]
    set high [send sclipHighVal get string]
    set radius [send sclipRadiusVal get string]
    send client gcmd "sigclip $sigma $low $high $radius"
}
send sclipClip addCallback sclipClip
send sclipSigmaVal addCallback sclipClip
send sclipLowVal addCallback sclipClip
send sclipHighVal addCallback sclipClip
send sclipRadiusVal addCallback sclipClip


##############################################################################
#                                                                            #
#               Interactive Curve Fitting (ICFIT) Procedures.                #
#                                                                            #
##############################################################################

# Define the global variables.
set eparFGColor         black           ;# param entry FG color
set eparBGColor         gray75          ;# param entry BG color
set eparHLColor         white           ;# param entry HL color
set eparCmdColor        gray85          ;# param menubar color

set auto_refit		1

set ic_plot		0		;# Initial plot menu
set ic_order		1
set ic_func		"spline3"
set ic_plotop(0)	"Y vs. X"
set ic_plotop(1)	"Residuals vs. X"
set ic_plotop(2)	"Ratio (V/Fit) vs. X"
set ic_plotop(3)	"Non-linear part of Y vs. X"
set ic_plotop(4)	"X vs. Y"
set ic_plotop(5)	"Residuals vs. Y"
set ic_plotop(6)	"Ratio (V/Fit) vs. Y"
set ic_plotop(7)	"Non-linear part of Y vs. Y"
set ic_plotop(8)	"X vs. Residuals"
set ic_plotop(9)	"Y vs. Residuals"
set ic_plotop(10)	"Ratio (Y/Fit) vs. Residuals"
set ic_plotop(11)	"Non-linear part of Y vs. Residuals"
set ic_plotop(12)	"X vs Ratio (Y/Fit)"
set ic_plotop(13)	"Y vs Ratio (Y/Fit)"
set ic_plotop(14)	"Residuals vs Ratio (Y/Fit)"
set ic_plotop(15)	"Non-linear part of Y vs Ratio (Y/Fit)"
set ic_plotop(16)	"X vs. Non-linear part of Y"
set ic_plotop(17)	"Y vs. Non-linear part of Y"
set ic_plotop(18)	"Ratio (Y/Fit) vs. Non-linear part of Y"
set ic_plotop(19)	"Residuals vs. Non-linear part of Y"


# Attach the cursor keystroke callbacks.

proc icToggleMarkrej { widget callback new_state args } {
    if {$new_state == 0} {
        send client gcmd markrej NO
    } else {
        send client gcmd markrej YES
    }
    send client gkey r
}

send icMarkRej	addCallback icToggleMarkrej
send icEdit	addCallback icfparsOpen

proc icDoRefit args {
    global eparCmdColor
    send client gkey f
    send icRefit set background $eparCmdColor
    send icfparsApply set background $eparCmdColor
} ; send icRefit addCallback icDoRefit


# Define the ICFIT 'plots' menu. 
#-------------------------------

proc setPlotMenuDescription { args } {
    global ic_plotop ic_plot

    for { set i 0 } { $i <= 19 } { incr i }  {
        lappend items " \"$ic_plotop($i)\" f.exec \{ setPlot $i \} \
            bitmap \{\($ic_plot == $i\) ? \"check\" : \"null\" \}"
    }
    editMenu icPlotMenu icPlotButton $items
} ; setPlotMenuDescription

proc setPlot { plot args }  {
    global ic_plot

    set ic_plot $plot
    switch $ic_plot {
	0	{ send client gcmd graph h x y }
	1	{ send client gcmd graph h x r }
	2	{ send client gcmd graph h x d }
	3	{ send client gcmd graph h x n }
	4	{ send client gcmd graph h y x }
	5	{ send client gcmd graph h y r }
	6	{ send client gcmd graph h y d }
	7	{ send client gcmd graph h y n }
	8	{ send client gcmd graph h r x }
	9	{ send client gcmd graph h r y }
	10	{ send client gcmd graph h r d }
	11	{ send client gcmd graph h r n }
	12	{ send client gcmd graph h d x }
	13	{ send client gcmd graph h d y }
	14	{ send client gcmd graph h d r }
	15	{ send client gcmd graph h d n }
	16	{ send client gcmd graph h n x }
	17	{ send client gcmd graph h n y }
	18	{ send client gcmd graph h n r }
	19	{ send client gcmd graph h n d }
    }
    setPlotMenuDescription
}



# Define the ICFIT 'order' menu.
#-------------------------------


# The Order menu is created on the fly instead of having a (very) long
# definition string.  We also create the sub-menu here.

proc setOrderMenuDescription { args } {
    global ic_order

    for { set i 1 } { $i <= 9 } { incr i }  { 
        lappend itemList " \" $i\" f.exec \{ setOrder $i \} \
	    bitmap \{\($ic_order == $i\) ? \"check\" : \"null\" \}"
    }
    lappend itemList " f.dblline "
    set s1 "Others"
    set s2 " map icfitPars"
    lappend itemList "$s1 f.exec \" $s2 \" "

    editMenu icOrderMenu icOrderButton $itemList
} ; setOrderMenuDescription

proc setOrder { order args }  {
    global ic_order auto_refit
    global eparHLColor

    set ic_order $order
    send client gcmd order $order
    setOrderMenuDescription
    if { $auto_refit == 1 } { 
	send client gkey f 
    } else {
	send icRefit set background $eparHLColor
	send icfparsApply set background $eparHLColor
    }
}


# Define the ICFIT 'misc' menu.
#------------------------------

set icMiscMenuDescription {
    { "  Initialize samples"  f.exec { send client gkey t      }	    }
    { "  Overplot next fit"   f.exec { send client gkey o      }	    }
    { "  Show" 		      f.exec { send client gcmd show   }	    }
    { "  Show (verbose)"      f.exec { send client gcmd vshow  }	    }
    { "  Show errors"	      f.exec { send client gcmd errors }	    }
    { "  Show data and fit"   f.exec { send client gcmd xyshow }	    }
    { 			      f.dblline			  		    }
    { "  Auto Refit"	      f.exec { icToggleAutoRefit		    }
                         	bitmap {($auto_refit==1)?"check":"null"} }
}
createMenu icMiscMenu icMiscButton $icMiscMenuDescription

proc icToggleAutoRefit { args } {
    global icMiscMenuDescription auto_refit

    if {$auto_refit == 1} {
        set auto_refit 0
    } else {
        set auto_refit 1
    }
    editMenu icMiscMenu icMiscButton $icMiscMenuDescription
}


# Define the 'function' menu stuff.
#----------------------------------

proc setFuncMenuDescription { args } {
    global ic_func 

    set icFuncMenuDescription {
        { "  Chebyshev"  f.exec { setFunc chebyshev }
                         bitmap {($ic_func=="chebyshev") ? "check" : "null" } }
        { "  Legendre"   f.exec { setFunc legendre  }
                         bitmap {($ic_func=="legendre")  ? "check" : "null" } }
        { "  Spline1"    f.exec { setFunc spline1   }
                         bitmap {($ic_func=="spline1")   ? "check" : "null" } }
        { "  Spline3"    f.exec { setFunc spline3   }
                         bitmap {($ic_func=="spline3")   ? "check" : "null" } }
    }
    editMenu icFuncMenu     icFuncButton $icFuncMenuDescription
} ; setFuncMenuDescription

set icfpFuncMenuDescription {
    { "  Chebyshev"  f.exec { setParsFunc chebyshev } }
    { "  Legendre"   f.exec { setParsFunc legendre  } }
    { "  Spline1"    f.exec { setParsFunc spline1   } }
    { "  Spline3"    f.exec { setParsFunc spline3   } }
} ; createMenu icparsFuncMenu icFuncValue  $icfpFuncMenuDescription

proc setParsFunc { func args }  {
    global eparHLColor

    send icFuncValue set label $func
    send icFuncValue  set background $eparHLColor
    send icfparsApply set background $eparHLColor
}; send icFuncValue addCallback setParsFunc

proc setFunc { func args }  {
    global ic_func auto_refit
    global eparHLColor

    set ic_func $func
    send client gcmd function $func
    setFuncMenuDescription
    if { $auto_refit == 1 } { 
	send client gkey f 
    } else {
	send icRefit set background $eparHLColor
	send icfparsApply set background $eparHLColor
    }
}

# ICFIT Parameters
# ----------------

proc icfit { param old new } {
    global gtwcs gtwidth gtheight gtx0 gtdx gty0 gtdy ic_plot ic_func ic_order

    set cmd  [lindex $new 0]
    switch $cmd {
    open	-
    close 	-
    params	{ set refit 0
    		  set func [lindex $new 1];  set ord  [lindex $new 2]
		  set samp [lindex $new 3];  set nav  [lindex $new 4]
		  set nit  [lindex $new 5];  set low  [lindex $new 6]
		  set hi   [lindex $new 7];  set grow [lindex $new 8]
		  set mrej [lindex $new 9]

    	 	  set gtwidth(icGterm) [send icGterm get width]	
		  set gtheight(icGterm) [send icGterm get height]	
		  gtWcsBox icGterm

		  if {$func != [send icFuncValue get label]} {
		      set refit 1
		      send icFuncValue set label $func
		      set ic_func $func
		  } 
		  if {$ord  != [send icOrderValue get string]} {
		      set refit 1
		      send icOrderValue set string $ord
		      set ic_order $ord
		  } 
		  if {$samp != [send icSampleValue get string]} {
		      set refit 1
		      send icSampleValue set string $samp
		  } 
		  if {$nav  != [send icNaverageValue get string]} {
		      set refit 1
		      send icNaverageValue set string $nav
		  } 
		  if {$nit  != [send icNiterValue get string]} {
		      set refit 1
		      send icNiterValue set string $nit
		  } 
		  if {$low  != [send icLowrejValue get string]} {
		      set refit 1
		      send icLowrejValue set string $low
		  } 
		  if {$hi   != [send icHirejValue get string]} {
		      set refit 1
		      send icHirejValue set string $hi
		  } 
		  if {$grow != [send icGrowValue get string]} {
		      set refit 1
		      send icGrowValue set string $grow
		  } 
		  if {$mrej != [send icMarkrejValue get label]} {
		      set refit 1
		      send icMarkrejValue set label $mrej
		      if {$mrej == "YES"} {      send icMarkRej set state 1
		      } elseif {$mrej == "NO"} { send icMarkRej set state 0
		      }
		  }
    
		  #if {$refit == 1} { send client gkey f }
    		  setFuncMenuDescription
    		  setOrderMenuDescription
		}
    graph	{ set a [lindex $new 2]; set b [lindex $new 3]

		  if {$a == "x" && $b == "y"} { set ic_plot 0  }
		  if {$a == "x" && $b == "r"} { set ic_plot 1  }
		  if {$a == "x" && $b == "d"} { set ic_plot 2  }
		  if {$a == "x" && $b == "n"} { set ic_plot 3  }
		  if {$a == "y" && $b == "x"} { set ic_plot 4  }
		  if {$a == "y" && $b == "r"} { set ic_plot 5  }
		  if {$a == "y" && $b == "d"} { set ic_plot 6  }
		  if {$a == "y" && $b == "n"} { set ic_plot 7  }
		  if {$a == "r" && $b == "x"} { set ic_plot 8  }
		  if {$a == "r" && $b == "y"} { set ic_plot 9  }
		  if {$a == "r" && $b == "d"} { set ic_plot 10 }
		  if {$a == "r" && $b == "n"} { set ic_plot 11 }
		  if {$a == "d" && $b == "x"} { set ic_plot 12 }
		  if {$a == "d" && $b == "y"} { set ic_plot 13 }
		  if {$a == "d" && $b == "r"} { set ic_plot 14 }
		  if {$a == "d" && $b == "n"} { set ic_plot 15 }
		  if {$a == "n" && $b == "x"} { set ic_plot 16 }
		  if {$a == "n" && $b == "y"} { set ic_plot 17 }
		  if {$a == "n" && $b == "r"} { set ic_plot 18 }
		  if {$a == "n" && $b == "d"} { set ic_plot 19 }
    		  setPlotMenuDescription
		}
    }
}; send icfit addCallback icfit


proc icrefit { param old new } {
    global auto_refit
    if { $new == "yes" || $new == "YES" } {
	set auto_refit 1
    } elseif { $new == "no" || $new == "NO" } {
	set auto_refit 0
    }
}; send icrefit addCallback icrefit

proc ichelp {param old new} {
    send icHelpHtml setText $new
    map icHelpShell
}; send ichelp addCallback ichelp

proc icShow { param old new } {
    send icShowText set string $new
    map icShowShell
}; send icshow addCallback icShow

#send icHelp   	   addCallback "map icHelpShell"
send icHelp   	   addCallback "showHelp icHelp"
send icQuit 	   addCallback "send client gkey q"
send icShowDismiss addCallback "send icShowShell unmap"
send icHelpDismiss addCallback "send icHelpShell unmap"

# GTOOLS Marker Procedures 
# -----------------------

set gtMarker(icGterm) 0
set gtWcsBox(icGterm) 0

proc gtwcs { param old new } {
    global gterm gtwcs gtwidth gtheight gtx0 gtdx gty0 gtdy gtMarker

    if {$gterm != "icGterm"} return

    gtMarkerDestroy gtMarker($gterm)

    set gtwcs($gterm) $new
    set vx1 [lindex $new 0]; set vx2 [lindex $new 1]
    set vy1 [lindex $new 2]; set vy2 [lindex $new 3]
    set wx1 [lindex $new 4]; set wx2 [lindex $new 5]
    set wy1 [lindex $new 6]; set wy2 [lindex $new 7]

    set gtdx($gterm) [expr "($wx2-$wx1)/($vx2-$vx1)/($gtwidth($gterm)-1)"]
    set gtx0($gterm) [expr "$wx1-$gtdx($gterm)*$vx1*($gtwidth($gterm)-1)"]
    set gtdy($gterm) [expr "($wy2-$wy1)/($vy1-$vy2)/($gtheight($gterm)-1)"]
    set gty0($gterm) [expr "$wy1-$gtdy($gterm)*(1-$vy1)*($gtheight($gterm)-1)"]
}; send gtwcs addCallback gtwcs

proc gtWinResize {widget width height} {
    global gterm gtwcs gtwidth gtheight

    set gtermsave $gterm
    set gterm $widget
    set gtwidth($gterm) $width
    set gtheight($gterm) $height
    gtwcs gtwcs $gtwcs($gterm) $gtwcs($gterm)
    gtWcsBox $gterm
    set gterm $gtermsave
}; send icGterm addCallback gtWinResize resize

proc gtMarker {widget x y} {
    global gtMarker

    gtMarkerDestroy gtMarker($widget)

    send $widget createMarker gtMarker($widget) {
	createMode	interactive
	translations	{ \
              <Btn1Motion>:     m_moveResize()
                <Btn1Down>:     m_raise()  m_markposAdd()
                  <Btn1Up>:     m_redraw() call(gtExpand,$name)
                <Btn2Down>:     call(gtShift,$name,$x,$y) m_create() \n\
            <Key>BackSpace:     call(resetRegion)
               <Key>Delete:     call(resetRegion)
                <KeyPress>:     graphics-input()
                  <Motion>:     track-cursor() call(gtWcsUpdate,$name,$x,$y)}
	type		rectangle
	activated	true
	visible		true
	sensitive	true
	x		$x
	y		$y
    }
    send gtMarker($widget) addCallback gtMarkerDestroy destroy

    set gtMarker($widget) 1
}

proc gtMarkerDestroy {widget args} {
    global gtWcsBox gtMarker

    if {[set $widget]} {send $widget destroy}
    set $widget 0
}

proc gtExpand {widget args} {
    global gtx0 gtdx gty0 gtdy

    set window [send gtMarker($widget) getRegion ]
    set x [lindex $window 2]
    set y [lindex $window 3]
    set width [lindex $window 4]
    set height [lindex $window 5]
    if {($width < 1.) || ($height < 1.)} {
	send client gcmd "/expand INDEF INDEF INDEF INDEF"
	return
    }

    # Convert screen coords to world coordinates.
    set wx1 [expr "$gtx0($widget) + $gtdx($widget) * ($x - $width)"]
    set wx2 [expr "$gtx0($widget) + $gtdx($widget) * ($x + $width)"]
    set wy1 [expr "$gty0($widget) + $gtdy($widget) * ($y + $height)"]
    set wy2 [expr "$gty0($widget) + $gtdy($widget) * ($y - $height)"]

    send client gcmd "/expand $wx1 $wx2 $wy1 $wy2"
}

proc gtShift {widget x y} {
    global gtx0 gtdx gty0 gtdy

    # Convert screen coords to world coordinates.
    set wx [expr "$gtx0($widget) + $gtdx($widget) * $x"]
    set wy [expr "$gty0($widget) + $gtdy($widget) * $y"]
    send client gcmd "/shift $wx INDEF"
}

proc gtWcsBox {widget args} {
    global gtWcsBox

    gtMarkerDestroy gtWcsBox($widget)

    send $widget createMarker gtWcsBox($widget) {
	type		text
	createMode	noninteractive
	width		25ch
	height		1ch
	lineWidth	0
	imageText	true
	textBgColor	black
	textColor	yellow
	visible 	false
    }

    set width [send $widget get width]	
    set height [send $widget get height]	
    set boxwidth [send gtWcsBox($widget) get width]
    set boxheight [send gtWcsBox($widget) get height]

    send gtWcsBox($widget) setAttributes \
	x	    	[expr "$width - $boxwidth - 5"] \
	y	    	[expr "$height - $boxheight - 5"] \
	activated 	true \
	visible     	true \
	sensitive   	true

    send gtWcsBox($widget) addCallback gtMarkerDestroy destroy

    set gtWcsBox($widget) 1
}

proc gtWcsUpdate {widget x y} {
    global gtx0 gtdx gty0 gtdy gtWcsBox

    # Convert screen coords to world coordinates.
    if {$gtWcsBox($widget)} {
	set wx [expr "$gtx0($widget) + $gtdx($widget) * $x"]
	set wy [expr "$gty0($widget) + $gtdy($widget) * $y"]
	send gtWcsBox($widget) "set text \{$wx $wy\}; redraw noerase"
    }
}

#------------------------------------------------
# Callbacks for the ICFIT parameter editor popup.
#------------------------------------------------

set icfParsWidgets {
    icFuncValue icOrderValue icGrowValue icMarkrejValue icNaverageValue
    icNiterValue icLowrejValue icHirejValue icSampleValue 
}

proc icfparsHighlight { widget args } {
    global eparHLColor

    if {$widget == "icMarkrejValue"}  { 
	set val [ send icMarkrejValue get label ]
        if {$val == "NO"} {
           send icMarkrejValue set label YES
	} else {
	   send icMarkrejValue set label NO
	}
    }
    send $widget      set background $eparHLColor
    send icfparsApply set background $eparHLColor
}
foreach i $icfParsWidgets { send $i addCallback icfparsHighlight }


# Enter widget event handler to display a caret when active.
set icfParsTextWidgets {
    icOrderValue icGrowValue icNaverageValue icNiterValue icLowrejValue 
    icHirejValue icSampleValue 
}

proc icShowCaret { widget event args } {
    if { $event == "enterNotify" } {
        send $widget set displayCaret True
    } elseif { $event == "leaveNotify" } {
        send $widget set displayCaret False
    }
}
foreach widget $icfParsTextWidgets {
    send $widget addEventHandler icShowCaret enterWindowMask leaveWindowMask
}


#------------------------
# GUI parameter callback.
#------------------------

proc icfparsOpen { widget args } {
    send client gcmd gui params
    map icfitPars
}

proc icfparsApplyCallback { widget args } {
    global auto_refit eparBGColor eparCmdColor
    global icfParsWidgets ic_func ic_order

    send client gcmd function    [send icFuncValue get label]
    send client gcmd order 	     [send icOrderValue get string]
    send client gcmd grow 	     [send icGrowValue get string]
    send client gcmd markrej     [send icMarkrejValue get label]
    send client gcmd naverage    [send icNaverageValue get string]
    send client gcmd niterate    [send icNiterValue get string]
    send client gcmd low_reject  [send icLowrejValue get string]
    send client gcmd high_reject [send icHirejValue get string]
    send client gcmd sample      [send icSampleValue get string]

    if {[send icMarkrejValue get label] == "NO"} {
        send icMarkRej set state 0
    } else {
        send icMarkRej set state 1
    }
    set ic_func  [send icFuncValue get label]
    set ic_order [send icOrderValue get string]

    if { $auto_refit == 1 } { send client gkey f }

    foreach i $icfParsWidgets { send $i set background $eparBGColor }
    send icfparsApply set background $eparCmdColor
} ; send icfparsApply addCallback icfparsApplyCallback

#proc icfparsUnlearnCallback { widget args } {
#    global icfParsWidgets eparHLColor
#
#    send icFuncValue 	 { set label "spline3" }
#    send icOrderValue 	 { set string "1" }
#    send icMarkrejValue  { set label "yes" }
#    send icNaverageValue { set string "1" }
#    send icNiterValue 	 { set string "10" }
#    send icLowrejValue 	 { set string "3.0" }
#    send icHirejValue 	 { set string "3.0" }
#    send icGrowValue 	 { set string "0.0" }
#    send icSampleValue 	 { set string "*" }
#
#    foreach i $icfParsWidgets { send $i set background $eparHLColor }
#    send icfparsApply set background $eparHLColor
#} ; send icfparsUnlearn addCallback icfparsUnlearnCallback

proc icfparsCancelCallback { widget args } {
    global icfParsWidgets eparBGColor eparCmdColor

    send client gcmd gui params
    foreach i $icfParsWidgets { send $i set background $eparBGColor }
    send icfparsApply set background $eparCmdColor
} ; send icfparsCancel addCallback icfparsCancelCallback

proc icfparsHelpCallback { widget args } {
} ; send icfparsHelp addCallback icfparsHelpCallback

send icfparsDismiss addCallback "send icfitPars unmap"

# Graph Shell.

createMenu gtXDrawaxesMenu gt_Axes {
    {both		f.exec "setMenuLabel both"}
    {bottom		f.exec "setMenuLabel bottom"}
    {top		f.exec "setMenuLabel top"}
    {none		f.exec "setMenuLabel none"}
}

createMenu gtYDrawaxesMenu gt_Axes {
    {both		f.exec "setMenuLabel both"}
    {left		f.exec "setMenuLabel left"}
    {right		f.exec "setMenuLabel right"}
    {none		f.exec "setMenuLabel none"}
}

createMenu gtTypeMenu gtForm $typeMenu

createMenu gtColorMenu gtForm $colorMenu
createMenu gtLabelsColorMenu gt_Labels $colorMenu
createMenu gtAxesColorMenu gt_Axes $colorMenu
createMenu gtTicksColorMenu gt_Ticks $colorMenu

createMenu gtAxistypeMenu gt_Axes {
    {linear		f.exec "setMenuLabel linear"}
    {logarithmic	f.exec "setMenuLabel logarithmic"}
}

proc gtApply {widget args} {
    global gticolors

    # gtLabelsShell
    send client gcmd "title [send gtBTitle get string]"
    send client gcmd "xlabel [send gtXLabel get string]"
    send client gcmd "ylabel [send gtYLabel get string]"
    send client gcmd "xunits [send gtXUnits get string]"
    send client gcmd "yunits [send gtYUnits get string]"
    send client gcmd "/sysid [send gtBSysid get label]"
    send client gcmd "/subtitle [send gtBSubtitle get string]"
    send client gcmd "/titlecolor $gticolors([send gtBTitlecolor get label])"
    set x $gticolors([send gtXAxislabcolor get label])
    set y $gticolors([send gtYAxislabcolor get label])
    send client gcmd "/axislabelcolor $x $y"

    # gtLabelsShell
    set x [send gtXView1 get string]
    set y [send gtXView2 get string]
    send client gcmd "/xview $x $y"
    set x [send gtYView1 get string]
    set y [send gtYView2 get string]
    send client gcmd "/yview $x $y"
    set x [send gtXDrawaxes get label]
    set y [send gtYDrawaxes get label]
    send client gcmd "/drawaxes $x $y"
    set x [send gtXAxiswidth get string]
    set y [send gtYAxiswidth get string]
    send client gcmd "/axiswidth $x $y"
    send client gcmd "/majorwidth $x $y"
    send client gcmd "/minorwidth $x $y"
    send client gcmd "/xtransform [send gtXAxistype get label]"
    send client gcmd "/ytransform [send gtYAxistype get label]"
    set x $gticolors([send gtXAxiscolor get label])
    set y $gticolors([send gtYAxiscolor get label])
    send client gcmd "/axiscolor $x $y"
    send client gcmd "/tickcolor $x $y"
    set x [send gtXDrawgrid get label]
    set y [send gtYDrawgrid get label]
    send client gcmd "/drawgrid $x $y"
    set x $gticolors([send gtXGridcolor get label])
    set y $gticolors([send gtYGridcolor get label])
    send client gcmd "/gridcolor $x $y"
    send client gcmd "/framecolor $gticolors([send gtBFramecolor get label])"

    # gtTicksShell
    set x [send gtXDrawticks get label]
    set y [send gtYDrawticks get label]
    send client gcmd "/drawticks $x $y"
    set x [send gtXNmajor get string]
    set y [send gtYNmajor get string]
    send client gcmd "/nmajor $x $y"
    set x [send gtXNminor get string]
    set y [send gtYNminor get string]
    send client gcmd "/nminor $x $y"
    set x [send gtXLabelticks get label]
    set y [send gtYLabelticks get label]
    send client gcmd "/labelticks $x $y"
    send client gcmd "/xformat [send gtXFormat get string]"
    send client gcmd "/yformat [send gtYFormat get string]"
    set x $gticolors([send gtXTicklabcolor get label])
    set y $gticolors([send gtYTicklabcolor get label])
    send client gcmd "/ticklabelcolor $x $y"

    # gtShell
    send client gcmd "/type [send gtBType get label]"
    send client gcmd "/color $gticolors([send gtBColor get label])"
    send client gcmd "/xsize [send gtXSymsize get string]"
    send client gcmd "/ysize [send gtYSymsize get string]"
    send client gcmd "register type all [send gtBType get label]"
    send client gcmd "register type all\[u\] [send gtEType get label]"
    send client gcmd "register color all $gticolors([send gtBColor get label])"

    send client gcmd "/redraw"
    send client gcmd "register select current"
}; send gtApply addCallback gtApply
send gtLabelsApply addCallback gtApply
send gtAxesApply addCallback gtApply
send gtTicksApply addCallback gtApply

proc gtValues {param old new} {
	global gtcolors

	# gtLabelsShell
	set vnew [lindex $new 0]; set vold [send gtBSysid get label]
	if {$vnew != $vold} {send gtBSysid set label $vnew}
	set vnew [lindex $new 2]; set vold [send gtBSubtitle get string]
	if {$vnew != $vold} {send gtBSubtitle set string $vnew}
	set vnew $gtcolors([lindex $new 45])
	set vold [send gtBTitlecolor get label]
	if {$vnew != $vold} {send gtBTitlecolor set label $vnew}
	set vnew $gtcolors([lindex $new 48])
	set vold [send gtXAxislabcolor get label]
	if {$vnew != $vold} {send gtXAxislabcolor set label $vnew}
	set vnew $gtcolors([lindex $new 49])
	set vold [send gtYAxislabcolor get label]
	if {$vnew != $vold} {send gtYAxislabcolor set label $vnew}

    	# gtAxesShell
	set vnew [lindex $new 7]; set vold [send gtXView1 get string]
	if {$vnew != $vold} {send gtXView1 set string $vnew}
	set vnew [lindex $new 8]; set vold [send gtXView2 get string]
	if {$vnew != $vold} {send gtXView2 set string $vnew}
	set vnew [lindex $new 9]; set vold [send gtYView1 get string]
	if {$vnew != $vold} {send gtYView1 set string $vnew}
	set vnew [lindex $new 10]; set vold [send gtYView2 get string]
	if {$vnew != $vold} {send gtYView2 set string $vnew}
	set vnew [lindex $new 26]; set vold [send gtXDrawaxes get label]
	if {$vnew != $vold} {send gtXDrawaxes set label $vnew}
	set vnew [lindex $new 27]; set vold [send gtYDrawaxes get label]
	if {$vnew != $vold} {send gtYDrawaxes set label $vnew}
	set vnew [lindex $new 28]; set vold [send gtXAxiswidth get string]
	if {$vnew != $vold} {send gtXAxiswidth set string $vnew}
	set vnew [lindex $new 29]; set vold [send gtYAxiswidth get string]
	if {$vnew != $vold} {send gtYAxiswidth set string $vnew}
	set vnew [lindex $new 30]; set vold [send gtXAxistype get label]
	if {$vnew != $vold} {send gtXAxistype set label $vnew}
	set vnew [lindex $new 31]; set vold [send gtYAxistype get label]
	if {$vnew != $vold} {send gtYAxistype set label $vnew}
	set vnew $gtcolors([lindex $new 50])
	set vold [send gtXAxiscolor get label]
	if {$vnew != $vold} {send gtXAxiscolor set label $vnew}
	set vnew $gtcolors([lindex $new 51])
	set vold [send gtYAxiscolor get label]
	if {$vnew != $vold} {send gtYAxiscolor set label $vnew}
	set vnew [lindex $new 32]; set vold [send gtXDrawgrid get label]
	if {$vnew != $vold} {send gtXDrawgrid set label $vnew}
	set vnew [lindex $new 33]; set vold [send gtYDrawgrid get label]
	if {$vnew != $vold} {send gtYDrawgrid set label $vnew}
	set vnew $gtcolors([lindex $new 46])
	set vold [send gtXGridcolor get label]
	if {$vnew != $vold} {send gtXGridcolor set label $vnew}
	set vnew $gtcolors([lindex $new 47])
	set vold [send gtYGridcolor get label]
	if {$vnew != $vold} {send gtYGridcolor set label $vnew}
	set vnew $gtcolors([lindex $new 44])
	set vold [send gtBFramecolor get label]
	if {$vnew != $vold} {send gtBFramecolor set label $vnew}

    	# gtTicksShell
	set vnew [lindex $new 34]; set vold [send gtXDrawticks get label]
	if {$vnew != $vold} {send gtXDrawticks set label $vnew}
	set vnew [lindex $new 35]; set vold [send gtYDrawticks get label]
	if {$vnew != $vold} {send gtYDrawticks set label $vnew}
	set vnew [lindex $new 36]; set vold [send gtXNmajor get string]
	if {$vnew != $vold} {send gtXNmajor set string $vnew}
	set vnew [lindex $new 37]; set vold [send gtYNmajor get string]
	if {$vnew != $vold} {send gtYNmajor set string $vnew}
	set vnew [lindex $new 38]; set vold [send gtXNminor get string]
	if {$vnew != $vold} {send gtXNminor set string $vnew}
	set vnew [lindex $new 39]; set vold [send gtYNminor get string]
	if {$vnew != $vold} {send gtYNminor set string $vnew}
	set vnew [lindex $new 40]; set vold [send gtXLabelticks get label]
	if {$vnew != $vold} {send gtXLabelticks set label $vnew}
	set vnew [lindex $new 41]; set vold [send gtYLabelticks get label]
	if {$vnew != $vold} {send gtYLabelticks set label $vnew}
	set vnew [lindex $new 42]; set vold [send gtXFormat get string]
	if {$vnew != $vold} {send gtXFormat set string $vnew}
	set vnew [lindex $new 43]; set vold [send gtYFormat get string]
	if {$vnew != $vold} {send gtYFormat set string $vnew}
	set vnew $gtcolors([lindex $new 52])
	set vold [send gtXTicklabcolor get label]
	if {$vnew != $vold} {send gtXTicklabcolor set label $vnew}
	set vnew $gtcolors([lindex $new 53])
	set vold [send gtYTicklabcolor get label]
	if {$vnew != $vold} {send gtYTicklabcolor set label $vnew}

    	# gtShell
	set vnew [lindex $new 22]; set vold [send gtBType get label]
	if {$vnew != $vold} {send gtBType set label $vnew}
	set vnew $gtcolors([lindex $new 25]); set vold [send gtBColor get label]
	if {$vnew != $vold} {send gtBColor set label $vnew}
	set vnew [lindex $new 23]; set vold [send gtXSymsize get string]
	if {$vnew != $vold} {send gtXSymsize set string $vnew}
	set vnew [lindex $new 24]; set vold [send gtYSymsize get string]
	if {$vnew != $vold} {send gtYSymsize set string $vnew}
	set vnew $gtcolors([lindex $new 56])
}; send gtvalues addCallback gtValues

proc YNtoggle {widget args} {
	set state [send $widget get label]
	if {$state == "NO"} {
	    send $widget set label YES
	} else {
	    send $widget set label NO
	}
}

send gtBSysid addCallback YNtoggle
send gtXDrawticks addCallback YNtoggle
send gtYDrawticks addCallback YNtoggle
send gtXLabelticks addCallback YNtoggle
send gtYLabelticks addCallback YNtoggle
send gtXDrawgrid addCallback YNtoggle
send gtYDrawgrid addCallback YNtoggle

proc setMenuWidget {widget args} {
    global menuWidget
    set menuWidget $widget
}
send gtBColor addCallback setMenuWidget
send gtBTitlecolor addCallback setMenuWidget
send gtBFramecolor addCallback setMenuWidget
send gtXAxiscolor addCallback setMenuWidget
send gtXAxislabcolor addCallback setMenuWidget
send gtXTicklabcolor addCallback setMenuWidget
send gtXGridcolor addCallback setMenuWidget
send gtYAxiscolor addCallback setMenuWidget
send gtYAxislabcolor addCallback setMenuWidget
send gtYTicklabcolor addCallback setMenuWidget
send gtYGridcolor addCallback setMenuWidget
send gtXDrawaxes addCallback setMenuWidget
send gtYDrawaxes addCallback setMenuWidget
send gtXAxistype addCallback setMenuWidget
send gtYAxistype addCallback setMenuWidget
send gtBType addCallback setMenuWidget
send gtEType addCallback setMenuWidget
send stackValue1 addCallback setMenuWidget
send stackValue2 addCallback setMenuWidget
send labelColor addCallback setMenuWidget
send llabColor addCallback setMenuWidget
send modProfVal addCallback setMenuWidget

proc setMenuLabel {label} {
    global menuWidget
    send $menuWidget set label $label
    switch $menuWidget {
    regType	-
    regColor	{spAttrib $menuWidget}
    modColor	-
    modSumColor	-
    modContColor {sendModPlot $menuWidget}
    labelColor	{setLabel labelColor}
    llabColor	{llabLabel llabColor}
    stackValue1	{send client gcmd "stck scale $label"}
    stackValue2	{send client gcmd "stck type \"$label\""}
    modProfVal	{sendModValues $menuWidget}
    }
}

# Error Shell
proc errpars {param old new} {
    send errErrorsVal set label [lindex $new 0]
    send errSamplesVal set string [lindex $new 1]
    send errSigmaVal set string [lindex $new 2]
    send errSeedVal set string [lindex $new 3]
}; send errpars addCallback errpars

proc errApply {widget args} {
    switch $widget {
    errErrorsVal {
	set state [send $widget get label]
	if {$state == "NO"} {
	    send $widget set label YES
	} else {
	    send $widget set label NO
	}
    }}
    set cmd "errors"
    append cmd " [send errErrorsVal get label]"
    append cmd " [send errSamplesVal get string]"
    append cmd " [send errSigmaVal get string]"
    append cmd " [send errSeedVal get string]"
    send client "gcmd $cmd"
}
send errApply addCallback errApply
send errErrorsVal addCallback errApply
send errSamplesVal addCallback errApply
send errSigmaVal addCallback errApply
send errSeedVal addCallback errApply

# Model Shell
createMenu profMenu modShell {
    {"gaussian"		f.exec {setMenuLabel gaussian}}
    {"lorentzian"	f.exec {setMenuLabel lorentzian}}
    {"voigt"		f.exec {setMenuLabel voigt}}
}

proc modShow {widget type state} {
    global yn

    send client gcmd "plot models $yn($state)"
}; send modShow addCallback modShow

proc setModPars {param old new} {
    global gtcolors
    send modPos set on [lindex $new 0]
    send modInt set on [lindex $new 1]
    send modGFWHMTog set on [lindex $new 2]
    send modLFWHMTog set on [lindex $new 3]
    send modBkg set on [lindex $new 4]
    send modRelPos set on [lindex $new 5]
    send modRelInt set on [lindex $new 6]
    send modRelGFWHM set on [lindex $new 7]
    send modRelLFWHM set on [lindex $new 8]
    send modEqGFWHM set on [lindex $new 9]
    send modEqLFWHM set on [lindex $new 10]
}; send modpars addCallback setModPars

proc sendModPars args {
    set cmd "modpars"
    append cmd " [send modPos get on]"
    append cmd " [send modInt get on]"
    append cmd " [send modGFWHMTog get on]"
    append cmd " [send modLFWHMTog get on]"
    append cmd " [send modBkg get on]"
    append cmd " [send modRelPos get on]"
    append cmd " [send modRelInt get on]"
    append cmd " [send modRelGFWHM get on]"
    append cmd " [send modRelLFWHM get on]"
    append cmd " [send modEqGFWHM get on]"
    append cmd " [send modEqLFWHM get on]"
    send client gcmd "model $cmd"
}
send modPos addCallback sendModPars
send modInt addCallback sendModPars
send modGFWHMTog addCallback sendModPars
send modLFWHMTog addCallback sendModPars
send modBkg addCallback sendModPars
send modRelPos addCallback sendModPars
send modRelInt addCallback sendModPars
send modRelGFWHM addCallback sendModPars
send modRelLFWHM addCallback sendModPars
send modEqGFWHM addCallback sendModPars
send modEqLFWHM addCallback sendModPars

proc setModValues {param old new} {
    send modSub set state [lindex $new 0]
    send modLowVal set label [lindex $new 1]
    send modUpVal set label [lindex $new 2]
    send modProfVal set label [lindex $new 3]
    send modCenVal set string [lindex $new 4]
    send modPeakVal set string [lindex $new 5]
    send modGFWHMVal set string [lindex $new 6]
    send modLFWHMVal set string [lindex $new 7]
    send modContVal set string [lindex $new 8]
    send modSlopeVal set string [lindex $new 9]
    send modFluxVal set label [lindex $new 10]
    send modEqwVal set label [lindex $new 11]
}; send modvalues addCallback setModValues

proc sendModValues {widget args} {
    set item [send lids_List getItem itemno]
    if {$itemno == "none"} {set itemno 0} else {incr itemno}

    append cmd "model $itemno"
    append cmd " [send modProfVal get label]"
    append cmd " [send modCenVal get string]"
    append cmd " [send modPeakVal get string]"
    append cmd " [send modGFWHMVal get string]"
    append cmd " [send modLFWHMVal get string]"
    append cmd " [send modContVal get string]"
    append cmd " [send modSlopeVal get string]"

    send client gcmd "model $cmd"
}
send modCenVal addCallback sendModValues
send modPeakVal addCallback sendModValues
send modGFWHMVal addCallback sendModValues
send modLFWHMVal addCallback sendModValues
send modContVal addCallback sendModValues
send modSlopeVal addCallback sendModValues

proc setModPlot {param old new} {
    global gtcolors
    send modDraw set state [lindex $new 0]
    send modPlotProf set on [lindex $new 1]
    send modColor set label $gtcolors([lindex $new 2])
    send modPlotSum set on [lindex $new 3]
    send modSumColor set label $gtcolors([lindex $new 4])
    send modPlotCont set on [lindex $new 5]
    send modContColor set label $gtcolors([lindex $new 6])
}; send modplot addCallback setModPlot

proc sendModPlot {widget args} {
    global gticolors
    if {[send modAll get state]} {
	set itemno -1
    } else {
	set item [send lids_List getItem itemno]
	if {$itemno == "none"} {set itemno 0} else {incr itemno}
    }

    append cmd "plotpars $itemno"
    append cmd " [send modDraw get state]"
    append cmd " [send modPlotProf get on]"
    append cmd " $gticolors([send modColor get label])"
    append cmd " [send modPlotSum get on]"
    append cmd " $gticolors([send modSumColor get label])"
    append cmd " [send modPlotCont get on]"
    append cmd " $gticolors([send modContColor get label])"

    send client gcmd "model $cmd"
}
send modPlotProf addCallback sendModPlot
send modPlotSum addCallback sendModPlot
send modPlotCont addCallback sendModPlot

send modColor addCallback setMenuWidget
send modSumColor addCallback setMenuWidget
send modContColor addCallback setMenuWidget
createMenu modColorMenu modShell $colorMenu

proc modDraw {widget args} {
    if {[send modAll get state]} {
	set itemno -1
    } else {
	set item [send lids_List getItem itemno]
	if {$itemno == "none"} {set itemno 0} else {incr itemno}
    }
    send client gcmd "model draw $itemno [send modDraw get state]"
}
send modDraw addCallback modDraw

# Arithmetic

proc arithreg {param old new} {
    send arithTemplate set string [lindex $new 0]
    send arithOut set string [lindex $new 1]
}; send arithreg addCallback arithreg

proc arithexpr {param old new} {
    send arithExpr set string $new
}; send arithexpr addCallback arithexpr

proc arithtypes {param old new} {
    send arithSpec set on [lindex $new 0]
    send arithCont set on [lindex $new 1]
    send arithRaw set on [lindex $new 2]
    send arithSky set on [lindex $new 3]
    send arithSig set on [lindex $new 4]
}; send arithtypes addCallback arithtypes

proc arithReg {widget args} {
    append cmd "registers"
    append cmd " \"[send arithTemplate get string]\""
    append cmd " \"[send arithOut get string]\""
    send client gcmd "sarith $cmd"
}
send arithTemplate addCallback arithReg
send arithOut addCallback arithReg

proc arithExpr {widget args} {
    append cmd "sarith"
    append cmd " \"[send arithTemplate get string]\""
    append cmd " \"[send arithOut get string]\""
    append cmd " [send arithExpr get string]"
    send client gcmd "sarith $cmd"
}
send arithExpr addCallback arithExpr

proc arithTypes {widget args} {
    append cmd "stypes"
    append cmd " [send arithSpec get on]"
    append cmd " [send arithCont get on]"
    append cmd " [send arithRaw get on]"
    append cmd " [send arithSky get on]"
    append cmd " [send arithSig get on]"
    send client gcmd "sarith $cmd"
}
send arithSpec addCallback arithTypes
send arithCont addCallback arithTypes
send arithRaw addCallback arithTypes
send arithSky addCallback arithTypes
send arithSig addCallback arithTypes

proc regArith {widget name args} {
    set reg [lindex [send $widget getItem itemno] 0]
    if {$reg == ""} return

    switch $name {
    add 	{send client gcmd "arith .+$reg"}
    sub 	{send client gcmd "arith .-$reg"}
    mul 	{send client gcmd "arith .*$reg"}
    div 	{send client gcmd "arith ./$reg"}
    }
}

# Equivalent Widths

proc eqwvalues {param old new} {
    send eqwLowVal set label [lindex $new 0]
    send eqwUpVal set label [lindex $new 1]
    send eqwCenVal set label [lindex $new 2]
    send eqwContVal set label [lindex $new 3]
    send eqwFluxVal set label [lindex $new 4]
    send eqwEqwVal set label [lindex $new 5]
}; send eqwvalues addCallback eqwvalues


# Log Window
createMenu logFileMenu logFile {
    {"Open..."          f.exec {getFile logopen}}
    {"Save"		f.exec {send client gcmd "log save"}}
    {"Clear"		f.exec {send client gcmd "log clear"}}
}

proc logCallbacks {widget args} {
    switch $widget {
    logFilename	{set logfile [send logFilename get string]
		 send client gcmd "log logfile $logfile"}
    }
}
send logFilename addCallback logCallbacks

proc logcmd {param old new} {
    switch [lindex $new 0] {
    logfile	{send logFilename set string [lindex $new 1]}
    clear	{send logText set string ""}
    save	{logsave}
    }
}; send logcmd addCallback logcmd

proc logsave args {
    set str [send logText get string]
    #set strs [split [string trimright $str \n] \n]
    set strs [split $str \n]
    foreach str $strs {
	send client gcmd "line $str"
    }
    send client gkey q
}

proc logadd {param old new} {
    set str [send logText get string]
    set str [append str $new]
    send logText set string $str
    send logText set insertPosition [string length $str]
}; send logadd addCallback logadd

# Dialog popup.
proc dialogExec {widget args} {
    global dialogCmd

    send dialogShell popdown
    eval $dialogCmd
}

send dialogValue addCallback dialogExec
send dialogExec addCallback dialogExec

# Stack
createMenu stackMenu1 stackShell {
    {"none"			f.exec {setMenuLabel none}}
    {"scale to unit mean"	f.exec {setMenuLabel scale}}
    {"offset to zero mean"	f.exec {setMenuLabel offset}}
}
createMenu stackMenu2 stackShell {
    {"uniform absolute steps"	    f.exec {setMenuLabel "absolute"}}
    {"uniform first range steps"    f.exec {setMenuLabel "first range"}}
    {"individual range steps"	    f.exec {setMenuLabel "individual ranges"}}
}
proc stackSend {widget args} {
    global yn

    switch $widget {
    stackOverplot {
	send client gcmd "overplot $yn([send stackOverplot get state])"
    } stackStack {
	send client gcmd "stack $yn([send stackStack get state])"
    } stackValue3 {
	send client gcmd "stck [send stackValue3 get string]"
    } stackValue4 {
	send client gcmd "stck plot [send stackValue4 get on]"
    } stackValue5 {
	send client gcmd "stck color [send stackValue5 get on]"}
    }
};
send stackOverplot addCallback stackSend
send stackStack addCallback stackSend
send stackValue3 addCallback stackSend
send stackValue4 addCallback stackSend
send stackValue5 addCallback stackSend

# Statistics

set stat {
	stat1 stat2 stat3 stat4 stat5 stat6 stat7 stat8
	stat9 stat10 stat11 stat12 stat13 stat14
}
foreach widget $stat {
    send $widget addCallback statSend
}

proc statval {param old new} {
    set cmd [lindex $new 0]
    switch $cmd { 
    clear {
	foreach widget {stat1val stat2val stat3val stat4val stat5val stat6val
	    stat7val stat8val stat9val stat10val stat11val stat12val stat13val
	    stat14val} {
	    send $widget set label "        "
	}}
    statX1	-
    statX2	{send $cmd set string [lindex $new 1]}
    default	{send $cmd set label [lindex $new 1]}
    }
}; send statval addCallback statval

proc statMeasure {widget args} {
    set x1 [send statX1 get string]
    set x2 [send statX2 get string]
    send client gcmd "stat measure $x1 $x2"
}; send statMeasure addCallback statMeasure
send statX1 addCallback statMeasure
send statX2 addCallback statMeasure

proc statSet {param old new} {
    set name [lindex $new 1]
    set state [lindex $new 2]
    send $name set on $state
}; send statSet addCallback statSet

proc statSend {widget args} {
    set state [send $widget get on]
    send client gcmd "stat set $widget $state"
}

# Save window.
proc setSaveMenu {name} {
    global saveFmt saveOW

    switch $name {
    same {
	set saveFmt same
    } onedspec {
	set saveFmt onedspec
    } ow {
	set saveOW  [expr !$saveOW]
    }}

    set menu {
	{"  Set filename..."	f.exec "getFile savefname"}
	{			f.space 10}			
	{"  Same format"	f.exec {setSaveMenu same}
                bitmap {($saveFmt=="same") ? "check" : "null" } }
	{"  ONEDSPEC"		f.exec {setSaveMenu onedspec}
                bitmap {($saveFmt=="onedspec") ? "check" : "null" } }
	{			f.space 10}			
	{"  Overwrite (toggle)"	f.exec {setSaveMenu ow}
                bitmap {($saveOW) ? "check" : "null" } }
    }
    editMenu saveFileMenu saveFile $menu
}

set saveFmt same
set saveOW 0
setSaveMenu default
	    
proc saveReg {widget cbtype item itemno} {
    global	saveFmt saveOW YN

    set reg [lindex $item 0]
    set file [send saveFilename get string]
    send client gcmd "%$reg write \"$file\" $saveFmt $YN($saveOW)"
    send saveList unhighlight
}; send saveList addCallback saveReg

# Print window
proc printPrint {widget args} {
    switch $widget {
    printPrint {
	set dev [send printValue get string]
	send client gcmd ".snap $dev"
    } printPS {
	set dev [send printPSValue get string]
	send client gcmd ".snap $dev"
    } printEPS {
	set dev [send printEPSValue get string]
	send client gcmd ".snap $dev"
    }}
}
send printPrint addCallback printPrint
send printPS addCallback printPrint
send printEPS addCallback printPrint

set printScreen 0
set specShell 0
proc printScreen {args} {
    global printScreen specShell

    set specShell [expr int(fmod($specShell+1,10))]
    set width [send printWidthVal get string]
    set height [send printHeightVal get string]
    send specShell$specShell resize $width $height
    send specGterm$specShell setGterm
    send client gcmd redraw 
    map specShell$specShell
    set printScreen 1
}; send printScreen addCallback printScreen

proc donePrintScreen {param old new} {
    global gterm printScreen
    if {$printScreen > 0} {
	if {$printScreen == 1} {
	    send $gterm setGterm
	    set printScreen 0
	} else {
	    printScreen
	}
    }
}; send ready addCallback donePrintScreen

# Deredden window.

proc deredDered args {
    global YN
    set rv [send deredParam1 get string]
    set av [send deredParam2 get string]
    if {[send deredParam31 get on]} {set type [send deredParam31 get label]}
    if {[send deredParam32 get on]} {set type [send deredParam32 get label]}
    if {[send deredParam33 get on]} {set type [send deredParam33 get label]}
    set uncorrect $YN([send deredParam4 get on])
    set override $YN([send deredParam5 get on])
    send client gcmd "deredden deredden $rv $av $type $uncorrect $override"
}; send deredDered addCallback deredDered

proc deredParam3 {widget args} {
    send $widget set on 1
    switch $widget {
    deredParam31 {send deredParam32 set on 0; send deredParam33 set on 0}
    deredParam32 {send deredParam31 set on 0; send deredParam33 set on 0}
    deredParam33 {send deredParam31 set on 0; send deredParam32 set on 0}
    }
}
send deredParam31 addCallback deredParam3
send deredParam32 addCallback deredParam3
send deredParam33 addCallback deredParam3
deredParam3 deredParam31

# Lines
proc setLineList {param old new} {
    send lids_List setList $new resize
}; send lidslist addCallback setLineList

proc line {param old new} {
    set itemno [lindex $new 0]; incr itemno -1
    set center [lindex $new 1]
    set reference [lindex $new 2]
    set lower [lindex $new 3]
    set upper [lindex $new 4]
    set label [lindex $new 5]
    set llindex [lindex $new 6]; incr llindex -1

    send lids_List highlight $itemno
    send lids_CenterVal set string $center
    send lids_ReferenceVal set string $reference
    send lids_LowerVal set string $lower
    send lids_UpperVal set string $upper
    send lids_LabelVal set string $label

    if {$itemno < 0} {
	send lidsLine set label "Define or select line"
	send llabLine set label "Define or select line"
	send ctrLine set label "Define or select line"
	send llLine set label "Define or select line"
	send eqwLine set label "Define or select line"
	send modLine set label "Define or select line"
    } else {
	send lidsLine set label "$center $reference $label"
	send llabLine set label "$center $reference $label"
	send ctrLine set label "$center $reference $label"
	send llLine set label "$center $reference $label"
	send eqwLine set label "$center $reference $label"
	send modLine set label "$center $reference $label"
    }

    if {$llindex < 0} {
	send llList unhighlight
    } else {
	send llList highlight $llindex
    }
}; send line addCallback line

proc lineList {widget name args} {
    set item [send $widget getItem itemno]
    if {$itemno == "none"} {set itemno 0} else {incr itemno}

    switch $name {
    select	{send client gcmd "lids select $itemno"}
    center	{send client gcmd "ctr center $itemno"}
    delete	{send client gcmd "lids delete $itemno"}
    eqwidth	{send client gcmd "eqwidth eqwidth $itemno"}
    fit		{send client gcmd "model fit $itemno"}
    label	{send client gcmd "lids label $itemno"}
    plot	{send client gcmd "model draw $itemno"}
    subtract	{send client gcmd "model subtract $itemno"}
    }
}

proc lineButtons {widget args} {
    switch $widget {
    ctrCenter		{   if {[send ctrAll get state]} {
				send client gcmd "ctr center -1"
			    } else {
				lineList lids_List center
			    }
			}
    eqwEqwidth		{   if {[send eqwAll get state]} {
				send client gcmd "eqwidth eqwidth -1"
			    } else {
				lineList lids_List eqwidth
			    }
			}
    modFit		{   if {[send modAll get state]} {
				send client gcmd "model fit -1"
			    } else {
				lineList lids_List fit
			    }
			}
    modSub		{   if {[send modAll get state]} {
				send client gcmd "model subtract -1 [send modSub get state]"
			    } else {
				lineList lids_List subtract
			    }
			}
    }
}
send ctrCenter addCallback lineButtons
send eqwEqwidth addCallback lineButtons
send modFit addCallback lineButtons
send modSub addCallback lineButtons

proc sendLine {widget args} {
    set center [send lids_CenterVal get string]
    set reference [send lids_ReferenceVal get string]
    set lower [send lids_LowerVal get string]
    set upper [send lids_UpperVal get string]
    set label [send lids_LabelVal get string]

    send client gcmd "lids line 0 $center $reference $lower $upper \"$label\""
}
send lids_CenterVal addCallback sendLine
send lids_ReferenceVal addCallback sendLine
send lids_LowerVal addCallback sendLine
send lids_UpperVal addCallback sendLine
send lids_LabelVal addCallback sendLine

# Labels
createMenu labelColorMenu labelShell $colorMenu

proc labelShow {widget type state} {
    global yn

    send client gcmd "labels $yn($state)"
}; send labelShow addCallback labelShow

proc labelRadio {widget args} {
    send $widget set on 1
    switch $widget {
    labelSpec  {send labelGraph set on 0}
    labelGraph {send labelSpec set on 0}
    labelVert  {send labelHoriz set on 0; send labelOther set on 0}
    labelHoriz {send labelVert set on 0;  send labelOther set on 0}
    labelOther {send labelVert set on 0;  send labelHoriz set on 0}
    }
}
send labelSpec addCallback labelRadio
send labelGraph addCallback labelRadio
send labelVert addCallback labelRadio
send labelHoriz addCallback labelRadio
send labelOther addCallback labelRadio

proc labelOtherVal args {
    labelRadio labelOther
}; send labelOtherVal addCallback labelOtherVal

proc labelList {widget name args} {
    set item [send $widget getItem itemno]
    if {$itemno == "none"} {set itemno 0} else {incr itemno}
    switch $name {
    select	{send client gcmd "label select $itemno"}
    delete	{send client gcmd "label delete $itemno"}
    label	{send client gcmd "label label $itemno"}
    }
}

proc setLabelList {param old new} {
    send labelList setList $new resize
}; send labellist addCallback setLabelList

proc labelset {param old new} {
    global gtcolors
    send labelDraw set state [lindex $new 0]
    set itemno [lindex $new 1]
    incr itemno -1
    send labelList highlight $itemno
    send labelX set string [lindex $new 2]
    send labelY set string [lindex $new 3]
    send labelLabel set string [lindex $new 4]
    switch [lindex $new 5] {
    1 {labelRadio labelSpec}
    2 {labelRadio labelGraph}
    }
    switch [lindex $new 6] {
    Vertical	{labelRadio labelVert}
    Horizontal	{labelRadio labelHoriz}
    default		{
	labelRadio labelOther
	send labelOtherVal set string [lindex $new 6]}
    }
    send labelColor set label $gtcolors([lindex $new 7])
}; send labelset addCallback labelset

proc setLabel {widget args} {
    global gticolors
    if {[send labelAll get state]} {
	set itemno -1
    } else {
	set item [send labelList getItem itemno]
	if {$itemno == "none"} {set itemno 0} else {incr itemno}
    }

    set cmd "labpars $itemno"
    if {[send labelSpec get on]} {append cmd " 1"}
    if {[send labelGraph get on]} {append cmd " 2"}
    if {[send labelVert get on]} {append cmd " Vertical"}
    if {[send labelHoriz get on]} {append cmd " Horizontal"}
    if {[send labelOther get on]} {
	append cmd " \"[send labelOtherVal get string]\""
    }
    append cmd " $gticolors([send labelColor get label])"
    append cmd " \"[send labelLabel get string]\""
    append cmd " [send labelX get string]"
    append cmd " [send labelY get string]"
    send client gcmd "label $cmd"
}
send labelLabel addCallback setLabel
send labelX addCallback setLabel
send labelY addCallback setLabel
send labelVert addCallback setLabel
send labelHoriz addCallback setLabel
send labelOther addCallback setLabel
send labelOtherVal addCallback setLabel

proc setLabelType {widget args} {
    set item [send labelList getItem itemno]
    if {$itemno == "none"} {
	set itemno 0
    } else {
	incr itemno
    }
    switch $widget {
    labelSpec {send client gcmd "label type $itemno 1"}
    labelGraph {send client gcmd "label type $itemno 2"}
    }
}
send labelSpec addCallback setLabelType
send labelGraph addCallback setLabelType

proc labelDraw {widget args} {
    if {[send labelAll get state]} {
	set itemno -1
    } else {
	set item [send labelList getItem itemno]
	if {$itemno == "none"} {set itemno 0} else {incr itemno}
    }
    send client gcmd "label label $itemno [send labelDraw get state]"
}
send labelDraw addCallback labelDraw

# Feature/Label and RV window
createMenu llabColorMenu llabShell $colorMenu

proc llabShow {widget type state} {
    global yn

    send client gcmd "lines $yn($state)"
}; send llabShow addCallback llabShow

createMenu lidsFileMenu lidsFile {
    {"Read..."                  f.exec "getFile lidsread"	}
    {"Write..."                 f.exec "getFile lidswrite"	}
}

proc llabRadio {widget args} {
    send $widget set on 1
    switch $widget {
    llabAbove {send llabBelow set on 0}
    llabBelow {send llabAbove set on 0}
    llabVert  {send llabHoriz set on 0; send llabOther set on 0}
    llabHoriz {send llabVert set on 0;  send llabOther set on 0}
    llabOther {send llabVert set on 0;  send llabHoriz set on 0}
    }
}
send llabAbove addCallback llabRadio
send llabBelow addCallback llabRadio
send llabVert addCallback llabRadio
send llabHoriz addCallback llabRadio
send llabOther addCallback llabRadio

proc llabOtherRadio args {
    llabRadio llabOther
}; send llabOtherVal addCallback llabOtherRadio

proc llabpars {param old new} {
    switch [lindex $new 0] {
    set		{send llMinSep set string [lindex $new 1]}
    }
}; send lidspars addCallback llabpars

proc llabset {param old new} {
    global gtcolors

    send llabDraw set state [lindex $new 0]
    set y [lindex $new 1]
    if {$y < 0} {
	llabRadio llabBelow
	send llabY2 set string [expr abs($y)]
    } else {
	llabRadio llabAbove
	send llabY2   set string $y
    }
    send llabObs set on [lindex $new 2]
    send llabRef set on [lindex $new 3]
    send llabId   set on [lindex $new 4]
    send llabTick set on [lindex $new 5]
    send llabArrow set on [lindex $new 6]
    send llabBand set on [lindex $new 7]
    switch [lindex $new 8] {
    Vertical	{llabRadio llabVert}
    Horizontal	{llabRadio llabHoriz}
    default		{
	llabRadio llabOther
	send llabOtherVal set string [lindex $new 8]}
    }
    send llabColor set label $gtcolors([lindex $new 9])
}; send lidsset addCallback llabset

proc llabSep args {send client gcmd "lids sep [send llMinSep get string]"}
send llMinSep addCallback llabSep

send allToggle addCallback "send client gkey a"
send ctrAll addCallback "send client gkey a"
send lidsAll addCallback "send client gkey a"
send llabAll addCallback "send client gkey a"
send modAll addCallback "send client gkey a"
send eqwAll addCallback "send client gkey a"

proc llabDraw {widget args} {
    if {[send allToggle get state]} {
	set itemno -1
    } else {
	set item [send lids_List getItem itemno]
	if {$itemno == "none"} {set itemno 0} else {incr itemno}
    }
    send client gcmd "lids label $itemno [send llabDraw get state]"
}
send llabDraw addCallback llabDraw

proc llabLabel {widget args} {
    global gticolors
    if {[send allToggle get state]} {
	set itemno -1
    } else {
	set item [send lids_List getItem itemno]
	if {$itemno == "none"} {set itemno 0} else {incr itemno}
    }
    
    if {[send llabAbove get on]} {
	set y [expr abs([send llabY2 get string])]
    } else {
	set y [expr -abs([send llabY2 get string])]
    }
    append cmd "lids labpars $itemno"
    append cmd " $y"
    append cmd " [send llabObs get on]"
    append cmd " [send llabRef get on]"
    append cmd " [send llabId get on]"
    append cmd " [send llabTick get on]"
    append cmd " [send llabArrow get on]"
    append cmd " [send llabBand get on]"
    if {[send llabVert get on]} {append cmd " Vertical"}
    if {[send llabHoriz get on]} {append cmd " Horizontal"}
    if {[send llabOther get on]} {
	append cmd " \"[send llabOtherVal get string]\""
    }
    append cmd " $gticolors([send llabColor get label])"
    send client gcmd $cmd
}
send llabAbove addCallback llabLabel
send llabBelow addCallback llabLabel
send llabY2 addCallback llabLabel
send llabObs addCallback llabLabel
send llabRef addCallback llabLabel
send llabId addCallback llabLabel
send llabTick addCallback llabLabel
send llabArrow addCallback llabLabel
send llabBand addCallback llabLabel
send llabVert addCallback llabLabel
send llabHoriz addCallback llabLabel
send llabOther addCallback llabLabel
send llabOtherVal addCallback llabLabel

# Line list

createMenu llFileMenu llFile {
    {"Read..."                  f.exec "getFile llread"	}
}

proc llpars {param old new} {
    send llLinelist set string [lindex $new 0]
    send llSepValue set string [lindex $new 1]
}; send llpars addCallback llpars

proc linelist {param old new} {
    send llList setList $new resize
}; send linelist addCallback linelist

proc setLinelist {widget args} {
    set linelist [send llLinelist get string]
    set match [send llSepValue get string]
    send client gcmd "ll linelist \"$linelist\""
    send client gcmd "ll match $match"
}
send llLinelist addCallback setLinelist
send llSepValue addCallback setLinelist

proc llSelect {name} {
    set item [send lids_List getItem itemno]
    if {$itemno == "none"} {set itemno 0} else {incr itemno}
    set item [send llList getItem llindex]
    if {$llindex == "none"} {set llindex 0} else {incr llindex}
    switch $name {
    select	 {send client gcmd "ll set $itemno $llindex"}
    mark	 {send client gcmd "ll mark $llindex"}
    }
}
send llMark addCallback {send client gcmd "ll mark"}

# Radial Velocities

proc rvVel {param old new} {
    set type [lindex $new 0]
    set val [lindex $new 1]
    switch $type {
    vobs	{send rvVobs set string $val}
    zobs	{send rvZobs set string $val}
    vhelio	{send rvVhelio set string $val}
    zhelio	{send rvZhelio set string $val}
    }
}; send rvvel addCallback rvVel

proc rvResults {param old new} {
    send rvText set string $new
}; send rvresults addCallback rvResults

proc rvCmd {widget args} {
    switch $widget {
    rvVel	{send client gcmd "rv velocity"}
    rvDeredshift	{send client gcmd "rv deredshift"}
    rvClear	{send client gcmd "rv set"}
    rvVobs	{send client gcmd "rv set vobs [send $widget get string]"}
    rvZobs	{send client gcmd "rv set zobs [send $widget get string]"}
    rvVhelio	{send client gcmd "rv set vhelio [send $widget get string]"}
    rvZhelio	{send client gcmd "rv set zhelio [send $widget get string]"}
    }
}
send rvVel addCallback rvCmd
send rvDeredshift addCallback rvCmd
send rvClear addCallback rvCmd
send rvVobs addCallback rvCmd
send rvZobs addCallback rvCmd
send rvVhelio addCallback rvCmd
send rvZhelio addCallback rvCmd

# Centering

proc ctrPars {param old new} {
    switch [lindex $new 0] {
    none	{send ctrCtypes set selection 0}
    center1d	{send ctrCtypes set selection 1}
    gaussian	{send ctrCtypes set selection 2}
    parabola	{send ctrCtypes set selection 3}
    peak	{send ctrCtypes set selection 4}
    }
    switch [lindex $new 1] {
    either	{send ctrPtypes set selection 0}
    emission	{send ctrPtypes set selection 1}
    absorption	{send ctrPtypes set selection 2}
    }
    send ctrWidthVal set string [lindex $new 2]
    send ctrRadiusVal set string [lindex $new 3]
}; send ctrpars addCallback ctrPars

proc ctrCmd {widget args} {
    switch $widget {
    ctrCenter	{send client gcmd "lids center -1"}
    default {
	set cmd "ctr set"
	switch [send ctrCtypes get selection] {
	0x0	{append cmd " none"} 
	0x1	{append cmd " center1d"} 
	0x2	{append cmd " gaussian"} 
	0x3	{append cmd " parabola"} 
	0x4	{append cmd " peak"} 
	}
	switch [send ctrPtypes get selection] {
	0x0 {append cmd " either"}
	0x1 {append cmd " emission"}
	0x2 {append cmd " absorption"}
	}
	append cmd " [send ctrWidthVal get string]"
	append cmd " [send ctrRadiusVal get string]"
	send client gcmd $cmd}
    }
}
send ctrWidthVal addCallback ctrCmd
send ctrRadiusVal addCallback ctrCmd
send ctrCtypes addCallback ctrCmd
send ctrPtypes addCallback ctrCmd

#------------------------------------
# Define procedure for the help panel
#------------------------------------

# Stuff for keeping track of visited anchors.
set links 	{ 0 }
set linkIndex 	  0
set visited(0)	empty

proc getHelpText { param old new } {
    send helpText setText $new
}; send help addCallback getHelpText

proc anchorSelected {widget cbtype event text href args} {
    global visited links linkIndex
    set anchID [send helpText anchorToId $href]
    set visited($href) 1
    if {$linkIndex == 0} {
	send helpBack set sensitive True
        if {[lindex $links 1] != $anchID} {
	    set links { 0 }
	    send helpForward set sensitive False
        } 
    } 
    if {$linkIndex > 0 && [lindex $links [expr $linkIndex + 1]] != $anchID} {
	#set links [lrange $links 0 $linkIndex]
	set pos [send helpText positionToId 0 0]
	set links [lreplace $links $linkIndex end $pos]
    }
    if {[lindex $links [expr $linkIndex + 1]] != $anchID} {
        lappend links $anchID
        incr linkIndex
    } else {
        send helpForward set sensitive False
        incr linkIndex
    }
    if {$linkIndex == [expr [llength $links] - 1]} {
	send helpForward set sensitive False
    }
    send helpText gotoId $anchID
    send helpText retestAnchors
}; send helpText addCallback anchorSelected anchor

proc testAnchor {widget cbtype href} {
    global visited
    return [info exists visited($href)]
}; send helpText addCallback testAnchor testAnchor


# Callbacks to position forwards and backwards in link list.
proc hlpForward args {
    global links linkIndex
    incr linkIndex
    if {$linkIndex <= [llength $links]} {
        set anchID [lindex $links $linkIndex] 
        send helpText gotoId $anchID
        send helpText retestAnchors
	if {$linkIndex == [expr [llength $links] - 1]} {
	    send helpForward set sensitive False
	    send helpBack set sensitive True
	} else {
	    send helpBack set sensitive True
	}
    } else {
	incr linkIndex -1
    }
}; send helpForward addCallback hlpForward

proc hlpBack args {
    global links linkIndex
    incr linkIndex -1
    if {$linkIndex >= 0} {
        set anchID [lindex $links $linkIndex] 
        send helpText gotoId $anchID
        send helpText retestAnchors
	if {$linkIndex == 0} { send helpBack set sensitive False   }
	if {$linkIndex >= 0} { send helpForward set sensitive True }
    } else {
        incr linkIndex 1
    }
}; send helpBack addCallback hlpBack

proc hlpHome args {
    global links linkIndex
    set links { 0 }
    set linkIndex  0
    send helpText gotoId 0
    send helpForward set sensitive False
    send helpBack set sensitive False
}; send helpHome addCallback hlpHome

proc helpTutorial args {
    showHelp tutorial
}; send helpTutorial addCallback helpTutorial

proc max { a b } { expr {($a > $b) ? $a : $b} }

proc hlpFind args {
    set phrase  [send hfEntry get string]
    set dir  forward
    set case caseless

    if { $phrase != "" } {
	if { [send hfDir get on] }  { set dir backward  }
	if { [send hfCase get on] } { set case caseSensitive  }
	if {[send helpText searchText $phrase start end $dir $case ] > 0} {
	    set ref    [lindex $start 0]
	    set elid   [lindex $ref 0]
	    set id     [max 1 [expr $elid - 10] ]
	    send helpText gotoId $id
	    send helpText setSelection $start $end
	}
    }
} ; foreach w { hfEntry hfFind } { send $w addCallback hlpFind }

send hfClear addCallback { send hfEntry set string "" }


proc showhelp {param old new} {
    showHelp $new
}; send showhelp addCallback showhelp

proc showHelp {name args} {
	#send helpText gotoId [send helpText anchorToId #$name]
        anchorSelected widget cbtype event text #$name
	map helpShell
}
send helpButton "set bitmap qmark; addCallback showHelp";
send cntrlHelp "set bitmap qmark; addCallback showHelp"
send viewHelp "set bitmap qmark; addCallback showHelp"
send logHelp "set bitmap qmark; addCallback showHelp"
send regHelp "set bitmap qmark; addCallback showHelp"
send readHelp "set bitmap qmark; addCallback showHelp"
send modHelp "set bitmap qmark; addCallback showHelp"
send eqwHelp "set bitmap qmark; addCallback showHelp"
send errHelp "set bitmap qmark; addCallback showHelp"
send arithHelp "set bitmap qmark; addCallback showHelp"
send saveHelp "set bitmap qmark; addCallback showHelp"
send printHelp "set bitmap qmark; addCallback showHelp"
send rvHelp "set bitmap qmark; addCallback showHelp"
send gtHelp "set bitmap qmark; addCallback showHelp"
send gtLabelsHelp "set bitmap qmark; addCallback showHelp"
send gtAxesHelp "set bitmap qmark; addCallback showHelp"
send gtTicksHelp "set bitmap qmark; addCallback showHelp"
send stackHelp "set bitmap qmark; addCallback showHelp"
send statHelp "set bitmap qmark; addCallback showHelp"
send deredHelp "set bitmap qmark; addCallback showHelp"
send lidsHelp "set bitmap qmark; addCallback showHelp"
send llabHelp "set bitmap qmark; addCallback showHelp"
send labelHelp "set bitmap qmark; addCallback showHelp"
send llHelp "set bitmap qmark; addCallback showHelp"
send ctrHelp "set bitmap qmark; addCallback showHelp"
send sclipHelp "set bitmap qmark; addCallback showHelp"
send flistHelp "set bitmap qmark; addCallback showHelp"
send dialogHelp "set bitmap qmark; addCallback showHelp"


# Initialize commands.
