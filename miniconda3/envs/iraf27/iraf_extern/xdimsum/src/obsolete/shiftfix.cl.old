procedure shiftfix(image_list, outimg, badpixfile)

# Replaced MKIMAGE with MKPATTERN -- 3/31/97 FV
#
# WARNING !! Recent adjustment made to the use of the 'exp' column in
# the shiftlist file -- shiftfix no longer multiplies the image by
# that factor before adding it into the mosaic!  It DOES multiply the
# appropriate "_one" scaling image by that factor before adding it
# into the exposure map, however.  This is meant to be appropriate for
# using the 'exp' column to adjust for non-photometric scalings or
# differing relative exposure times.  It no longer serves as a weighting
# factor, however, unless exp=0, in which case shiftfix just skips
# that image in the summation, as before.  This may not be a desirable 
# change and must be considered further.  In the meanwhile, be forewarned!
#   -- 10/17/93 MD
#
# Check for zero weight in Shiftlist file, and if so, skip that
#  image rather than going through all the trouble just to end
#  up multiplying by zero...  9/19/93 MD
# 26 June 1993 -- rewritten to add shifted images into final summed
#  image one at a time, rather than with en masse call to imsum.
#  This follows previous change made to magshiftfix.  -- MD
# Modified calls to orientimg --> calls new routine orient. 7/22/93 MD
# Added code to copy header information from first input file to
#  the final mosaic image, and to set other header parameters. 7/19/93
# Added parameter ncoavg to properly account for data take in
#  mode where multiple individual exposures are internally coaveraged
#  before readout. -- MD 7/15/93
# Changed handling of outimg string to deal with optional presence
#  of extension. -- MD 2/28/93
# Slight modification in definition of list directed parameter bpixfile 
#  --- MD 2/28/93
# Added check for existence of output files and queried deletion if
#  they are there.  Also deletes other working files (e.g. "one") at start.
#  --- MD 2/27/93
# Debugging problem where pixin+ doesn't work 7 Dec
# Added spec shifts="" in imshift calls 19Oct 1992 in response
# to bug noted by Brian McLeod.
# minor param prompt mod 14 Sept 1992 
# Procedure to combine images taken at different locations
# into one big image, with no loss of spatial coverage or signal
# Assumes all input images have same dimensions
# Peter Eisenhardt 3 April 1989
# Modified 13 June 1989 to have scale and angle - unlike shiftpix,
# this version takes coordinate offsets as input.
# Further modified 21 Sept 1990 to allow masking of bad pixels specified
# in file bpixfile (uses fixpix format)
# Minor change 22 Oct/90 to add secpexp - seconds per exposure unit -
# Output is then in units of flux per second.
# Mofified 13 May 1991 to add parameter rotation which gives
# sense of North thru E.  Rotation is "true" if N thru E is CCW,
# which means "sign" is negative (and vice versa).  Rotation and
# angle are use in task orient, which does the transformation to
# put N near top and E near left.
# more mods 15 July 1991 -- changing way integers vs. fractions are handled
# so that always do "proper" integer shift
# also doing auto weighting assuming bundle format name
# and allowing different x and y scales
# Yet more mods 22 July 1991 to support sublocalmask --
# now generates addtl output file outimg//"._shift"
# Still even more additional mods 24 July -- separate dependence of
# NE, from input coords AB
# Don't need orientshiftlist call -- just want shifts in raw
# input coords, but do need to deshift mask pixel coords from final output coords
# Corrected formulat for newx, newy to match geopmap and handle different
# x and y scale values correctly.
#
# 9 Dec 91 removed prefix character of img for record in oshifti
#
# Upgraded 8 July 92 to work with IRAF version 2.10 by John Ward

string 	image_list	{prompt="List of images, ashifts, bshifts, and weights"}
string 	outimg		{prompt="Output combined image name"}
string 	badpixfile	{prompt="Bad pixel file"}
bool 	pixin   	{no, prompt="Are input coords measured pixels of ref object?"}
real 	xscale  	{1., prompt="x pixels per ab coord unit"}
real 	yscale  	{1., prompt="y pixels per ab coord unit"}
real 	axangle 	{180., prompt="angle in degrees from a CCW to x"}
bool 	absense 	{no, prompt="Is a thru b counterclockwise?"}
real 	angle   	{0., prompt="angle in degrees from y to N dir N thru E"}
bool 	rotation	{yes, prompt="Is N thru E counterclockwise?"}
string 	interp  	{"linear", enum="nearest|linear|poly3|poly5|spline3", 
				prompt="Interpolation algorithm"}
int  	nprefix  	{1, min=0, prompt="Number of letters in input image prefix"}
real 	secpexp 	{60., prompt="Seconds per unit exposure time"}
int 	ncoavg  	{1, min=1, prompt="Number of internal coaverages per frame"}
struct *imglist

begin
	real axrad			# ax angle in radians
	real a,b			# fscan'ed values for coords a and b of input frame
	real newx,newy			# values for x and y shift
	real exp			# fscan'ed relative exposure time
	real mexp
	real seconds			# exposure time in seconds 
	real xfrac,yfrac		# fractional (subpixel) x and y shifts
	real xmin,xmax,ymin,ymax	# extreme values for x and y shifts
	int ixmin,ixmax,iymin,iymax   	# Integer values of extreme shifts
	int ix,iy			# Start and finish column,row 
	int fx,fy			#   for integer shift using copy 
	int ixdim,iydim			# x and y dimensions of input images
	int oxdim,oydim			# x and y dimensions of output image
	int sign			# -1 if absense is CW, +1 if CCW
	int ilen			# used to get string lengths
	int numsub			# for removing prefixs in ._shift
	string strtemp			# used to get number bundled
	real navg			# number bundled
	string bpfile			# equals bad pixel file
	string img,oimg			# input and output image names
	string ext			# default extension
	string shimg			# shorter img name without 1st char.
	string rewind			# used to rewind imglist
	string sect			# image section used for integer shift
	string oshifti			# list of images and pixel shifts used
	string headfile1, headfile2	# files for temporary storage of header
	struct theadline		# temporary struct for header information
	xmin=9E+32			# initial values -- set large so that
	ymin=9E+32			# they will get reset
	xmax=-2E+9
	ymax=-2E+9	

# Load necessary packages
#	images		# need imgets
#	imdebug		# need mkimage

# Get the query parameters.

	rewind = image_list
	oimg = outimg
	bpfile = badpixfile

# Strip extension off output image name if present.

	fileroot (oimg,validim+)
	oimg = fileroot.root
	ext = fileroot.defextn

	axrad=axangle*3.1415926535/180.

	sign=-1
	if (absense) sign=1

# If input coords are measured pixels of ref object, scale is 1, but
# shifts are opposite sign of measured pixels.
	if(pixin) {
		xscale=-1.
		yscale=-1.
# Adding set axangle = 0. and absense=yes if pixin+
		axrad=0.
		sign=1
	}

	oshifti=oimg//"._shift"
	numsub=nprefix + 1

# Check for existence of output files and query about deletion.
	if (access(oimg//ext)) {
		print ("Output image already exists.")
		imdelete (oimg,ve+)
		}
	if (access("exp"//oimg//ext)) {
		print ("Output image already exists.")
		imdelete ("exp"//oimg,ve+)
		}

	if (access("_one"//ext)) imdelete ("_one"//ext,ver-)
	if (access(oshifti)) {
		delete (oshifti,ver-)
	}
	

# Find maximum and minimum x and y shift values
	imglist=rewind			# rewind imglist
	while (fscan (imglist,img,a,b) != EOF) {
		newx=xscale*a*cos(axrad) + yscale*b*sign*sin(axrad)
		newy=yscale*b*sign*cos(axrad) - xscale*a*sin(axrad)
		if (newx < xmin)  {
			xmin = newx
		}
		if (newy < ymin)  {
			ymin = newy
		}
		if (newx > xmax) {
			xmax = newx
		}
		if (newy > ymax) {
			ymax = newy
		}
		imarith (img,"*",bpfile,img,ver-)
	}
	ixmax=0
	ixmin=0
	iymax=0
	iymin=0
	if(xmax!=0.)ixmax=int(xmax+0.5*(xmax/abs(xmax)))
	if(ymax!=0.)iymax=int(ymax+0.5*(ymax/abs(ymax)))
	if(xmin!=0.)ixmin=int(xmin+0.5*(xmin/abs(xmin)))
	if(ymin!=0.)iymin=int(ymin+0.5*(ymin/abs(ymin)))
# Set dimensions for output image based on input image dimensions
# and the extreme values
	imgets(img,"i_naxis1")
	ixdim = int(imgets.value) 
	oxdim = ixdim + ixmax - ixmin
	imgets(img,"i_naxis2")
	iydim = int(imgets.value) 
	oydim = iydim + iymax - iymin
# Make a flat image for scaling position dependent exposure time.  Copy
# header of first input image into this file.
	#mkimage("_one",ixdim,iydim,"r",1.,"Scaling image")
	mkpattern ("_one", pattern="constant", option="replace", v1=1.,
	    title="Scaling image", pixtype="r",
	    ndim=2, ncols=ixdim, nlines=iydim)
# Set bad pixels to zero in the flat image.
	imarith ("_one","*",bpfile,"_one",ver-)

# Create output images here.
        #mkimage(oimg,oxdim,oydim,"r",0.,"shifted")
        #mkimage("exp"//oimg,oxdim,oydim,"r",0.,"Exposure map")
	mkpattern (oimg, pattern="constant", option="replace", v1=0.,
	    title="shifted", pixtype="r", ndim=2, ncols=oxdim, nlines=oydim)
	mkpattern ("exp"//oimg, pattern="constant", option="replace", v1=0.,
	    title="Exposure map", pixtype="r", ndim=2, ncols=oxdim,
	    nlines=oydim)

# Now do the shift 

	imglist=rewind			# rewind imglist

	while (fscan (imglist,img,a,b,exp) != EOF) {
		print("Shifting image "//img)

# Strip off extension if present.

		fileroot (img,validim+)
		img = fileroot.root

# Calculate integer shifts 
		newx=xscale*a*cos(axrad) + yscale*b*sign*sin(axrad)
		newy=yscale*b*sign*cos(axrad) - xscale*a*sin(axrad)
		ix=0
		if(newx!=0.) ix=int(newx+0.5*(newx/abs(newx)))
		xfrac=newx-ix
		ix = 1 + ix - ixmin	# For zero shift of 50 x 100,
		fx = ix + ixdim - 1		# imcopy shift big[1:50,1:100]
		iy=0
		if(newy!=0.) iy=int(newy+0.5*(newy/abs(newy)))
		yfrac=newy-iy
		iy = 1 + iy - iymin
		fy = iy + iydim - 1

# Record shifts in oshifti
		shimg=substr(img,numsub,strlen(img))
		print(shimg," ",ix,iy, >> oshifti)

# Check to see if weight is exactly zero, and if so skip the rest of the loop
# for this image.

		if (exp == 0.0) {
			print ("  Image weight is zero in the sum.  Moving on...")
			next
		}

# Construct the image section string
		sect = "["//ix//":"//fx//","//iy//":"//fy//"]"

# Do fractional pixel shifts
		imshift(img,"shift"//img,xsh=xfrac,ysh=yfrac,
			shifts="",int=interp,bo="constant",con=0.)

# Make big empty image 
		#mkimage("bigshift"//img,oxdim,oydim,"r",0.,"shifted")
		mkpattern ("bigshift"//img, pattern="constant",
		    option="replace", v1=0., title="shifted", pixtype="r",
		    ndim=2, ncols=oxdim, nlines=oydim)

# The routine 'bundle.cl' averaged all size bundles to a single unit of
# exposure time, regardless of how many units went into the bundle.
# To weight the cumulative exposure properly, we need to multiply
# each bundle by the number of units (navg) that went into it.
# This will be read from the file name, since the suffix '-bN' was
# attached for this purpose.  Note that N (=navg) must be less than 10
# (i.e. a single digit) for the following to work.
#
# This should really be replaced with a call to the image header, and
# bundle should record the number of frames bundled in that header keyword...

                ilen=strlen(img)
                if(substr(img,ilen-1,ilen-1)=="b") {
                        strtemp=substr(img,ilen,ilen)
                        navg=real(strtemp)
                        exp=exp*navg
                  } else {
			navg = 1
		}

# Multiply exposure by the number of internally coaveraged exposures per frame,
# then multiply into shifted frame.

		exp = exp * ncoavg
		mexp = ncoavg * navg
		imarith("shift"//img,"*",mexp,"shift"//img,pixt="real",
			calc="real",ver-)

# Do shift for exposure map too.  Use linear interpolation unless interp="nearest".

		if (interp=="nearest")
			imshift("_one","scale"//img,xsh=xfrac,ysh=yfrac,
				shifts="",int="nearest",bo="constant",con=0.)
  		else
			imshift("_one","scale"//img,xsh=xfrac,ysh=yfrac,
				shifts="",int="linear",bo="constant",con=0.)

# and copy into the big image
		imcopy("shift"//img,"bigshift"//img//sect,ver-)
		imdel("shift"//img,verify=no)

# and finally sum into output image. 
                imarith("bigshift"//img,"+",oimg,oimg,pixt="real",calc="real")
                imdel("bigshift"//img,verify=no)

# Now make the image to scale for position dependent exposure time
		#mkimage("bigscale"//img,oxdim,oydim,"r",0.,"scaling")
		mkpattern ("bigscale"//img, pattern="constant",
		    option="replace", v1=0., title="scaling", pixtype="r",
		    ndim=2, ncols=oxdim, nlines=oydim)
		seconds=secpexp*exp
		imarith("scale"//img,"*",seconds,"scale"//img,pixt="real",
			calc="real",ver-)
		imcopy("scale"//img,"bigscale"//img//sect,ver-)
		imdel("scale"//img,verify=no)
                imarith("bigscale"//img,"+","exp"//oimg,"exp"//oimg,pixt="real",
                        calc="real",ver-)
                imdel("bigscale"//img,verify=no)
	}

	imdel("_one",verify=no)

# Divide output image sum by exposure map.

	imarith(oimg,"/","exp"//oimg,oimg,divzero=0.,pixt="real",
		calc="real",ver-)

# Orient these to N at top, E at left for iraf default

	orient(oimg,angle,rotation=rotation,invert-)
	orient("exp"//oimg,angle,rotation=rotation,invert-)

# Copy header information from 1st input frame into the final mosaic and 
# exposure map images.  Set mosaic exposure time to 1 second, delete exposure
# time info from exposure map, and reset image titles.  Add comment card about
# origin of header information.

	print ("Updating header information.")
	imglist=rewind			# rewind imglist
	if (fscan (imglist,img,a,b) != EOF) {
		headfile1 = mktemp("_header")
		headfile2 = mktemp("_header")
		hfix (img,command="copy $fname "//headfile1)
		match ("dimsum.shiftfix",headfile1,stop+,print+,>headfile2)
		hfix (oimg,command="delete $fname ve- ; copy "//headfile2//" $fname")
		hselect (img,"title",yes) | scan(theadline)
		hedit (oimg,field="exptime",value="1",add+,ver-,show+,update+)
		hedit (oimg,field="title",value="Shiftfix mosaic sum: "//theadline,
			ver-,show+,update+)
		hedit (oimg,fields="BPM,HOLES,SKYMED",delete+,ver-,show+,update+)
		hedit ("exp"//oimg,field="title",
			value="Exposure time map: "//theadline,ver-,show+,update+)
		time | scan (theadline)
		addcomment ("exp"//oimg,"dimsum.shiftfix:  "//theadline,ver-)
		addcomment (oimg,"dimsum.shiftfix:  "//theadline,ver-)
		addcomment (oimg,"dimsum.shiftfix:  Header data copied from file "//img,ver-)
		delete (headfile1,ve-)
		delete (headfile2,ve-)
	}

	imglist = ""

end
