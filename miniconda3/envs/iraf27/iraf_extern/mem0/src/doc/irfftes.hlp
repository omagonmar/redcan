.help irfftes Dec93 mem0
.ih
NAME
irfftes -- Test the 2-D FFT procedure in IRAF
.ih
USAGE
irfftes output 
.ih
PARAMETERS
.ls output
The common part of the output data file names.
.le
.ls n1=128, n2=128
Array size in each dimension. 
.le
.ih
DESCRIPTION
This is a task for testing the 2-D FFT procedure FFT_NCAR.
The test data are 
generated by a separate procedure FFTDATA (a Gaussian function normally).

The output data file name before FFT is output//"r", 
after a forward FFT is output//"c",
and after double (forward and then inverse) FFT is output//"d".
The output data after a forward FFT are their magnitudes.

The FFT size is arbitrary, not necessarily a power of two. 
The FFT will be fastest if the size is a power of two, and will be
slow if it has a large prime factor. Use the task \fIpfactor\fR
to see the factors.
.ih
EXAMPLES
1. Generate a 127x129 real array, FFT and then IFFT it.
 
	me>irfftes fftfile n1=127 n2=129
.ih
TIME REQUIREMENTS
The initial and accumulated CPU times will be displayed when the task is
running. So it is easy to calculate the CPU time for each FFT.
The following table presents the CPU times in seconds for  2-D FFTs  of 
various sizes on
Sun 4/370 and Sparc2 (RA), and VAX-8800 (SCIVAX) at STScI.

.nf
n1xn2   Sun   Sun    VAX   Factors  | n1xn2     Sun   Sun    VAX   Factors
        4/370 Sparc2 8800           |           4/370 Sparc2 8800
----------------------------------------------------------------------------
63x63   0.14  0.09   0.30  63=3x3x7 | 511x511   40    21     74    511=7x73
63x65   0.16  0.11   0.35  65=5x13  | 511x513   26    14     50    513=
64x64   0.10  0.06   0.25           | 512x512    8.7   4.1   20    3x3x3x19
65x65   0.16  0.12   0.33           | 513x513   13     7.3   28
                                    |                            800=2x2x2x
127x127 6.9   4.2    14    127=127  | 800x800   23    14     62      2x2x5x5
127x129 4.3   2.6     8.6  129=3x43 | 1023x1023 83    45         1023=3x11x
128x128 0.42  0.25    1.0           | 1024x1024 37    22	      31 
129x129 1.7   1.0     3.4           |  
                                    |
255x255  3.2   1.8    7.1 255=3x5x17|
255x257 29    18     54   257=257   |
256x256  1.9   1.1    4.4           |
257x257 55    34    110             |	
.fi

4 interface procedures have been written for using subroutines in the NCARFFT 
library for 2-D FFT. They are:

.nf
(1) fft_b_ma (pt_c, n1, n2, work)   # Initialization
(2) fft_b_mf (pt_c, work)           # Dynamic memory deallocation
(3) ffft_b (ray, cay, n1, n2, work) # Forward FFT, real=>complex, not scaled
(4) ifft_b (cay, ray, n1, n2, work) # Inverse FFT, complex=>real, scaled 

N.B. The real array ray is intact after calling ffft_b, but the complex
array cray is changed after calling ifft_b!
.fi

The following program segment shows how to call the procedures.
.nf
......
int     n1, n2          # Array size
int     narr            # Total number of points in the array
pointer pt_rarray       # Pointer of the real array
pointer pt_carray       # Pointer of the complex array
pointer work            # Pointer of fft working space structure

begin
        # Memory allocation for the real array 
        narr = n1 * n2
        call malloc (pt_r, narr, TY_REAL)

        # FFT initialization, including dynamic memory allocation for 
        # the complex array holding input/output for FFT, calculate 
        # trigonometrical function tables, and allocate some working 
	# space for FFT.
        call fft_b_ma (pt_carray, n1, n2, work)

        # Calling forward FFT
        call ffft_b (Memr[pt_rarray], Memx[pt_carray], n1, n2, work)
	
        # Calling inverse FFT 
        call ifft_b (Memx[pt_carray], Memr[pt_rarray], n1, n2, work)

        # Finish up
        call fft_b_mf (pt_carray, work)
        call mfree (pt_rarray)
        ......
end
.fi
.ih
BUGS
.ih
SEE ALSO
.endhelp
