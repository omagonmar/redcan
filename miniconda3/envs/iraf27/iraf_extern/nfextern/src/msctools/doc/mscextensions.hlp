.help mscextensions Aug07
.ih
NAME
mscextensions -- make a list of images
.ih
USAGE   
.nf
mscextensions input
.fi
.ih
PARAMETERS
.ls input
List of input images and multiextension FITS (MEF) files.
Image sections may be included and are applied to all image extensions
in MEF files.
.le
.ls output = "file" (none|list|file)
Output type for the list of image extensions.  The choices are:

.nf
    none - no output
    list - a comma separated list as a single line
    file - a list of one image extension per line
.fi

The "none" output is used to just set the number of image extensions in the
\fInimages\fR parameter and whether there are image extensions in the
\fIimext\fR parameter.  The "list" output is used for a short list that
can be scanned into a CL variable.  The "file" output is used for a long
list and to be redirected to a file for use as an "@file".  If "list"
output is selected and the list length exceeds 255 characters (the
size of a CL string) the task will abort with an error.
.le
.ls index = ""
Extension index range list.  The range list syntax is described under the
help topic \fBranges\fR.  If no list is specified it is equivalent to
"0-" where all indices are examined.
.le
.ls extname = ""
List of comma separated extension name patterns.  If a null string or
"*" is specified then there is no filtering on the extension name.  If a
pattern list is specified then only image extensions with an extension
name matching one of the patterns will be selected.  A missing extension
name takes the value "none" for the purpose of matching.  The patterns
are described under the help topic \fImatch\fR.  For more detail
on this parameter see the discussion.
.le
.ls extver = ""
Extension version range list.  If a null list is specified then there is
no check on the extension version.  If a list is given then only image
extensions with extension versions in the list will be selected.
The range list syntax is described under the help topic \fBranges\fR.
.le
.ls lindex = yes
List image extensions with the extension index?  If the value is
"no" then the extension index will not be listed if the extension
name and/or the extension version is listed.  If there is no
extension name or extension version then the extension index is
always listed regardless of the value of this parameter.
.le
.ls lname = no
List the image extensions with the extension name if there is one?
.le
.ls lver = no
List the image extensions with the extension version if there is one?
.le
.ls dataless = no
Include dataless images in the output?  For example, this would be set
to include an MEF primary image used as a global inherited header.
.le
.ls ikparams = ""
Include the specified image kernel parameters in the image extension
names.  The image kernel parameters are specific to the various
IRAF image formats.
.le
.ls nimages, imext
Thes are an output parameters which is set to the number of images and
whether any of the images were image extensions as opposed to regular
images.  Note that if the task is run as a background job these parameter
will not be set in the disk parameter file though it can be made available
in a background script by caching the parameter set; i.e.  include the
command "cache mscextensions" at the beginning of the script.
.le
.ls
.ih
DESCRIPTION
\fBMscextensions\fR selects and lists images and image extensions.
Image extensions currently occur in multi-extension FITS (MEF) files
and multi-group Geiss (STF format) files.  The image extension names are
given in proper syntax for IRAF image names for use in tasks expecting
image names.  The output format type may be a one line list, a list of
one image extension name per line, or no output.  These options allow
capturing the expanded list in a CL string variable, in a file for use
as an "@file", or to simply count the number of image extensions matching
the selection criteria.  Note that if the "list" output type is selected
and the list of image extensions exceeds 255 characters (the limit for
a CL string) then the task aborts with an error.

In order handle regular and MEF extension images in the same way one must
understand that all images in IRAF may be addressed with a numeric index
while those that are "regular" images may also be addressed without
an index.  Non-FITS format images are considered to have an index of 1.
For example, an image in the IRAF format may be addressed
as pix.imh, pix, pix.imh[1], and pix[1].  FITS files start with index 0
in order that index 1 may be used to refer to the first extension.
So a plain FITS image, say foo.fits may also be addressed as foo, foo[0],
or foo.fits[0].  If a FITS file has both a primary (index 0) image and
extensions then the zero index must be explicitly used.

For regular images the index range must include 0 for FITS images (or
primary images in FITS files with extensions) and 1 for non-FITS images.
In the resulting list, the index notation is dropped unless it is required;
i.e. in a FITS file with both a primary image and extensions.

The input set of candidate images may be filtered by index, extension
name, extension version, and whether images are dataless.

\fIindex\fR is a range list (see \fBranges\fR) of indices to be applied
to each input file for identifying images.  If a null string is
specified then all non-negative index values are examined.

\fIextname\fR is a comma delimited list of patterns for extension names.
If no list (a null string) or the string "*" is specified then no
filtering on the extension name is done.  For a description of pattern
matching syntax see \fBmatch\fR.  Extension names are those specified
by the EXTNAME keyword.  For the purpose of explicit pattern matching
strings a missing EXTNAME keyword is treated as the extension name "none".
To include a comma in a pattern you must escape it by preceding it with
'\', however, a comma in an extension name may cause other problems
because IRAF image extension syntax using the extension name does not
allow commas or whitespace.  Each pattern has '^' and '$' prepended
and appended respectively which means the pattern must match the entire
extension name.  A common mistake is that '*' in a pattern is different
than '*' in a file template.  In this case use '?*'.

The reasons for a list of patterns matching the entire extension name
are to allow intuitive explicit lists of names, such as "im1,im11,im13",
and to deal with names which are difficult to unambiguously specify with
a single pattern.

\fIextver\fR is a range list for extension version numbers.  If no
list is given then no filtering on extension versions is performed.
See \fBranges\fR for more on range lists.

\fIdataless\fR is a boolean parameter that selects whether to filter out
dataless images.  Dataless images are uncommon except for a class of MEF
files where the primary image is used only for global inherited header
keywords.  This parameter may be used to include this global header in
expansions of this type of MEF files.

The output of the list of selected images for FITS image extensions may
be expressed either with the index notation (e.g. name[3]) or extension
name and/or extension version (e.g. name[im3], name[im5,2]).  This is
controlled by the \fIlindex\fR, \fIlname\fR and \fIlver\fR boolean
parameters.  If the extension name and or version number are selected
then that format is used even if \flindex\fR is also selected.  If
there is no extension name or extension version then the index is used
even if \fIlindex\fR is not selected.  Also remember that for regular
images where an index or extension sections is not required none will
be used.

The output names may also include additional "image kernel" information.
Different image types, currently mostly for FITS images, have parameters
that may be specified in the image kernel section.  The \fIikparams\fR
string may be used to add these additional parameters within the
kernel section part of the name.

Finally, the input files, including MEF files, in the input file list
may include "image sections".  During processing image sections are
stripped and then appended on the output.  For example, name[1:10,1:10]
might expand to name[im1][1:10,1:10], name[im2][1:10,1:10], etc.
.ih
EXAMPLES
1.  Get a list of image extensions in a CL string and use it to select
header keywords.  This illustrates the use of the "list" output and
a CL variable.

.nf
    cl> mscext obj001 output=list | scan (s1)
    cl> = s1
    obj001[1],obj001[2],obj001[3]
    cl> if (mscext.nimages > 0)
    >>> hselect (s1, "$I,title", yes)
    obj001[1]   Alpha Leo
    obj001[2]   Beta Leo
    obj001[3]   Gamma Leo
.fi

2.  Do the same thing as in the first example using an "@file".

.nf
    cl> mscext obj001 output=file > list.dat
    cl> type list.dat
    obj001[1]
    obj001[2]
    obj001[3]
    cl> if (mscext.nimages > 0)
    >>> hselect @list.dat $I,title yes
    obj001[1]   Alpha Leo
    obj001[2]   Beta Leo
    obj001[3]   Gamma Leo
.fi

3.  Create a list selecting only the first and third extension and using the
image extension name, version, and an image kernel section.

.nf
    cl> mscext obj*[1:100,1:100] index=1,3 lindex- lname+ lver+ ikparams=expand
    obj001.fits[aleo,1,expand][1:100,1:100]
    obj003.fits[gleo,1,expand][1:100,1:100]
    obj002.fits[im1,1,expand][1:100,1:100]
    obj002.fits[im3,1,expand][1:100,1:100]
    cl> = mscext.nimages
    4
.fi

4.  List only the primary images in a set of multi-extension FITS files.
A primary image need not contain image data; i.e. this will select
global headers with NDIM=0 as well as headers with image data.

.nf
    cl> mscext *.fits index=0
    abc.fits[0]
    def.fits[0]
    ghi.fits[0]
.fi

5.  Use this task in a script to test on the existence of extension name
"joy".  This example shows the use of the pattern matching and of the
\fBcache\fR command to insure the script works as a background task.

.nf
    procedure example (image)

    file    image   {prompt="Image"}

    begin
	    file    im

	    cache mscextensions
	    im = image

	    mscextensions (im, output="none", extname="joy")
	    if (mscextensions.nimages == 0)
		call printf ("No joy found with %s\n", im) 
    end
.fi

Note that proper script programming would make all the hidden parameters
explicit.


6.  Example of the extension name pattern matching.

.nf
    cl> mscext obj.fits extname=joy lindex- lname+
    obj.fits[joy]
    obj.fits[nojoy]
    obj.fits[joyfull]
    cl> mscext obj.fits extname="^joy$" lindex- lname+
    obj.fits[joy]
    cl> mscext obj.fits extname="{joy}$" lindex- lname+
    obj.fits[joy]
    obj.fits[Joy]
    obj.fits[nojoy]
.fi

The first example matches "joy" anywhere in the extension name, the
second requires an exact match with the begin and end string characters,
and the last example ignores the case and requires the name end with
joy.

7.  An example with a Geiss file.

.nf
    cl> mscext y00vk102r.d0h index="x5"
    y00vk102r.d0h[1]
    y00vk102r.d0h[6]
    y00vk102r.d0h[11]
    y00vk102r.d0h[16]
    y00vk102r.d0h[21]
    y00vk102r.d0h[26]
    y00vk102r.d0h[31]
    y00vk102r.d0h[36]
.fi

.le
.ih
SEE ALSO
.nf
files, sections, ranges, match, xt_extns, imextensions
.fi
.endhelp
